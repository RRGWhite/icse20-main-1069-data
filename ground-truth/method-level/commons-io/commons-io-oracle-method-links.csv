project,test-fqn,function-fqn
commons-io,"org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()","org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)"
commons-io,"org.apache.commons.io.output.DeferredFileOutputStreamTest.testTempFileBelowThreshold()","org.apache.commons.io.output.ThresholdingOutputStream.write(byte[], int, int)"
commons-io,"org.apache.commons.io.output.ChunkedWriterTest.write_four_chunks()","org.apache.commons.io.output.ChunkedWriter.write(char[], int, int)"
commons-io,"org.apache.commons.io.input.WindowsLineEndingInputStreamTest.twoLinesAtEnd()","org.apache.commons.io.input.WindowsLineEndingInputStream.read()"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.readFileToString(java.io.File)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String, boolean)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.readFileToString(java.io.File)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, boolean)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.readFileToString(java.io.File)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, java.lang.String, boolean)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeStringToFile(java.io.File, java.lang.String)"
commons-io,"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.ourTestClassAcceptedFirstWildcard()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.String[])"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()","org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File, java.io.File)"
commons-io,"org.apache.commons.io.input.AutoCloseInputStreamTest.testClose()","org.apache.commons.io.input.AutoCloseInputStream.close()"
commons-io,"org.apache.commons.io.input.CountingInputStreamTest.testResetting()","org.apache.commons.io.input.CountingInputStream.getCount()"
commons-io,"org.apache.commons.io.input.CountingInputStreamTest.testResetting()","org.apache.commons.io.input.CountingInputStream.resetCount()"
commons-io,"org.apache.commons.io.input.CountingInputStreamTest.testResetting()","org.apache.commons.io.input.ProxyInputStream.read(byte[], int, int)"
commons-io,"org.apache.commons.io.DirectoryWalkerTestCase.testMissingStartDirectory()","org.apache.commons.io.DirectoryWalker.walk(java.io.File, java.util.Collection<T>)"
commons-io,"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.read()"
commons-io,"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.reset()"
commons-io,"org.apache.commons.io.DirectoryWalkerTestCase.testCancel()","org.apache.commons.io.DirectoryWalker.handleCancelled(java.io.File, java.util.Collection<T>, org.apache.commons.io.DirectoryWalker$CancelException)"
commons-io,"org.apache.commons.io.DirectoryWalkerTestCase.testCancel()","org.apache.commons.io.DirectoryWalker.walk(java.io.File, java.util.Collection<T>)"
commons-io,"org.apache.commons.io.output.AppendableOutputStreamTest.testWriteStringBuilder()","org.apache.commons.io.output.AppendableOutputStream.write(int)"
commons-io,"org.apache.commons.io.output.WriterOutputStreamTest.testLargeUTF8WithSingleByteWrite()","org.apache.commons.io.output.WriterOutputStream.write(int)"
commons-io,"org.apache.commons.io.TaggedIOExceptionTest.testTaggedIOException()","org.apache.commons.io.TaggedIOException.<init>(java.io.IOException, java.io.Serializable)"
commons-io,"org.apache.commons.io.TaggedIOExceptionTest.testTaggedIOException()","org.apache.commons.io.TaggedIOException.isTaggedWith(java.lang.Throwable, java.lang.Object)"
commons-io,"org.apache.commons.io.output.ProxyOutputStreamTest.testWriteNullBaSucceeds()","org.apache.commons.io.output.ProxyOutputStream.write(byte[])"
commons-io,"org.apache.commons.io.output.StringBuilderWriterTest.testAppendChar()","org.apache.commons.io.output.StringBuilderWriter.append(char)"
commons-io,"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()","org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()","org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File, java.io.File, boolean)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()","org.apache.commons.io.FileUtils.moveDirectory(java.io.File, java.io.File)"
commons-io,"org.apache.commons.io.output.XmlStreamWriterTest.testUTF16BEEncoding()","org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[], int, int)"
commons-io,"org.apache.commons.io.output.XmlStreamWriterTest.testLatin7Encoding()","org.apache.commons.io.output.XmlStreamWriter.detectEncoding(char[], int, int)"
commons-io,"org.apache.commons.io.IOCaseTestCase.test_serialization()","org.apache.commons.io.IOCase.values()"
commons-io,"org.apache.commons.io.input.XmlStreamReaderUtilitiesTest.testTextXml()","org.apache.commons.io.input.XmlStreamReader.isTextXml(java.lang.String)"
commons-io,"org.apache.commons.io.FileUtilsTestCase.testIO300()","org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File, java.io.File, boolean)"
commons-io,"org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()","org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)"
commons-io,"org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()","org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)"
commons-io,"org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()","org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)"
commons-io,"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortListNull()","org.apache.commons.io.comparator.AbstractFileComparator.sort(java.util.List<java.io.File>)"
