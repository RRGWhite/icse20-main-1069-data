test-fqn,function-fqn,raters
org.apache.commons.lang3.math.NumberUtilsTest.testIsDigits(),org.apache.commons.lang3.math.NumberUtils.isDigits(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.builder.EqualsBuilderTest.testObjectRecursiveCycleSelfreference(),org.apache.commons.lang3.builder.EqualsBuilder.isEquals(),"J1,J3,J4"
org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray(),org.apache.commons.lang3.builder.ToStringBuilder.append(float[]),"J1,J3,J4"
org.apache.commons.lang3.builder.ToStringBuilderTest.testFloatArray(),org.apache.commons.lang3.builder.ToStringBuilder.toString(),"J1,J3,J4"
org.apache.commons.lang3.text.StrSubstitutorTest.testStaticReplacePrefixSuffix(),"org.apache.commons.lang3.text.StrSubstitutor.replace(java.lang.Object, java.util.Map<java.lang.String, V>, java.lang.String, java.lang.String)","J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsRemoveMultipleTest.testRemoveAllNullObjectArray(),"org.apache.commons.lang3.ArrayUtils.remove(T[], int)","J1,J3,J4"
org.apache.commons.lang3.time.FastDateParserTest.testDayNumberOfWeek(),org.apache.commons.lang3.time.FastDateParser.parse(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.time.DateUtilsTest.testLANG799_DE_FAIL(),"org.apache.commons.lang3.time.DateUtils.parseDate(java.lang.String, java.lang.String[])","J1,J3,J4"
org.apache.commons.lang3.concurrent.EventCountCircuitBreakerTest.testChangeEvents(),org.apache.commons.lang3.concurrent.AbstractCircuitBreaker.addChangeListener(java.beans.PropertyChangeListener),"J1,J3,J4"
org.apache.commons.lang3.builder.ToStringStyleTest.testSetSizeStartText(),org.apache.commons.lang3.builder.ToStringStyle.setSizeStartText(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.text.StrLookupTest.testMapLookup_nullMap(),org.apache.commons.lang3.text.StrLookup.MapStrLookup.lookup(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.text.StrLookupTest.testMapLookup_nullMap(),"org.apache.commons.lang3.text.StrLookup.mapLookup(java.util.Map<java.lang.String, V>)","J1,J3,J4"
org.apache.commons.lang3.mutable.MutableIntTest.testIncrement(),org.apache.commons.lang3.mutable.MutableInt.increment(),"J1,J3,J4"
org.apache.commons.lang3.mutable.MutableIntTest.testIncrement(),org.apache.commons.lang3.mutable.MutableInt.intValue(),"J1,J3,J4"
org.apache.commons.lang3.mutable.MutableIntTest.testIncrement(),org.apache.commons.lang3.mutable.MutableInt.longValue(),"J1,J3,J4"
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeResultsIsSuccessfulFalse(),org.apache.commons.lang3.concurrent.BackgroundInitializer.get(),"J1,J3,J4"
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeResultsIsSuccessfulFalse(),org.apache.commons.lang3.concurrent.BackgroundInitializer.start(),"J1,J3,J4"
org.apache.commons.lang3.concurrent.MultiBackgroundInitializerTest.testInitializeResultsIsSuccessfulFalse(),"org.apache.commons.lang3.concurrent.MultiBackgroundInitializer.addInitializer(java.lang.String, org.apache.commons.lang3.concurrent.BackgroundInitializer<?>)","J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),org.apache.commons.lang3.RandomStringUtils.random(int),"J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),"org.apache.commons.lang3.RandomStringUtils.random(int, char[])","J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),"org.apache.commons.lang3.RandomStringUtils.random(int, int, int, boolean, boolean, char[], java.util.Random)","J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),"org.apache.commons.lang3.RandomStringUtils.random(int, java.lang.String)","J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),org.apache.commons.lang3.RandomStringUtils.randomAlphabetic(int),"J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),org.apache.commons.lang3.RandomStringUtils.randomAlphanumeric(int),"J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),org.apache.commons.lang3.RandomStringUtils.randomAscii(int),"J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),org.apache.commons.lang3.RandomStringUtils.randomGraph(int),"J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),org.apache.commons.lang3.RandomStringUtils.randomNumeric(int),"J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomStringUtils(),org.apache.commons.lang3.RandomStringUtils.randomPrint(int),"J1,J3,J4"
org.apache.commons.lang3.time.FastTimeZoneTest.testUTC(),org.apache.commons.lang3.time.FastTimeZone.getGmtTimeZone(),"J1,J3,J4"
org.apache.commons.lang3.time.FastTimeZoneTest.testUTC(),org.apache.commons.lang3.time.FastTimeZone.getTimeZone(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testLang295(),org.apache.commons.lang3.text.StrBuilder.<init>(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testLang295(),org.apache.commons.lang3.text.StrBuilder.contains(char),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testLang295(),org.apache.commons.lang3.text.StrBuilder.deleteFirst(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testLang295(),org.apache.commons.lang3.text.StrBuilder.indexOf(char),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(boolean[]),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(byte[]),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(char[]),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(double[]),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(float[]),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(int[]),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(long[]),"J1,J3,J4"
org.apache.commons.lang3.ArrayUtilsTest.testIsNotEmptyPrimitives(),org.apache.commons.lang3.ArrayUtils.isNotEmpty(short[]),"J1,J3,J4"
org.apache.commons.lang3.RangeTest.testIsBeforeRange(),org.apache.commons.lang3.Range.isBeforeRange(org.apache.commons.lang3.Range<T>),"J1,J3,J4"
org.apache.commons.lang3.ObjectUtilsTest.testPossibleCloneOfNotCloneable(),org.apache.commons.lang3.ObjectUtils.cloneIfPossible(T),"J1,J3,J4"
org.apache.commons.lang3.RandomStringUtilsTest.testRandomPrintRange(),"org.apache.commons.lang3.RandomStringUtils.randomPrint(int, int)","J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int(),"org.apache.commons.lang3.text.StrBuilder.append(java.lang.StringBuilder, int, int)","J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_StringBuilder_int_int(),org.apache.commons.lang3.text.StrBuilder.toString(),"J1,J3,J4"
org.apache.commons.lang3.tuple.TripleTest.testComparable2(),"org.apache.commons.lang3.tuple.Triple.compareTo(org.apache.commons.lang3.tuple.Triple<L, M, R>)","J1,J3,J4"
org.apache.commons.lang3.tuple.ImmutablePairTest.testPairOf(),"org.apache.commons.lang3.tuple.ImmutablePair.of(L, R)","J1,J3,J4"
org.apache.commons.lang3.CharSetUtilsTest.testKeep_StringStringarray(),"org.apache.commons.lang3.CharSetUtils.keep(java.lang.String, java.lang.String[])","J1,J3,J4"
org.apache.commons.lang3.time.GmtTimeZoneTest.getRawOffset(),org.apache.commons.lang3.time.GmtTimeZone.getRawOffset(),"J1,J3,J4"
org.apache.commons.lang3.reflect.TypeUtilsTest.testLang1114(),"org.apache.commons.lang3.reflect.TypeUtils.equals(java.lang.reflect.Type, java.lang.reflect.Type)","J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength(),org.apache.commons.lang3.text.StrBuilder.capacity(),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength(),org.apache.commons.lang3.text.StrBuilder.ensureCapacity(int),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength(),org.apache.commons.lang3.text.StrBuilder.isEmpty(),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength(),org.apache.commons.lang3.text.StrBuilder.length(),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength(),org.apache.commons.lang3.text.StrBuilder.minimizeCapacity(),"J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderTest.testCapacityAndLength(),org.apache.commons.lang3.text.StrBuilder.size(),"J1,J3,J4"
org.apache.commons.lang3.ConversionTest.testBinaryToHexDigitMsb0_bits(),org.apache.commons.lang3.Conversion.binaryToHexDigitMsb0_4bits(boolean[]),"J1,J3,J4"
org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldForceAccess(),"org.apache.commons.lang3.reflect.FieldUtils.getField(java.lang.Class<?>, java.lang.String, boolean)","J1,J3,J4"
org.apache.commons.lang3.text.StrBuilderAppendInsertTest.testAppend_FormattedString(),"org.apache.commons.lang3.text.StrBuilder.append(java.lang.String, java.lang.Object[])","J1,J3,J4"
org.apache.commons.lang3.ClassPathUtilsTest.testToFullyQualifiedPathPackageNullString(),"org.apache.commons.lang3.ClassPathUtils.toFullyQualifiedPath(java.lang.Package, java.lang.String)","J1,J3,J4"
org.apache.commons.lang3.CharSetTest.testHashCode(),org.apache.commons.lang3.CharSet.hashCode(),"J1,J3,J4"
org.apache.commons.lang3.builder.HashCodeBuilderTest.testSuper(),"org.apache.commons.lang3.builder.HashCodeBuilder.<init>(int, int)","J1,J3,J4"
org.apache.commons.lang3.builder.HashCodeBuilderTest.testSuper(),org.apache.commons.lang3.builder.HashCodeBuilder.append(java.lang.Object),"J1,J3,J4"
org.apache.commons.lang3.builder.HashCodeBuilderTest.testSuper(),org.apache.commons.lang3.builder.HashCodeBuilder.appendSuper(int),"J1,J3,J4"
org.apache.commons.lang3.builder.HashCodeBuilderTest.testSuper(),org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode(),"J1,J3,J4"
org.apache.commons.lang3.ClassUtilsTest.test_getName_Object(),"org.apache.commons.lang3.ClassUtils.getName(java.lang.Object, java.lang.String)","J1,J3,J4"
org.apache.commons.lang3.StringUtilsContainsTest.testContainsIgnoreCase_StringString(),"org.apache.commons.lang3.StringUtils.containsIgnoreCase(java.lang.CharSequence, java.lang.CharSequence)","J1,J3,J4"
org.apache.commons.lang3.LocaleUtilsTest.testLanguagesByCountry(),org.apache.commons.lang3.LocaleUtils.languagesByCountry(java.lang.String),"J1,J3,J4"
org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectComparator(),"org.apache.commons.lang3.builder.CompareToBuilder.append(java.lang.Object, java.lang.Object, java.util.Comparator<?>)","J1,J3,J4"
org.apache.commons.lang3.builder.CompareToBuilderTest.testObjectComparator(),org.apache.commons.lang3.builder.CompareToBuilder.toComparison(),"J1,J3,J4"
org.apache.commons.lang3.StringUtilsTest.testDefaultIfBlank_CharBuffers(),"org.apache.commons.lang3.StringUtils.defaultIfBlank(T, T)","J1,J3,J4"
org.apache.commons.lang3.reflect.FieldUtilsTest.testGetFieldIllegalArgumentException1(),"org.apache.commons.lang3.reflect.FieldUtils.getField(java.lang.Class<?>, java.lang.String)","J1,J3,J4"
org.apache.commons.lang3.mutable.MutableShortTest.testToString(),org.apache.commons.lang3.mutable.MutableShort.toString(),"J1,J3,J4"
org.apache.commons.lang3.math.NumberUtilsTest.testMaxInt_nullArray(),org.apache.commons.lang3.math.NumberUtils.max(int[]),"J1,J3,J4"
org.apache.commons.lang3.reflect.TypeUtilsTest.testIsArrayGenericTypes(),org.apache.commons.lang3.reflect.TypeUtils.isArrayType(java.lang.reflect.Type),"J1,J3,J4"
org.apache.commons.lang3.text.translate.EntityArraysTest.testHTML40_EXTENDED_ESCAPE(),org.apache.commons.lang3.text.translate.EntityArrays.HTML40_EXTENDED_ESCAPE(),"J1,J3,J4"
