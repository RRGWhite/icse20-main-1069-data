test,tested-method
"org.apache.commons.io.input.TailerTest.testStopWithNoFileUsingExecutor()","org.apache.commons.io.input.Tailer.stop()"
"org.apache.commons.io.input.TailerTest.testStopWithNoFile()","org.apache.commons.io.input.Tailer.stop()"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_write_string_offset()","org.apache.commons.io.output.ProxyWriter.write(java.lang.String, int, int)"
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testAddRemoveListeners()","org.apache.commons.io.monitor.FileAlterationObserver.removeListener(org.apache.commons.io.monitor.FileAlterationListener)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPath()","org.apache.commons.io.FilenameUtils.getPath(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()","org.apache.commons.io.FilenameUtils.getPath(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator()","org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPath_with_nullbyte()","org.apache.commons.io.FilenameUtils.getPath(java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testToString_ByteArray()","org.apache.commons.io.IOUtils.toString(byte[])"
"org.apache.commons.io.CopyUtilsTest.copy_byteArrayToOutputStream()","org.apache.commons.io.CopyUtils.copy(byte[], java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding()","org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_Writer()","org.apache.commons.io.CopyUtils.copy(byte[], java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()","org.apache.commons.io.IOUtils.write(byte[], java.io.Writer, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullEncoding()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_URLConnection()","org.apache.commons.io.IOUtils.toByteArray(java.net.URLConnection)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullEncoding()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullEncoding()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testCopy_ByteArray_OutputStream()","org.apache.commons.io.CopyUtils.copy(byte[], java.io.OutputStream)"
"org.apache.commons.io.FileUtilsTestCase.testReadFileToByteArray()","org.apache.commons.io.FileUtils.readFileToByteArray(java.io.File)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream()","org.apache.commons.io.IOUtils.write(byte[], java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testToInputStream_CharSequence()","org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence)"
"org.apache.commons.io.IOUtilsTestCase.testToInputStream_CharSequence()","org.apache.commons.io.IOUtils.toInputStream(java.lang.CharSequence, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.CopyUtilsTest.testCopy_readerToOutputStream()","org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()","org.apache.commons.io.output.ByteArrayOutputStream.reset()"
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStreamWithReset()","org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullEncoding()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.output.ChunkedOutputStreamTest.write_four_chunks()","org.apache.commons.io.output.ChunkedOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.HexDumpTest.testDump()","org.apache.commons.io.HexDump.dump(byte[], long, java.io.OutputStream, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullEncoding()","org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.CopyUtilsTest.copy_readerToWriter()","org.apache.commons.io.CopyUtils.copy(java.io.Reader, java.io.Writer)"
"org.apache.commons.io.CopyUtilsTest.copy_readerToWriter()","org.apache.commons.io.output.ProxyOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()","org.apache.commons.io.IOUtils.write(byte[], java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.CopyUtilsTest.testCopy_inputStreamToOutputStream()","org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_URI()","org.apache.commons.io.IOUtils.toByteArray(java.net.URI)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream()","org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream)"
"org.apache.commons.io.output.ByteArrayOutputStreamTestCase.testToInputStream()","org.apache.commons.io.output.ByteArrayOutputStream.toInputStream()"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_Reader()","org.apache.commons.io.IOUtils.toByteArray(java.io.Reader)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_Reader()","org.apache.commons.io.IOUtils.toByteArray(java.io.Reader, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStream_InputStream()","org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testToInputStream_String()","org.apache.commons.io.IOUtils.toInputStream(java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testToInputStream_String()","org.apache.commons.io.IOUtils.toInputStream(java.lang.String, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()","org.apache.commons.io.IOUtils.write(byte[], java.io.Writer, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullEncoding()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.CopyUtilsTest.copy_stringToWriter()","org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.Writer)"
"org.apache.commons.io.CopyUtilsTest.copy_stringToWriter()","org.apache.commons.io.output.ProxyOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullSeparator()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullEncoding()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream)"
"org.apache.commons.io.CopyUtilsTest.copy_stringToOutputStream()","org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_URL()","org.apache.commons.io.IOUtils.toByteArray(java.net.URL)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()","org.apache.commons.io.IOUtils.write(char[], java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()","org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)"
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToSmall()","org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullSeparator()","org.apache.commons.io.output.StringBuilderWriter.write(java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream()","org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream)"
"org.apache.commons.io.CopyUtilsTest.copy_byteArrayToWriter()","org.apache.commons.io.CopyUtils.copy(byte[], java.io.Writer)"
"org.apache.commons.io.CopyUtilsTest.copy_byteArrayToWriter()","org.apache.commons.io.output.ProxyOutputStream.write(byte[], int, int)"
"org.apache.commons.io.CopyUtilsTest.copy_inputStreamToWriter()","org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer)"
"org.apache.commons.io.CopyUtilsTest.copy_inputStreamToWriter()","org.apache.commons.io.output.ProxyOutputStream.write(byte[], int, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullSeparator()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.output.ChunkedWriterTest.write_four_chunks()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.output.ChunkedWriterTest.write_four_chunks()","org.apache.commons.io.output.ChunkedWriter.write(char[], int, int)"
"org.apache.commons.io.output.ChunkedWriterTest.write_two_chunks_default_constructor()","org.apache.commons.io.output.ByteArrayOutputStream.write(byte[], int, int)"
"org.apache.commons.io.output.ChunkedWriterTest.write_two_chunks_default_constructor()","org.apache.commons.io.output.ChunkedWriter.write(char[], int, int)"
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()","org.apache.commons.io.output.DeferredFileOutputStream.writeTo(java.io.OutputStream)"
"org.apache.commons.io.output.DeferredFileOutputStreamTest.testWriteToLarge()","org.apache.commons.io.output.ThresholdingOutputStream.write(byte[])"
"org.apache.commons.io.IOUtilsTestCase.testToBufferedInputStreamWithBufferSize_InputStream()","org.apache.commons.io.IOUtils.toBufferedInputStream(java.io.InputStream, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testCopyFileToOutputStream()","org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.OutputStream)"
"org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionCollection()","org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.util.Collection<java.lang.String>)"
"org.apache.commons.io.LineIteratorTestCase.testNextOnly()","org.apache.commons.io.LineIterator.next()"
"org.apache.commons.io.LineIteratorTestCase.testCloseEarly()","org.apache.commons.io.LineIterator.close()"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()","org.apache.commons.io.EndianUtils.readSwappedFloat(byte[], int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedFloat()","org.apache.commons.io.EndianUtils.readSwappedFloat(java.io.InputStream)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testSkipBytes()","org.apache.commons.io.input.SwappedDataInputStream.skipBytes(int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()","org.apache.commons.io.EndianUtils.readSwappedInteger(byte[], int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedInteger()","org.apache.commons.io.EndianUtils.readSwappedInteger(java.io.InputStream)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadInt()","org.apache.commons.io.input.SwappedDataInputStream.readInt()"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFloat()","org.apache.commons.io.input.SwappedDataInputStream.readFloat()"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()","org.apache.commons.io.EndianUtils.readSwappedDouble(byte[], int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedDouble()","org.apache.commons.io.EndianUtils.readSwappedDouble(java.io.InputStream)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadDouble()","org.apache.commons.io.input.SwappedDataInputStream.readDouble()"
"org.apache.commons.io.FileUtilsTestCase.testForceMkdirParent()","org.apache.commons.io.FileUtils.forceMkdirParent(java.io.File)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse4()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyPath()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_EmptyResponse()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse1()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_InvalidTextResponse()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse3()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_ParseCommaFormatBytes()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_StripDrive()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseLinux()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Other()","org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String, int, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbLinux()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NormalResponse()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbSolaris()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponseKb()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyPath()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_InitError()","org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String, int, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_NoSuchDirectoryResponse()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_InvalidResponse2()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_LongResponse()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Windows()","org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String, int, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_NullPath()","org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String, int, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseFreeBSD()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceOS_String_Unix()","org.apache.commons.io.FileSystemUtils.freeSpaceOS(java.lang.String, int, boolean, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyMultiLineResponse()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_quoted()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceWindows_String_EmptyResponse()","org.apache.commons.io.FileSystemUtils.freeSpaceWindows(java.lang.String, long)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpaceUnix_String_NormalResponseKbFreeBSD()","org.apache.commons.io.FileSystemUtils.freeSpaceUnix(java.lang.String, boolean, boolean, long)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_write_char_array()","org.apache.commons.io.output.ProxyWriter.write(char[])"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_Size()","org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream, long)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_NegativeSize()","org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream, int)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeIllegal()","org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream, long)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeZero()","org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream, int)"
"org.apache.commons.io.IOUtilsTestCase.testCopy_String_Writer()","org.apache.commons.io.CopyUtils.copy(java.lang.String, java.io.Writer)"
"org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream()","org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, boolean)"
"org.apache.commons.io.IOUtilsTestCase.testToString_URI()","org.apache.commons.io.IOUtils.toString(java.net.URI)"
"org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithEncoding()","org.apache.commons.io.FileUtils.readFileToString(java.io.File, java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String, boolean)"
"org.apache.commons.io.IOUtilsTestCase.testToString_Reader()","org.apache.commons.io.IOUtils.toString(java.io.Reader)"
"org.apache.commons.io.FileUtilsTestCase.testWriteWithEncoding_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, java.lang.String, boolean)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullOut()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_nullSeparator()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.write(java.io.File, java.lang.CharSequence, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testWrite_WithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.write(java.io.File, java.lang.CharSequence, boolean)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullIn()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testToString_InputStream()","org.apache.commons.io.IOUtils.toString(java.io.InputStream)"
"org.apache.commons.io.IOUtilsTestCase.testToCharArray_InputStream_CharsetName()","org.apache.commons.io.IOUtils.toCharArray(java.io.InputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testToCharArray_Reader()","org.apache.commons.io.IOUtils.toCharArray(java.io.Reader)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullIn()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_5argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int, boolean)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_IO84()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4argsWithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, java.lang.String, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int, boolean)"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_String()","org.apache.commons.io.IOUtils.toByteArray(java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testToString_URL()","org.apache.commons.io.IOUtils.toString(java.net.URL)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3arg_nullSeparator()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullOut()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithAppendOptionTrue_ShouldNotDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], boolean)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_3argsWithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.util.Collection<?>, boolean)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullIn()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLinesEncoding_WithAppendOptionFalse_ShouldDeletePreviousFileLines()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, boolean)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToWriter_nullOut()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.Writer)"
"org.apache.commons.io.FileUtilsTestCase.testReadFileToStringWithDefaultEncoding()","org.apache.commons.io.FileUtils.readFileToString(java.io.File)"
"org.apache.commons.io.input.ReaderInputStreamTest.testReadZero()","org.apache.commons.io.input.ReaderInputStream.read(byte[], int, int)"
"org.apache.commons.io.input.ReaderInputStreamTest.testReadZeroEmptyString()","org.apache.commons.io.input.ReaderInputStream.read(byte[], int, int)"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.ourTestClassAcceptedSecondWildcard()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.String[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.ourTestClassAcceptedFirstWildcard()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.String[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.acceptWildcard()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.String[])"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterStringOffset()","org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String, long)"
"org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullChecksum()","org.apache.commons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullData()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryFiltered()","org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File, java.io.FileFilter)"
"org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()","org.apache.commons.io.FileUtils.contentEquals(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testContentEqualsIgnoreEOL()","org.apache.commons.io.FileUtils.contentEqualsIgnoreEOL(java.io.File, java.io.File, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullStream()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_nullStream()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullData()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterString()","org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToDirectory_NonExistingDest()","org.apache.commons.io.FileUtils.copyDirectoryToDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToNonExistingDest()","org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToOutputStream_Encoding_nullStream()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence2()","org.apache.commons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testChecksumCRC32()","org.apache.commons.io.FileUtils.checksumCRC32(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testChecksum()","org.apache.commons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToGrandChild()","org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytes()","org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[])"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullStream()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToChild()","org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryPreserveDates()","org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryToExistingDest()","org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testChecksumDouble()","org.apache.commons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)"
"org.apache.commons.io.FileUtilsTestCase.testWriteCharSequence1()","org.apache.commons.io.FileUtils.write(java.io.File, java.lang.CharSequence, java.lang.String)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeSVNAware()","org.apache.commons.io.filefilter.FileFilterUtils.makeSVNAware(org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeCVSAware()","org.apache.commons.io.filefilter.FileFilterUtils.makeCVSAware(org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLong()","org.apache.commons.io.input.SwappedDataInputStream.readLong()"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkipInvalid()","org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long)"
"org.apache.commons.io.IOUtilsTestCase.testSkip_FileReader()","org.apache.commons.io.IOUtils.skip(java.io.Reader, long)"
"org.apache.commons.io.IOUtilsTestCase.testSkipFully_Reader()","org.apache.commons.io.IOUtils.skipFully(java.io.Reader, long)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharSkip()","org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long)"
"org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeLong()","org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)"
"org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()","org.apache.commons.io.FileUtils.byteCountToDisplaySize(java.math.BigInteger)"
"org.apache.commons.io.FileUtilsTestCase.testByteCountToDisplaySizeBigInteger()","org.apache.commons.io.FileUtils.byteCountToDisplaySize(long)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_write_offset_char_array()","org.apache.commons.io.output.ProxyWriter.write(char[], int, int)"
"org.apache.commons.io.FileUtilsListFilesTestCase.testListFiles()","org.apache.commons.io.FileUtils.listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_or()","org.apache.commons.io.filefilter.FileFilterUtils.or(org.apache.commons.io.filefilter.IOFileFilter[])"
"org.apache.commons.io.FileUtilsTestCase.testListFiles()","org.apache.commons.io.FileUtils.listFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.FileUtilsTestCase.testIterateFiles()","org.apache.commons.io.FileUtils.iterateFiles(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFileFilterUtils_and()","org.apache.commons.io.filefilter.FileFilterUtils.and(org.apache.commons.io.filefilter.IOFileFilter[])"
"org.apache.commons.io.FileUtilsListFilesTestCase.testListFilesByExtension()","org.apache.commons.io.FileUtils.listFiles(java.io.File, java.lang.String[], boolean)"
"org.apache.commons.io.FileUtilsTestCase.testIterateFilesAndDirs()","org.apache.commons.io.FileUtils.iterateFilesAndDirs(java.io.File, org.apache.commons.io.filefilter.IOFileFilter, org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.FileUtilsListFilesTestCase.testIterateFilesByExtension()","org.apache.commons.io.FileUtils.iterateFiles(java.io.File, java.lang.String[], boolean)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadBoolean()","org.apache.commons.io.input.SwappedDataInputStream.readBoolean()"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadByte()","org.apache.commons.io.input.SwappedDataInputStream.readByte()"
"org.apache.commons.io.monitor.FileAlterationObserverTestCase.testToString()","org.apache.commons.io.monitor.FileAlterationObserver.toString()"
"org.apache.commons.io.monitor.FileAlterationMonitorTestCase.testAddRemoveObservers()","org.apache.commons.io.monitor.FileAlterationMonitor.removeObserver(org.apache.commons.io.monitor.FileAlterationObserver)"
"org.apache.commons.io.output.ProxyWriterTest.writeCharArray()","org.apache.commons.io.output.ProxyWriter.write(char[])"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullStream()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_nullData()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream)"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.acceptPattern()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.util.regex.Pattern)"
"org.apache.commons.io.FileUtilsTestCase.testToFile4()","org.apache.commons.io.FileUtils.toFile(java.net.URL)"
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrlNullSafe()","org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrlEncodingUtf8()","org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testToFile1()","org.apache.commons.io.FileUtils.toFile(java.net.URL)"
"org.apache.commons.io.FileUtilsTestCase.testToFiles1()","org.apache.commons.io.FileUtils.toFiles(java.net.URL[])"
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrl()","org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testDecodeUrlLenient()","org.apache.commons.io.FileUtils.decodeUrl(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testToFiles4()","org.apache.commons.io.FileUtils.toFiles(java.net.URL[])"
"org.apache.commons.io.FileUtilsTestCase.testToFile2()","org.apache.commons.io.FileUtils.toFile(java.net.URL)"
"org.apache.commons.io.FileUtilsTestCase.testToFile5()","org.apache.commons.io.FileUtils.toFile(java.net.URL)"
"org.apache.commons.io.FileUtilsTestCase.testToFileUtf8()","org.apache.commons.io.FileUtils.toFile(java.net.URL)"
"org.apache.commons.io.FileUtilsTestCase.testToFiles2()","org.apache.commons.io.FileUtils.toFiles(java.net.URL[])"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()","org.apache.commons.io.EndianUtils.writeSwappedDouble(byte[], int, double)"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedDouble()","org.apache.commons.io.EndianUtils.writeSwappedDouble(java.io.OutputStream, double)"
"org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream()","org.apache.commons.io.IOUtils.readLines(java.io.InputStream)"
"org.apache.commons.io.input.CharSequenceReaderTest.testMark()","org.apache.commons.io.input.CharSequenceReader.mark(int)"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.rejectWildcard()","org.apache.commons.io.serialization.ValidatingObjectInputStream.reject(java.lang.String[])"
"org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_case()","org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String, int, java.lang.String)"
"org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_functionality()","org.apache.commons.io.IOCase.checkIndexOf(java.lang.String, int, java.lang.String)"
"org.apache.commons.io.IOCaseTestCase.test_checkRegionMatches_functionality()","org.apache.commons.io.IOCase.checkRegionMatches(java.lang.String, int, java.lang.String)"
"org.apache.commons.io.IOCaseTestCase.test_checkIndexOf_case()","org.apache.commons.io.IOCase.checkIndexOf(java.lang.String, int, java.lang.String)"
"org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArrayPortion()","org.apache.commons.io.input.CharSequenceReader.read(char[], int, int)"
"org.apache.commons.io.input.CharSequenceReaderTest.testReadCharArray()","org.apache.commons.io.input.CharSequenceReader.read(char[], int, int)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()","org.apache.commons.io.IOUtils.buffer(java.io.InputStream)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()","org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()","org.apache.commons.io.IOUtils.buffer(java.io.Reader)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedNull()","org.apache.commons.io.IOUtils.buffer(java.io.Writer)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedReader()","org.apache.commons.io.IOUtils.buffer(java.io.Reader)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedReaderWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.Reader)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedReaderWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.Reader, int)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeDirectoryOnly()","org.apache.commons.io.filefilter.FileFilterUtils.makeDirectoryOnly(org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMakeFileOnly()","org.apache.commons.io.filefilter.FileFilterUtils.makeFileOnly(org.apache.commons.io.filefilter.IOFileFilter)"
"org.apache.commons.io.input.AutoCloseInputStreamTest.testClose()","org.apache.commons.io.input.AutoCloseInputStream.close()"
"org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBuffer()","org.apache.commons.io.input.ProxyInputStream.read(byte[])"
"org.apache.commons.io.input.AutoCloseInputStreamTest.testReadBufferOffsetLength()","org.apache.commons.io.input.ProxyInputStream.read(byte[], int, int)"
"org.apache.commons.io.input.AutoCloseInputStreamTest.testRead()","org.apache.commons.io.input.ProxyInputStream.read()"
"org.apache.commons.io.input.CloseShieldInputStreamTest.testClose()","org.apache.commons.io.input.CloseShieldInputStream.close()"
"org.apache.commons.io.input.ClosedInputStreamTest.testRead()","org.apache.commons.io.input.ClosedInputStream.read()"
"org.apache.commons.io.input.CountingInputStreamTest.testSkipping()","org.apache.commons.io.input.CountingInputStream.skip(long)"
"org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()","org.apache.commons.io.comparator.ReverseComparator.compare(java.io.File, java.io.File)"
"org.apache.commons.io.comparator.SizeFileComparatorTest.testCompareDirectorySizes()","org.apache.commons.io.comparator.SizeFileComparator.compare(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectory()","org.apache.commons.io.FileUtils.sizeOfDirectory(java.io.File)"
"org.apache.commons.io.input.BOMInputStreamTest.skipReturnValueWithoutBom()","org.apache.commons.io.input.BOMInputStream.skip(long)"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()","org.apache.commons.io.input.BOMInputStream.mark(int)"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithBOM()","org.apache.commons.io.input.BOMInputStream.reset()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()","org.apache.commons.io.input.BOMInputStream.mark(int)"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithBOM()","org.apache.commons.io.input.BOMInputStream.reset()"
"org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithBOM()","org.apache.commons.io.input.ProxyInputStream.available()"
"org.apache.commons.io.input.BOMInputStreamTest.testAvailableWithoutBOM()","org.apache.commons.io.input.ProxyInputStream.available()"
"org.apache.commons.io.input.BOMInputStreamTest.testSkipWithoutBOM()","org.apache.commons.io.input.BOMInputStream.skip(long)"
"org.apache.commons.io.input.BOMInputStreamTest.testReadEmpty()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.mark(int)"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetBeforeReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.reset()"
"org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMBufferedRead()","org.apache.commons.io.input.BOMInputStream.read(byte[])"
"org.apache.commons.io.input.BOMInputStreamTest.testSkipWithBOM()","org.apache.commons.io.input.BOMInputStream.skip(long)"
"org.apache.commons.io.input.BOMInputStreamTest.testClose()","org.apache.commons.io.input.ProxyInputStream.close()"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.mark(int)"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testMarkResetAfterReadWithoutBOM()","org.apache.commons.io.input.BOMInputStream.reset()"
"org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()","org.apache.commons.io.input.BOMInputStream.getBOM()"
"org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenRead()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadSmall()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testLeadingNonBOMSingleRead()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.skipReturnValueWithBom()","org.apache.commons.io.input.BOMInputStream.skip(long)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_write_int()","org.apache.commons.io.output.ProxyWriter.write(int)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_append_char()","org.apache.commons.io.output.ProxyWriter.append(char)"
"org.apache.commons.io.FileSystemUtilsTestCase.testGetFreeSpace_String()","org.apache.commons.io.FileSystemUtils.freeSpace(java.lang.String)"
"org.apache.commons.io.input.NullInputStreamTest.testReadByteArray()","org.apache.commons.io.input.NullInputStream.read(byte[])"
"org.apache.commons.io.input.NullInputStreamTest.testReadByteArray()","org.apache.commons.io.input.NullInputStream.read(byte[], int, int)"
"org.apache.commons.io.input.NullInputStreamTest.testMarkNotSupported()","org.apache.commons.io.input.NullInputStream.mark(int)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_IO84()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)"
"org.apache.commons.io.input.NullInputStreamTest.testRead()","org.apache.commons.io.input.NullInputStream.read()"
"org.apache.commons.io.input.NullInputStreamTest.testSkip()","org.apache.commons.io.input.NullInputStream.skip(long)"
"org.apache.commons.io.input.NullInputStreamTest.testMarkAndReset()","org.apache.commons.io.input.NullInputStream.mark(int)"
"org.apache.commons.io.input.NullInputStreamTest.testMarkAndReset()","org.apache.commons.io.input.NullInputStream.reset()"
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteForce()","org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)"
"org.apache.commons.io.input.BrokenInputStreamTest.testRead()","org.apache.commons.io.input.BrokenInputStream.read()"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.reject()","org.apache.commons.io.serialization.ValidatingObjectInputStream.reject(java.lang.Class<?>[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.rejectCustomMatcher()","org.apache.commons.io.serialization.ValidatingObjectInputStream.reject(org.apache.commons.io.serialization.ClassNameMatcher)"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.rejectOnly()","org.apache.commons.io.serialization.ValidatingObjectInputStream.reject(java.lang.Class<?>[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.ourTestClassNotAccepted()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.Class<?>[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.acceptCustomMatcher()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(org.apache.commons.io.serialization.ClassNameMatcher)"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.ourTestClassAcceptedFirst()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.Class<?>[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.rejectPrecedence()","org.apache.commons.io.serialization.ValidatingObjectInputStream.reject(java.lang.Class<?>[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.ourTestClassOnlyAccepted()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.Class<?>[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.ourTestClassAcceptedSecond()","org.apache.commons.io.serialization.ValidatingObjectInputStream.accept(java.lang.Class<?>[])"
"org.apache.commons.io.serialization.ValidatingObjectInputStreamTest.rejectPattern()","org.apache.commons.io.serialization.ValidatingObjectInputStream.reject(java.util.regex.Pattern)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList()","org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet()","org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterListNullParameters()","org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSetNullParameters()","org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray_fromList()","org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter, java.lang.Iterable<java.io.File>)"
"org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparatorUnixWin()","org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String, boolean)"
"org.apache.commons.io.input.BoundedInputStreamTest.testReadSingle()","org.apache.commons.io.input.BoundedInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Be()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMInclude()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Be()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf32Le()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf16Le()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithBOMUtf8()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()","org.apache.commons.io.input.BOMInputStream.getBOM()"
"org.apache.commons.io.input.BOMInputStreamTest.testGetBOMFirstThenReadInclude()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.input.BOMInputStreamTest.testReadWithMultipleBOM()","org.apache.commons.io.input.BOMInputStream.read()"
"org.apache.commons.io.ByteOrderMarkTestCase.testEquals()","org.apache.commons.io.ByteOrderMark.equals(java.lang.Object)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadFully()","org.apache.commons.io.input.SwappedDataInputStream.readFully(byte[])"
"org.apache.commons.io.EndianUtilsTest.testSwapShort()","org.apache.commons.io.EndianUtils.swapShort(short)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetFullPath()","org.apache.commons.io.FilenameUtils.getFullPath(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalized()","org.apache.commons.io.FilenameUtils.equalsNormalized(java.lang.String, java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testNormalizeUnixWin()","org.apache.commons.io.FilenameUtils.normalize(java.lang.String, boolean)"
"org.apache.commons.io.FilenameUtilsTestCase.testEqualsNormalizedOnSystem()","org.apache.commons.io.FilenameUtils.equalsNormalizedOnSystem(java.lang.String, java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator()","org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetFullPathNoEndSeparator_IO_248()","org.apache.commons.io.FilenameUtils.getFullPathNoEndSeparator(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testEquals_fullControl()","org.apache.commons.io.FilenameUtils.equals(java.lang.String, java.lang.String, boolean, org.apache.commons.io.IOCase)"
"org.apache.commons.io.FilenameUtilsTestCase.testConcat()","org.apache.commons.io.FilenameUtils.concat(java.lang.String, java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPrefixLength()","org.apache.commons.io.FilenameUtils.getPrefixLength(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testNormalizeNoEndSeparator()","org.apache.commons.io.FilenameUtils.normalizeNoEndSeparator(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix()","org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testNormalize()","org.apache.commons.io.FilenameUtils.normalize(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()","org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()","org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.util.Date)"
"org.apache.commons.io.FileUtilsTestCase.testIsFileNewerOlder()","org.apache.commons.io.FileUtils.isFileNewer(java.io.File, long)"
"org.apache.commons.io.FileUtilsTestCase.testContentEquals()","org.apache.commons.io.FileUtils.contentEquals(java.io.File, java.io.File)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullStream()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToWriter_Encoding_nullData()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.Writer)"
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_exists()","org.apache.commons.io.FileUtils.openOutputStream(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testCopyURLToFile()","org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testCopyURLToFileWithTimeout()","org.apache.commons.io.FileUtils.copyURLToFile(java.net.URL, java.io.File, int, int)"
"org.apache.commons.io.FileUtilsTestCase.testTouch()","org.apache.commons.io.FileUtils.touch(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_existsButIsDirectory()","org.apache.commons.io.FileUtils.openOutputStream(java.io.File)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testMagicNumberFileFilterBytesOffset()","org.apache.commons.io.filefilter.FileFilterUtils.magicNumberFileFilter(byte[], long)"
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExistsCannotCreate()","org.apache.commons.io.FileUtils.openOutputStream(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.test_openOutputStream_notExists()","org.apache.commons.io.FileUtils.openOutputStream(java.io.File)"
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished2()","org.apache.commons.io.FileCleaningTracker.exitWhenFinished()"
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinishedFirst()","org.apache.commons.io.FileCleaningTracker.exitWhenFinished()"
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished1()","org.apache.commons.io.FileCleaningTracker.exitWhenFinished()"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_Encoding_nullOut()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.output.AppendableOutputStreamTest.testWriteInt()","org.apache.commons.io.output.AppendableOutputStream.write(int)"
"org.apache.commons.io.IOUtilsTestCase.testSkip_ReadableByteChannel()","org.apache.commons.io.IOUtils.skip(java.nio.channels.ReadableByteChannel, long)"
"org.apache.commons.io.IOUtilsTestCase.testSkipFully_ReadableByteChannel()","org.apache.commons.io.IOUtils.skipFully(java.nio.channels.ReadableByteChannel, long)"
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_CopyDelete()","org.apache.commons.io.FileUtils.moveDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testCopyDirectoryErrors()","org.apache.commons.io.FileUtils.copyDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.output.WriterOutputStreamTest.testFlush()","org.apache.commons.io.output.WriterOutputStream.flush()"
"org.apache.commons.io.output.WriterOutputStreamTest.testWriteImmediately()","org.apache.commons.io.output.WriterOutputStream.write(byte[])"
"org.apache.commons.io.input.NullReaderTest.testRead()","org.apache.commons.io.input.NullReader.read()"
"org.apache.commons.io.input.NullReaderTest.testReadCharArray()","org.apache.commons.io.input.NullReader.read(char[])"
"org.apache.commons.io.input.NullReaderTest.testReadCharArray()","org.apache.commons.io.input.NullReader.read(char[], int, int)"
"org.apache.commons.io.input.NullReaderTest.testSkip()","org.apache.commons.io.input.NullReader.skip(long)"
"org.apache.commons.io.FileUtilsTestCase.testCopyFile2WithoutFileDatePreservation()","org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testCopyFile1()","org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete()","org.apache.commons.io.FileUtils.moveFile(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testCopyFile2()","org.apache.commons.io.FileUtils.copyFile(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_CopyDelete_Failed()","org.apache.commons.io.FileUtils.moveFile(java.io.File, java.io.File)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullData()","org.apache.commons.io.IOUtils.write(byte[], java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullData()","org.apache.commons.io.IOUtils.write(char[], java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullData()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.Writer)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_write_string()","org.apache.commons.io.output.ProxyWriter.write(java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_nullData()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullData()","org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_close()","org.apache.commons.io.output.ProxyWriter.close()"
"org.apache.commons.io.output.ThresholdingOutputStreamTest.testSetByteCount()","org.apache.commons.io.output.ThresholdingOutputStream.setByteCount(long)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullData()","org.apache.commons.io.IOUtils.write(byte[], java.io.Writer, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullData()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charSequenceToOutputStream_Encoding_nullData()","org.apache.commons.io.IOUtils.write(java.lang.CharSequence, java.io.OutputStream)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_flush()","org.apache.commons.io.output.ProxyWriter.flush()"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_nullIn()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_append_charSequence()","org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullData()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullData()","org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullData()","org.apache.commons.io.IOUtils.write(byte[], java.io.Writer)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToWriter_Encoding_nullIn()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)"
"org.apache.commons.io.output.ProxyWriterTest.exceptions_in_append_charSequence_offset()","org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence, int, int)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullIn()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)"
"org.apache.commons.io.FileUtilsTestCase.testSizeOfAsBigInteger()","org.apache.commons.io.FileUtils.sizeOfAsBigInteger(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testSizeOfDirectoryAsBigInteger()","org.apache.commons.io.FileUtils.sizeOfDirectoryAsBigInteger(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testCompareSizeOf()","org.apache.commons.io.FileUtils.sizeOf(java.io.File)"
"org.apache.commons.io.FilenameUtilsTestCase.testEquals()","org.apache.commons.io.FilenameUtils.equals(java.lang.String, java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testEqualsOnSystem()","org.apache.commons.io.FilenameUtils.equalsOnSystem(java.lang.String, java.lang.String)"
"org.apache.commons.io.output.ProxyOutputStreamTest.testWrite()","org.apache.commons.io.output.ProxyOutputStream.write(int)"
"org.apache.commons.io.output.ProxyOutputStreamTest.testWriteNullBaSucceeds()","null.write(byte[])"
"org.apache.commons.io.output.ProxyOutputStreamTest.testWriteNullBaSucceeds()","org.apache.commons.io.output.ProxyOutputStream.write(byte[])"
"org.apache.commons.io.FileUtilsTestCase.testGetTempDirectory()","org.apache.commons.io.FileUtils.getTempDirectory()"
"org.apache.commons.io.FileUtilsTestCase.testGetTempDirectoryPath()","org.apache.commons.io.FileUtils.getTempDirectoryPath()"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToWriter_Encoding_nullStream()","org.apache.commons.io.IOUtils.write(char[], java.io.Writer)"
"org.apache.commons.io.output.BrokenOutputStreamTest.testClose()","org.apache.commons.io.output.BrokenOutputStream.close()"
"org.apache.commons.io.IOUtilsTestCase.testContentEqualsIgnoreEOL()","org.apache.commons.io.IOUtils.contentEqualsIgnoreEOL(java.io.Reader, java.io.Reader)"
"org.apache.commons.io.FileUtilsWaitForTestCase.testWaitFor()","org.apache.commons.io.FileUtils.waitFor(java.io.File, int)"
"org.apache.commons.io.FileUtilsWaitForTestCase.testWaitForInterrupted()","org.apache.commons.io.FileUtils.waitFor(java.io.File, int)"
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteQuietlyNormal()","org.apache.commons.io.FileDeleteStrategy.deleteQuietly(java.io.File)"
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNormal()","org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testReadLines()","org.apache.commons.io.FileUtils.readLines(java.io.File, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testReadLines_InputStream_String()","org.apache.commons.io.IOUtils.readLines(java.io.InputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader_Offset()","org.apache.commons.io.IOUtils.readFully(java.io.Reader, char[], int, int)"
"org.apache.commons.io.IOUtilsTestCase.testReadFully_Reader()","org.apache.commons.io.IOUtils.readFully(java.io.Reader, char[], int, int)"
"org.apache.commons.io.ByteOrderMarkTestCase.get()","org.apache.commons.io.ByteOrderMark.get(int)"
"org.apache.commons.io.output.ProxyWriterTest.appendCharSequence()","org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence)"
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArrayPortion()","org.apache.commons.io.output.StringBuilderWriter.write(char[], int, int)"
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteChar()","org.apache.commons.io.output.StringBuilderWriter.write(char[], int, int)"
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendChar()","org.apache.commons.io.output.StringBuilderWriter.append(char)"
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequence()","org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)"
"org.apache.commons.io.output.ProxyWriterTest.writeCharArrayPartial()","org.apache.commons.io.output.ProxyWriter.write(char[], int, int)"
"org.apache.commons.io.output.StringBuilderWriterTest.testWriteCharArray()","org.apache.commons.io.output.StringBuilderWriter.write(char[], int, int)"
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructNull()","org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)"
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendCharSequencePortion()","org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence, int, int)"
"org.apache.commons.io.output.ProxyWriterTest.appendCharSequence_with_offset()","org.apache.commons.io.output.ProxyWriter.append(java.lang.CharSequence, int, int)"
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructCapacity()","org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)"
"org.apache.commons.io.output.StringBuilderWriterTest.testClose()","org.apache.commons.io.output.StringBuilderWriter.close()"
"org.apache.commons.io.output.ProxyWriterTest.appendChar()","org.apache.commons.io.output.ProxyWriter.append(char)"
"org.apache.commons.io.output.ProxyWriterTest.writeInt()","org.apache.commons.io.output.ProxyWriter.write(int)"
"org.apache.commons.io.output.StringBuilderWriterTest.testAppendConstructStringBuilder()","org.apache.commons.io.output.StringBuilderWriter.append(java.lang.CharSequence)"
"org.apache.commons.io.FileUtilsTestCase.testWriteLines_4arg_Writer_nullData()","org.apache.commons.io.FileUtils.writeLines(java.io.File, java.lang.String, java.util.Collection<?>, java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_OutputStream_Encoding_nullStream()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.OutputStream, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_Skip()","org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)"
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyDir()","org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory_Errors()","org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectoryToDirectory()","org.apache.commons.io.FileUtils.moveDirectoryToDirectory(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_SkipInvalid()","org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)"
"org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory()","org.apache.commons.io.FileUtils.moveToDirectory(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_NoSkip()","org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_ExtraLength()","org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)"
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyFile()","org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_Errors()","org.apache.commons.io.FileUtils.moveFile(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Rename()","org.apache.commons.io.FileUtils.moveDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile_WithOffsetAndLength()","org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[], int, int)"
"org.apache.commons.io.FileUtilsTestCase.testWriteByteArrayToFile()","org.apache.commons.io.FileUtils.writeByteArrayToFile(java.io.File, byte[])"
"org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory_Errors()","org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_FullLength()","org.apache.commons.io.IOUtils.copyLarge(java.io.InputStream, java.io.OutputStream, long, long)"
"org.apache.commons.io.FileUtilsTestCase.testMoveDirectory_Errors()","org.apache.commons.io.FileUtils.moveDirectory(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testDeleteDirectoryWithNonDirectory()","org.apache.commons.io.FileUtils.deleteDirectory(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteDir()","org.apache.commons.io.FileUtils.forceDelete(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testSizeOf()","org.apache.commons.io.FileUtils.sizeOf(java.io.File)"
"org.apache.commons.io.Java7SupportTest.testIsSymLink()","org.apache.commons.io.Java7Support.isSymLink(java.io.File)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArray()","org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])"
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsFile()","org.apache.commons.io.FileUtils.directoryContains(java.io.File, java.io.File)"
"org.apache.commons.io.IOCaseTestCase.test_checkEquals_functionality()","org.apache.commons.io.IOCase.checkEquals(java.lang.String, java.lang.String)"
"org.apache.commons.io.FileUtilsDirectoryContainsTestCase.testDirectoryContainsDirectory()","org.apache.commons.io.FileUtils.directoryContains(java.io.File, java.io.File)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterSet_fromArray()","org.apache.commons.io.filefilter.FileFilterUtils.filterSet(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])"
"org.apache.commons.io.IOCaseTestCase.test_checkEquals_case()","org.apache.commons.io.IOCase.checkEquals(java.lang.String, java.lang.String)"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterList_fromArray()","org.apache.commons.io.filefilter.FileFilterUtils.filterList(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])"
"org.apache.commons.io.input.BrokenInputStreamTest.testReset()","org.apache.commons.io.input.BrokenInputStream.reset()"
"org.apache.commons.io.IOCaseTestCase.test_toString()","org.apache.commons.io.IOCase.toString()"
"org.apache.commons.io.input.TeeInputStreamTest.testMarkReset()","org.apache.commons.io.input.ProxyInputStream.mark(int)"
"org.apache.commons.io.input.TeeInputStreamTest.testMarkReset()","org.apache.commons.io.input.ProxyInputStream.reset()"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharFullLength()","org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharNoSkip()","org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long)"
"org.apache.commons.io.IOUtilsTestCase.testCopyLarge_CharExtraLength()","org.apache.commons.io.IOUtils.copyLarge(java.io.Reader, java.io.Writer, long, long)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStreamWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.InputStream)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStreamWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.InputStream, int)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedInputStream()","org.apache.commons.io.IOUtils.buffer(java.io.InputStream)"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()","org.apache.commons.io.EndianUtils.writeSwappedShort(byte[], int, short)"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedShort()","org.apache.commons.io.EndianUtils.writeSwappedShort(java.io.OutputStream, short)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_inputStreamToOutputStream_nullOut()","org.apache.commons.io.IOUtils.copy(java.io.InputStream, java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorIOException()","org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)"
"org.apache.commons.io.output.TeeOutputStreamTest.testCloseMainIOException()","org.apache.commons.io.output.TeeOutputStream.close()"
"org.apache.commons.io.output.CloseShieldOutputStreamTest.testClose()","org.apache.commons.io.output.CloseShieldOutputStream.close()"
"org.apache.commons.io.CharsetsTestCase.testRequiredCharsets()","org.apache.commons.io.Charsets.requiredCharsets()"
"org.apache.commons.io.FilenameUtilsTestCase.testNormalize_with_nullbytes()","org.apache.commons.io.FilenameUtils.normalize(java.lang.String)"
"org.apache.commons.io.FileDeleteStrategyTestCase.testDeleteNull()","org.apache.commons.io.FileDeleteStrategy.delete(java.io.File)"
"org.apache.commons.io.input.CharSequenceInputStreamTest.testReadZero_EmptyString()","org.apache.commons.io.input.CharSequenceInputStream.read(byte[], int, int)"
"org.apache.commons.io.input.CharSequenceInputStreamTest.testMarkSupported()","org.apache.commons.io.input.CharSequenceInputStream.markSupported()"
"org.apache.commons.io.FileUtilsTestCase.test_openInputStream_exists()","org.apache.commons.io.FileUtils.openInputStream(java.io.File)"
"org.apache.commons.io.IOUtilsTestCase.testReadLines_Reader()","org.apache.commons.io.IOUtils.readLines(java.io.Reader)"
"org.apache.commons.io.EndianUtilsTest.testSwapDouble()","org.apache.commons.io.EndianUtils.swapDouble(double)"
"org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()","org.apache.commons.io.input.BoundedReader.mark(int)"
"org.apache.commons.io.input.BoundedReaderTest.markResetMarkMore()","org.apache.commons.io.input.BoundedReader.reset()"
"org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()","org.apache.commons.io.input.BoundedReader.mark(int)"
"org.apache.commons.io.input.BoundedReaderTest.markResetFromOffset1()","org.apache.commons.io.input.BoundedReader.reset()"
"org.apache.commons.io.input.BoundedReaderTest.markReset()","org.apache.commons.io.input.BoundedReader.mark(int)"
"org.apache.commons.io.input.BoundedReaderTest.markReset()","org.apache.commons.io.input.BoundedReader.reset()"
"org.apache.commons.io.filefilter.FileFilterTestCase.testFilterArrayNullParameters()","org.apache.commons.io.filefilter.FileFilterUtils.filter(org.apache.commons.io.filefilter.IOFileFilter, java.io.File[])"
"org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_functionality()","org.apache.commons.io.IOCase.checkStartsWith(java.lang.String, java.lang.String)"
"org.apache.commons.io.IOCaseTestCase.test_checkStartsWith_case()","org.apache.commons.io.IOCase.checkStartsWith(java.lang.String, java.lang.String)"
"org.apache.commons.io.input.TeeInputStreamTest.testReadToArrayWithOffset()","org.apache.commons.io.input.TeeInputStream.read(byte[], int, int)"
"org.apache.commons.io.FileUtilsTestCase.testMoveFile_Rename()","org.apache.commons.io.FileUtils.moveFile(java.io.File, java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testMoveFileToDirectory()","org.apache.commons.io.FileUtils.moveFileToDirectory(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.IOUtilsCopyTestCase.testCopy_readerToOutputStream_nullOut()","org.apache.commons.io.IOUtils.copy(java.io.Reader, java.io.OutputStream)"
"org.apache.commons.io.IOCaseTestCase.test_forName()","org.apache.commons.io.IOCase.forName(java.lang.String)"
"org.apache.commons.io.input.BrokenInputStreamTest.testSkip()","org.apache.commons.io.input.BrokenInputStream.skip(long)"
"org.apache.commons.io.input.ClassLoaderObjectInputStreamTest.testResolveProxyClass()","org.apache.commons.io.input.ClassLoaderObjectInputStream.resolveProxyClass(java.lang.String[])"
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()","org.apache.commons.io.FileCleaningTracker.exitWhenFinished()"
"org.apache.commons.io.FileCleaningTrackerTestCase.testFileCleanerExitWhenFinished_NoTrackAfter()","org.apache.commons.io.FileCleaningTracker.track(java.lang.String, java.lang.Object)"
"org.apache.commons.io.output.TeeOutputStreamTest.testCloseBranchIOException()","org.apache.commons.io.output.TeeOutputStream.close()"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_nullStream()","org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_charArrayToOutputStream_Encoding_nullStream()","org.apache.commons.io.IOUtils.write(char[], java.io.OutputStream)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_nullWriter()","org.apache.commons.io.IOUtils.write(byte[], java.io.Writer)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToWriter_Encoding_nullWriter()","org.apache.commons.io.IOUtils.write(byte[], java.io.Writer, java.lang.String)"
"org.apache.commons.io.CharsetsTestCase.testToCharset()","org.apache.commons.io.Charsets.toCharset(java.lang.String)"
"org.apache.commons.io.CharsetsTestCase.testToCharset()","org.apache.commons.io.Charsets.toCharset(java.nio.charset.Charset)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_byteArrayToOutputStream_nullStream()","org.apache.commons.io.IOUtils.write(byte[], java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStreamWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStreamWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.OutputStream, int)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWrite_stringToWriter_Encoding_nullStream()","org.apache.commons.io.IOUtils.write(java.lang.String, java.io.Writer)"
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()","org.apache.commons.io.comparator.ReverseComparator.toString()"
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testToString()","org.apache.commons.io.comparator.SizeFileComparator.toString()"
"org.apache.commons.io.CopyUtilsTest.testCopy_byteArrayToWriterWithEncoding()","org.apache.commons.io.CopyUtils.copy(byte[], java.io.Writer, java.lang.String)"
"org.apache.commons.io.CopyUtilsTest.copy_inputStreamToWriterWithEncoding()","org.apache.commons.io.CopyUtils.copy(java.io.InputStream, java.io.Writer, java.lang.String)"
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFileReference()","org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.io.File)"
"org.apache.commons.io.FileDeleteStrategyTestCase.testToString()","org.apache.commons.io.FileDeleteStrategy.toString()"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()","org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(byte[], int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedShort()","org.apache.commons.io.EndianUtils.readSwappedUnsignedShort(java.io.InputStream)"
"org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_Offset()","org.apache.commons.io.IOUtils.readFully(java.io.InputStream, byte[], int, int)"
"org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream__ReturnByteArray()","org.apache.commons.io.IOUtils.readFully(java.io.InputStream, int)"
"org.apache.commons.io.IOUtilsTestCase.testSkipFully_InputStream()","org.apache.commons.io.IOUtils.skipFully(java.io.InputStream, long)"
"org.apache.commons.io.FileUtilsTestCase.test_openInputStream_notExists()","org.apache.commons.io.FileUtils.openInputStream(java.io.File)"
"org.apache.commons.io.IOUtilsTestCase.testReadFully_InputStream_ByteArray()","org.apache.commons.io.IOUtils.readFully(java.io.InputStream, byte[], int, int)"
"org.apache.commons.io.FileUtilsTestCase.test_openInputStream_existsButIsDirectory()","org.apache.commons.io.FileUtils.openInputStream(java.io.File)"
"org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToUnix()","org.apache.commons.io.FilenameUtils.separatorsToUnix(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testToURLs3a()","org.apache.commons.io.FileUtils.toURLs(java.io.File[])"
"org.apache.commons.io.FileUtilsTestCase.testToURLs1()","org.apache.commons.io.FileUtils.toURLs(java.io.File[])"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()","org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(byte[], int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedUnsignedInteger()","org.apache.commons.io.EndianUtils.readSwappedUnsignedInteger(java.io.InputStream)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()","org.apache.commons.io.EndianUtils.readSwappedLong(byte[], int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedLong()","org.apache.commons.io.EndianUtils.readSwappedLong(java.io.InputStream)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadChar()","org.apache.commons.io.input.SwappedDataInputStream.readChar()"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()","org.apache.commons.io.EndianUtils.readSwappedShort(byte[], int)"
"org.apache.commons.io.EndianUtilsTest.testReadSwappedShort()","org.apache.commons.io.EndianUtils.readSwappedShort(java.io.InputStream)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedShort()","org.apache.commons.io.input.SwappedDataInputStream.readUnsignedShort()"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadShort()","org.apache.commons.io.input.SwappedDataInputStream.readShort()"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()","org.apache.commons.io.EndianUtils.writeSwappedFloat(byte[], int, float)"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedFloat()","org.apache.commons.io.EndianUtils.writeSwappedFloat(java.io.OutputStream, float)"
"org.apache.commons.io.ByteOrderMarkTestCase.testToString()","org.apache.commons.io.ByteOrderMark.toString()"
"org.apache.commons.io.input.TeeInputStreamTest.testSkip()","org.apache.commons.io.input.ProxyInputStream.skip(long)"
"org.apache.commons.io.FileUtilsTestCase.testGetFile_Parent()","org.apache.commons.io.FileUtils.getFile(java.io.File, java.lang.String[])"
"org.apache.commons.io.ByteOrderMarkTestCase.testLength()","org.apache.commons.io.ByteOrderMark.length()"
"org.apache.commons.io.input.NullReaderTest.testMarkAndReset()","org.apache.commons.io.input.NullReader.mark(int)"
"org.apache.commons.io.input.NullReaderTest.testMarkAndReset()","org.apache.commons.io.input.NullReader.reset()"
"org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToSystem()","org.apache.commons.io.FilenameUtils.separatorsToSystem(java.lang.String)"
"org.apache.commons.io.FilenameUtilsWildcardTestCase.testSplitOnTokens()","org.apache.commons.io.FilenameUtils.splitOnTokens(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile3()","org.apache.commons.io.FileUtils.forceDelete(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testForceMkdir()","org.apache.commons.io.FileUtils.forceMkdir(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testMoveToDirectory_Errors()","org.apache.commons.io.FileUtils.moveToDirectory(java.io.File, java.io.File, boolean)"
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile2()","org.apache.commons.io.FileUtils.forceDelete(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testForceDeleteAFile1()","org.apache.commons.io.FileUtils.forceDelete(java.io.File)"
"org.apache.commons.io.input.BoundedReaderTest.readMultiWithOffset()","org.apache.commons.io.input.BoundedReader.read(char[], int, int)"
"org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()","org.apache.commons.io.input.BoundedReader.mark(int)"
"org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMax()","org.apache.commons.io.input.BoundedReader.read()"
"org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()","org.apache.commons.io.input.BoundedReader.mark(int)"
"org.apache.commons.io.input.BoundedReaderTest.markResetWithMarkOutsideBoundedReaderMaxAndInitialOffset()","org.apache.commons.io.input.BoundedReader.read()"
"org.apache.commons.io.input.BoundedReaderTest.readMulti()","org.apache.commons.io.input.BoundedReader.read(char[], int, int)"
"org.apache.commons.io.input.BoundedReaderTest.readTillEnd()","org.apache.commons.io.input.BoundedReader.read()"
"org.apache.commons.io.input.BoundedReaderTest.shortReader()","org.apache.commons.io.input.BoundedReader.read()"
"org.apache.commons.io.ByteOrderMarkTestCase.getBytes()","org.apache.commons.io.ByteOrderMark.getBytes()"
"org.apache.commons.io.IOUtilsTestCase.testToByteArray_InputStream_SizeLong()","org.apache.commons.io.IOUtils.toByteArray(java.io.InputStream, long)"
"org.apache.commons.io.IOUtilsTestCase.testRead_ReadableByteChannel()","org.apache.commons.io.IOUtils.read(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)"
"org.apache.commons.io.IOUtilsTestCase.testReadFully_ReadableByteChannel()","org.apache.commons.io.IOUtils.readFully(java.nio.channels.ReadableByteChannel, java.nio.ByteBuffer)"
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArrayNull()","org.apache.commons.io.comparator.AbstractFileComparator.sort(java.io.File[])"
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortArray()","org.apache.commons.io.comparator.AbstractFileComparator.sort(java.io.File[])"
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoDate()","org.apache.commons.io.FileUtils.isFileNewer(java.io.File, java.util.Date)"
"org.apache.commons.io.input.BoundedReaderTest.closeTest()","org.apache.commons.io.input.BoundedReader.close()"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()","org.apache.commons.io.EndianUtils.writeSwappedLong(byte[], int, long)"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedLong()","org.apache.commons.io.EndianUtils.writeSwappedLong(java.io.OutputStream, long)"
"org.apache.commons.io.input.BrokenInputStreamTest.testAvailable()","org.apache.commons.io.input.BrokenInputStream.available()"
"org.apache.commons.io.FileUtilsTestCase.testToFile3()","org.apache.commons.io.FileUtils.toFile(java.net.URL)"
"org.apache.commons.io.FileUtilsTestCase.testGetFile()","org.apache.commons.io.FileUtils.getFile(java.lang.String[])"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPathNoEndSeparator_with_null_byte()","org.apache.commons.io.FilenameUtils.getPathNoEndSeparator(java.lang.String)"
"org.apache.commons.io.input.TeeInputStreamTest.testReadToArray()","org.apache.commons.io.input.TeeInputStream.read(byte[])"
"org.apache.commons.io.FileUtilsFileNewerTestCase.testIsFileNewerNoFile()","org.apache.commons.io.FileUtils.isFileNewer(java.io.File, long)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SocketIOException()","org.apache.commons.io.IOUtils.closeQuietly(java.net.Socket)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_Socket()","org.apache.commons.io.IOUtils.closeQuietly(java.net.Socket)"
"org.apache.commons.io.output.BrokenOutputStreamTest.testWrite()","org.apache.commons.io.output.BrokenOutputStream.write(int)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName_with_nullByte()","org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetBaseName()","org.apache.commons.io.FilenameUtils.getBaseName(java.lang.String)"
"org.apache.commons.io.input.TeeInputStreamTest.testReadOneByte()","org.apache.commons.io.input.TeeInputStream.read()"
"org.apache.commons.io.input.TeeInputStreamTest.testReadEverything()","org.apache.commons.io.input.TeeInputStream.read()"
"org.apache.commons.io.input.CharSequenceReaderTest.testRead()","org.apache.commons.io.input.CharSequenceReader.read()"
"org.apache.commons.io.input.CharSequenceReaderTest.testClose()","org.apache.commons.io.input.CharSequenceReader.close()"
"org.apache.commons.io.input.CharSequenceReaderTest.testSkip()","org.apache.commons.io.input.CharSequenceReader.skip(long)"
"org.apache.commons.io.input.CharSequenceReaderTest.testMarkSupported()","org.apache.commons.io.input.CharSequenceReader.markSupported()"
"org.apache.commons.io.IOUtilsTestCase.testContentEquals_Reader_Reader()","org.apache.commons.io.IOUtils.contentEquals(java.io.Reader, java.io.Reader)"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()","org.apache.commons.io.EndianUtils.writeSwappedInteger(byte[], int, int)"
"org.apache.commons.io.EndianUtilsTest.testWriteSwappedInteger()","org.apache.commons.io.EndianUtils.writeSwappedInteger(java.io.OutputStream, int)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadLine()","org.apache.commons.io.input.SwappedDataInputStream.readLine()"
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortList()","org.apache.commons.io.comparator.AbstractFileComparator.sort(java.util.List<java.io.File>)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetName()","org.apache.commons.io.FilenameUtils.getName(java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriter()","org.apache.commons.io.IOUtils.buffer(java.io.Writer)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriterWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.Writer)"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedWriterWithBufferSize()","org.apache.commons.io.IOUtils.buffer(java.io.Writer, int)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUnsignedByte()","org.apache.commons.io.input.SwappedDataInputStream.readUnsignedByte()"
"org.apache.commons.io.EndianUtilsTest.testSwapInteger()","org.apache.commons.io.EndianUtils.swapInteger(int)"
"org.apache.commons.io.EndianUtilsTest.testSwapFloat()","org.apache.commons.io.EndianUtils.swapFloat(float)"
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyNonExistent()","org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)"
"org.apache.commons.io.FileUtilsTestCase.testDeleteQuietlyForNull()","org.apache.commons.io.FileUtils.deleteQuietly(java.io.File)"
"org.apache.commons.io.input.NullReaderTest.testMarkNotSupported()","org.apache.commons.io.input.NullReader.mark(int)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetPrefix_with_nullbyte()","org.apache.commons.io.FilenameUtils.getPrefix(java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_AllCloseableIOException()","org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable[])"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_CloseableIOException()","org.apache.commons.io.IOUtils.closeQuietly(java.io.Closeable)"
"org.apache.commons.io.FilenameUtilsTestCase.testGetExtension()","org.apache.commons.io.FilenameUtils.getExtension(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testRemoveExtension()","org.apache.commons.io.FilenameUtils.removeExtension(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testIndexOfExtension()","org.apache.commons.io.FilenameUtils.indexOfExtension(java.lang.String)"
"org.apache.commons.io.FilenameUtilsTestCase.testIsExtensionArray()","org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String[])"
"org.apache.commons.io.FilenameUtilsTestCase.testIsExtension()","org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String)"
"org.apache.commons.io.input.SwappedDataInputStreamTest.testReadUTF()","org.apache.commons.io.input.SwappedDataInputStream.readUTF()"
"org.apache.commons.io.IOUtilsTestCase.testContentEquals_InputStream_InputStream()","org.apache.commons.io.IOUtils.contentEquals(java.io.InputStream, java.io.InputStream)"
"org.apache.commons.io.IOCaseTestCase.test_isCaseSensitive()","org.apache.commons.io.IOCase.isCaseSensitive()"
"org.apache.commons.io.IOUtilsTestCase.testAsBufferedOutputStream()","org.apache.commons.io.IOUtils.buffer(java.io.OutputStream)"
"org.apache.commons.io.FilenameUtilsTestCase.testIsExtension_injection()","org.apache.commons.io.FilenameUtils.isExtension(java.lang.String, java.lang.String)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_ServerSocketIOException()","org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)"
"org.apache.commons.io.FilenameUtilsTestCase.testSeparatorsToWindows()","org.apache.commons.io.FilenameUtils.separatorsToWindows(java.lang.String)"
"org.apache.commons.io.IOUtilsWriteTestCase.testWriteLines_Writer_nullStream()","org.apache.commons.io.IOUtils.writeLines(java.util.Collection<?>, java.lang.String, java.io.Writer)"
"org.apache.commons.io.FileUtilsTestCase.testGetUserDirectory()","org.apache.commons.io.FileUtils.getUserDirectory()"
"org.apache.commons.io.FileUtilsTestCase.testChecksumOnDirectory()","org.apache.commons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)"
"org.apache.commons.io.FileUtilsTestCase.testChecksumOnNullFile()","org.apache.commons.io.FileUtils.checksum(java.io.File, java.util.zip.Checksum)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_ServerSocket()","org.apache.commons.io.IOUtils.closeQuietly(java.net.ServerSocket)"
"org.apache.commons.io.ByteOrderMarkTestCase.testHashCode()","org.apache.commons.io.ByteOrderMark.hashCode()"
"org.apache.commons.io.output.BrokenOutputStreamTest.testFlush()","org.apache.commons.io.output.BrokenOutputStream.flush()"
"org.apache.commons.io.IOCaseTestCase.test_getName()","org.apache.commons.io.IOCase.getName()"
"org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_case()","org.apache.commons.io.IOCase.checkEndsWith(java.lang.String, java.lang.String)"
"org.apache.commons.io.IOCaseTestCase.test_checkEndsWith_functionality()","org.apache.commons.io.IOCase.checkEndsWith(java.lang.String, java.lang.String)"
"org.apache.commons.io.EndianUtilsTest.testSwapLong()","org.apache.commons.io.EndianUtils.swapLong(long)"
"org.apache.commons.io.input.BrokenInputStreamTest.testClose()","org.apache.commons.io.input.BrokenInputStream.close()"
"org.apache.commons.io.IOUtilsTestCase.testSkip_InputStream()","org.apache.commons.io.IOUtils.skip(java.io.InputStream, long)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorTwice()","org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_SelectorNull()","org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)"
"org.apache.commons.io.IOUtilsTestCase.testCloseQuietly_Selector()","org.apache.commons.io.IOUtils.closeQuietly(java.nio.channels.Selector)"
"org.apache.commons.io.comparator.ComparatorAbstractTestCase.testSortListNull()","org.apache.commons.io.comparator.AbstractFileComparator.sort(java.util.List<java.io.File>)"
"org.apache.commons.io.FilenameUtilsTestCase.testIndexOfLastSeparator()","org.apache.commons.io.FilenameUtils.indexOfLastSeparator(java.lang.String)"
"org.apache.commons.io.FileUtilsTestCase.testGetUserDirectoryPath()","org.apache.commons.io.FileUtils.getUserDirectoryPath()"
"org.apache.commons.io.FileUtilsTestCase.testToFiles3()","org.apache.commons.io.FileUtils.toFiles(java.net.URL[])"
"org.apache.commons.io.FileUtilsTestCase.testToFiles3a()","org.apache.commons.io.FileUtils.toFiles(java.net.URL[])"
