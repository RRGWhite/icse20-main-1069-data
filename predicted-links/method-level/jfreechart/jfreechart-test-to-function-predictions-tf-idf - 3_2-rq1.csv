test,tested-method
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMaxOutlier()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMaxOutlier()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMaxOutlier()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testBug1572478Horizontal()","null.<init>(org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testBug1572478Horizontal()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(java.util.List, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.TimeSeriesChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testDrawWithNullInfo()","org.jfree.data.resources.DataPackageResources.getContents()"
"org.jfree.chart.BarChart3DTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMinOutlier()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMinOutlier()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMinOutlier()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.<init>()"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, boolean, boolean)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.<init>()"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testDrawWithNullInfo()","org.jfree.data.KeyToGroupMap.<init>()"
"org.jfree.chart.StackedBarChart3DTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testNotification()","org.jfree.chart.plot.CombinedRangeXYPlot.getSubplots()"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testNotification()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testBug1572478Vertical()","null.<init>(org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testBug1572478Vertical()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(java.util.List, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testDrawWithEmptyDataset()","org.jfree.chart.ChartFactory.createStackedXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.TableXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testDrawWithEmptyDataset()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.<init>()"
"org.jfree.chart.StackedAreaChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.BarChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.XYLineChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.axis.DateAxisTest.testBug3484403()","org.jfree.chart.axis.DateAxis.setTimeline(org.jfree.chart.axis.Timeline)"
"org.jfree.chart.axis.DateAxisTest.testBug3484403()","org.jfree.chart.axis.DateAxis.setMaximumDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testBug3484403()","org.jfree.chart.axis.DateAxis.setMinimumDate(java.util.Date)"
"org.jfree.chart.GanttChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testDrawWithNullMeanHorizontal()","org.jfree.chart.renderer.category.StatisticalBarRenderer.<init>()"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testNotification()","org.jfree.chart.plot.CombinedRangeCategoryPlot.getSubplots()"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testNotification()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)"
"org.jfree.chart.plot.XYPlotTest.testDrawRangeGridlines()","org.jfree.chart.plot.XYPlot.setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.plot.XYPlotTest.testDrawRangeGridlines()","org.jfree.chart.ChartFactory.createXYLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.XYPlotTest.testDrawRangeGridlines()","org.jfree.chart.StandardChartTheme.<init>(java.lang.String)"
"org.jfree.chart.plot.XYPlotTest.testDrawRangeGridlines()","org.jfree.chart.StandardChartTheme.<init>(java.lang.String, boolean)"
"org.jfree.chart.plot.XYPlotTest.testDrawRangeGridlines()","org.jfree.chart.plot.PieLabelLinkStyle.<init>(java.lang.String)"
"org.jfree.chart.plot.XYPlotTest.testDrawRangeGridlines()","org.jfree.chart.renderer.xy.GradientXYBarPainter.<init>()"
"org.jfree.chart.ScatterPlotTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.LineChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.plot.XYPlotTest.testDrawSeriesWithZeroItems()","org.jfree.chart.ChartFactory.createXYLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.XYPlotTest.testDrawSeriesWithZeroItems()","org.jfree.data.xy.DefaultXYDataset.addSeries(java.lang.Comparable, double[][])"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization3()","org.jfree.chart.JFreeChart.createBufferedImage(int, int)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization3()","org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testDrawWithNullDeviationVertical()","org.jfree.chart.renderer.category.StatisticalBarRenderer.<init>()"
"org.jfree.chart.XYStepChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.plot.FastScatterPlotTest.testDrawWithNullInfo()","org.jfree.chart.plot.FastScatterPlot.<init>(float[][], org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.FastScatterPlotTest.testDrawWithNullInfo()","org.jfree.chart.plot.FastScatterPlot.calculateXDataRange(float[][])"
"org.jfree.chart.plot.FastScatterPlotTest.testDrawWithNullInfo()","org.jfree.chart.plot.FastScatterPlot.calculateYDataRange(float[][])"
"org.jfree.chart.axis.SubCategoryAxisTest.test2275695()","org.jfree.chart.ChartFactory.createStackedBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testBug1593156()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testBug1593156()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.<init>(boolean, boolean)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.StatisticalBarRenderer.<init>()"
"org.jfree.chart.XYBarChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.axis.LogAxisTest.testRefreshTicksWithZeroTickUnit()","org.jfree.chart.axis.LogAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.ui.RectangleEdge)"
"org.jfree.chart.LineChart3DTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.StackedBarChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMedian()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMedian()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMedian()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.plot.XYPlotTest.testSerialization3()","org.jfree.chart.ChartFactory.createXYLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.plot.XYPlotTest.testSerialization3()","org.jfree.chart.JFreeChart.createBufferedImage(int, int)"
"org.jfree.chart.plot.XYPlotTest.testSerialization4()","org.jfree.chart.ChartFactory.createXYLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.plot.XYPlotTest.testSerialization4()","org.jfree.chart.plot.XYPlot.addDomainMarker(org.jfree.chart.plot.Marker, org.jfree.ui.Layer)"
"org.jfree.chart.plot.XYPlotTest.testSerialization4()","org.jfree.chart.JFreeChart.createBufferedImage(int, int)"
"org.jfree.chart.plot.XYPlotTest.testSerialization4()","org.jfree.chart.plot.XYPlot.addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.ui.Layer)"
"org.jfree.chart.XYAreaChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testDrawWithNullMeanVertical()","org.jfree.chart.renderer.category.StatisticalBarRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMinRegular()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMinRegular()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMinRegular()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.test2909215()","org.jfree.chart.ChartFactory.createBoxAndWhiskerChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.statistics.BoxAndWhiskerXYDataset, boolean)"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testDrawWithNullInfo()","org.jfree.chart.util.XYCoordinateType.<init>(java.lang.String)"
"org.jfree.chart.AreaChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMean()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMean()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMean()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.plot.CategoryPlotTest.test1654215()","org.jfree.chart.ChartFactory.createLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.CategoryPlotTest.test1654215()","org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization4()","org.jfree.chart.JFreeChart.createBufferedImage(int, int)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization4()","org.jfree.chart.plot.CategoryPlot.addRangeMarker(org.jfree.chart.plot.Marker, org.jfree.ui.Layer)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization4()","org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization4()","org.jfree.chart.plot.IntervalMarker.<init>(double, double)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization4()","org.jfree.chart.plot.IntervalMarker.<init>(double, double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>(int)"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testNotification()","org.jfree.chart.plot.CombinedDomainXYPlot.getSubplots()"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testNotification()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYAreaRenderer2.<init>()"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYStepRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYStepRenderer.<init>(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesVisible(boolean)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.axis.CategoryLabelPosition.<init>(org.jfree.ui.RectangleAnchor, org.jfree.text.TextBlockAnchor, org.jfree.chart.axis.CategoryLabelWidthType, float)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions(double)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(double)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.axis.CategoryAnchor.<init>(java.lang.String)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.axis.CategoryLabelPosition.<init>(org.jfree.ui.RectangleAnchor, org.jfree.text.TextBlockAnchor)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.axis.CategoryLabelPositions.<init>(org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition, org.jfree.chart.axis.CategoryLabelPosition)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullInfo()","org.jfree.chart.axis.CategoryLabelWidthType.<init>(java.lang.String)"
"org.jfree.chart.renderer.category.LevelRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.LevelRenderer.<init>()"
"org.jfree.chart.renderer.category.LevelRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.AbstractRenderer.setBaseOutlinePaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullQ3()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullQ3()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullQ3()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.renderer.category.LayeredBarRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.category.LayeredBarRenderer.<init>()"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testNotification()","org.jfree.chart.plot.CombinedDomainCategoryPlot.getSubplots()"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testNotification()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D)"
"org.jfree.chart.XYStepAreaChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.GanttChartTest.testDrawWithNullInfo2()","org.jfree.chart.plot.CategoryPlot.setDataset(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.plot.XYPlotTest.test1654215()","org.jfree.chart.ChartFactory.createXYLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.XYPlotTest.test1654215()","org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testDrawWithNullDeviationHorizontal()","org.jfree.chart.renderer.category.StatisticalBarRenderer.<init>()"
"org.jfree.chart.axis.ValueAxisTest.test3555275()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.axis.ValueAxisTest.test3555275()","org.jfree.chart.axis.Axis.setFixedDimension(double)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMaxRegular()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMaxRegular()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullMaxRegular()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.WaterfallChartTest.testDrawWithNullInfo()","org.jfree.chart.JFreeChart.draw(java.awt.Graphics2D, java.awt.geom.Rectangle2D, java.awt.geom.Point2D, org.jfree.chart.ChartRenderingInfo)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testDrawWithNullInfo()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testNoDisplayedItem()","org.jfree.chart.TestUtilities.containsInstanceOf(java.util.Collection, java.lang.Class)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullQ1()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullQ1()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testDrawWithNullQ1()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testDrawWithNullValue()","org.jfree.chart.renderer.xy.XYStepRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testDrawWithNullValue()","org.jfree.chart.renderer.xy.XYStepRenderer.<init>(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testDrawWithNullValue()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesVisible(boolean)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testCloning()","org.jfree.chart.annotations.CategoryTextAnnotation.clone()"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testHashcode()","org.jfree.chart.annotations.CategoryTextAnnotation.hashCode()"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testSerialization()","org.jfree.chart.annotations.CategoryPointerAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testSerialization()","org.jfree.chart.annotations.CategoryPointerAnnotation.<init>(java.lang.String, java.lang.Comparable, double, double)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testHashCode()","org.jfree.chart.annotations.CategoryPointerAnnotation.hashCode()"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setAngle(double)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowLength(double)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowPaint(java.awt.Paint)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowStroke(java.awt.Stroke)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setArrowWidth(double)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setBaseRadius(double)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setLabelOffset(double)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryPointerAnnotation.setTipRadius(double)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryTextAnnotation.setCategory(java.lang.Comparable)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryTextAnnotation.setValue(double)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryTextAnnotation.setCategoryAnchor(org.jfree.chart.axis.CategoryAnchor)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryTextAnnotation.setCategory(java.lang.Comparable)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryTextAnnotation.setValue(double)"
"org.jfree.chart.annotations.TextAnnotationTest.testHashCode()","org.jfree.chart.annotations.CategoryTextAnnotation.hashCode()"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testCloning()","org.jfree.chart.annotations.CategoryPointerAnnotation.clone()"
"org.jfree.chart.annotations.TextAnnotationTest.testEquals()","org.jfree.chart.annotations.TextAnnotation.setFont(java.awt.Font)"
"org.jfree.chart.annotations.TextAnnotationTest.testEquals()","org.jfree.chart.annotations.TextAnnotation.setPaint(java.awt.Paint)"
"org.jfree.chart.annotations.TextAnnotationTest.testEquals()","org.jfree.chart.annotations.TextAnnotation.setRotationAngle(double)"
"org.jfree.chart.annotations.TextAnnotationTest.testEquals()","org.jfree.chart.annotations.TextAnnotation.setText(java.lang.String)"
"org.jfree.chart.annotations.TextAnnotationTest.testEquals()","org.jfree.chart.annotations.TextAnnotation.setTextAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.annotations.TextAnnotationTest.testEquals()","org.jfree.chart.annotations.TextAnnotation.setRotationAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testSerialization()","org.jfree.chart.annotations.CategoryTextAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testSerialization()","org.jfree.chart.annotations.CategoryTextAnnotation.<init>(java.lang.String, java.lang.Comparable, double)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testSerialization()","org.jfree.chart.annotations.TextAnnotation.<init>(java.lang.String)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.getDrawSharedDomainAxis()"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setAnchorValue(double)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setColumnRenderingOrder(org.jfree.util.SortOrder)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setCrosshairDatasetIndex(int)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDatasetRenderingOrder(org.jfree.chart.plot.DatasetRenderingOrder)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainCrosshairColumnKey(java.lang.Comparable)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainCrosshairPaint(java.awt.Paint)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainCrosshairRowKey(java.lang.Comparable)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainCrosshairStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainCrosshairVisible(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainGridlinePosition(org.jfree.chart.axis.CategoryAnchor)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDrawSharedDomainAxis(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeCrosshairLockedOnData(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeCrosshairStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeCrosshairValue(double)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeCrosshairVisible(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeGridlinesVisible(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeMinorGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeMinorGridlinesVisible(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeZeroBaselineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeZeroBaselineVisible(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRowRenderingOrder(org.jfree.util.SortOrder)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setFixedLegendItems(org.jfree.chart.LegendItemCollection)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeCrosshairPaint(java.awt.Paint)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals()","org.jfree.chart.plot.CategoryPlot.setRangeMinorGridlinePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYBarRenderer.getLegendItem(int, int)"
"org.jfree.chart.axis.DateAxisTest.testSetMinimumDate()","org.jfree.chart.axis.DateAxis.setMaximumDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testSetMinimumDate()","org.jfree.chart.axis.DateAxis.setMinimumDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testSetMaximumDate()","org.jfree.chart.axis.DateAxis.setMaximumDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testSetMaximumDate()","org.jfree.chart.axis.DateAxis.setMinimumDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testSetMaximumDate()","org.jfree.chart.axis.DateAxis.DefaultTimeline.<init>()"
"org.jfree.chart.axis.DateAxisTest.testSetMaximumDate()","org.jfree.chart.axis.DateTickMarkPosition.<init>(java.lang.String)"
"org.jfree.chart.axis.DateAxisTest.testSetMaximumDate()","org.jfree.chart.axis.DateTickUnitType.<init>(java.lang.String, int)"
"org.jfree.chart.axis.DateAxisTest.testBug2201869()","org.jfree.chart.axis.DateAxis.refreshTicks(java.awt.Graphics2D, org.jfree.chart.axis.AxisState, java.awt.geom.Rectangle2D, org.jfree.ui.RectangleEdge)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testEquals()","org.jfree.chart.plot.dial.DialTextAnnotation.setAngle(double)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testEquals()","org.jfree.chart.plot.dial.DialTextAnnotation.setFont(java.awt.Font)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testEquals()","org.jfree.chart.plot.dial.DialTextAnnotation.setLabel(java.lang.String)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testEquals()","org.jfree.chart.plot.dial.DialTextAnnotation.setRadius(double)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testEquals()","org.jfree.chart.plot.dial.DialTextAnnotation.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelAnchor(org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelFont(java.awt.Font)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelGenerator(org.jfree.chart.labels.CrosshairLabelGenerator)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelOutlineVisible(boolean)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelVisible(boolean)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelXOffset(double)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setLabelYOffset(double)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setStroke(java.awt.Stroke)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setValue(double)"
"org.jfree.chart.plot.CrosshairTest.testEquals()","org.jfree.chart.plot.Crosshair.setVisible(boolean)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testCloning2()","org.jfree.data.xy.CategoryTableXYDataset.setIntervalWidth(double)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testCloning2()","org.jfree.data.xy.CategoryTableXYDataset.clone()"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testCloning2()","org.jfree.data.xy.CategoryTableXYDataset.setIntervalPositionFactor(double)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testCloning()","org.jfree.data.xy.CategoryTableXYDataset.clone()"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testCloning()","org.jfree.data.xy.CategoryTableXYDataset.setIntervalPositionFactor(double)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testCloning()","org.jfree.data.xy.CategoryTableXYDataset.equals(java.lang.Object)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning2()","org.jfree.chart.event.RendererChangeEvent.getRenderer()"
"org.jfree.chart.plot.XYPlotTest.testSerialization5()","org.jfree.chart.axis.Axis.hasListener(java.util.EventListener)"
"org.jfree.chart.plot.XYPlotTest.testSerialization5()","org.jfree.data.general.AbstractDataset.hasListener(java.util.EventListener)"
"org.jfree.chart.plot.XYPlotTest.testSerialization5()","org.jfree.chart.renderer.AbstractRenderer.hasListener(java.util.EventListener)"
"org.jfree.chart.plot.XYPlotTest.testCloning4()","org.jfree.chart.renderer.AbstractRenderer.hasListener(java.util.EventListener)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization5()","org.jfree.chart.axis.Axis.hasListener(java.util.EventListener)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization5()","org.jfree.data.general.AbstractDataset.hasListener(java.util.EventListener)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization5()","org.jfree.chart.renderer.AbstractRenderer.hasListener(java.util.EventListener)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test6()","org.jfree.chart.axis.SegmentedTimeline.toTimelineValue(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test6()","org.jfree.chart.axis.SegmentedTimeline.toMillisecond(long)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test5()","org.jfree.chart.axis.SegmentedTimeline.toTimelineValue(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test5()","org.jfree.chart.axis.SegmentedTimeline.toMillisecond(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2BaseTimelineTranslations()","org.jfree.chart.axis.SegmentedTimeline.Segment.moveIndexToStart()"
"org.jfree.chart.axis.SegmentedTimelineTest.testSegmentedTimelineWithException1()","org.jfree.chart.axis.SegmentedTimeline.containsDomainValue(long)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test1()","org.jfree.chart.axis.SegmentedTimeline.toTimelineValue(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test1()","org.jfree.chart.axis.SegmentedTimeline.toMillisecond(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinTranslations()","org.jfree.chart.axis.SegmentedTimeline.addBaseTimelineException(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinTranslations()","org.jfree.chart.axis.SegmentedTimeline.getBaseTimeline()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinTranslations()","org.jfree.chart.axis.SegmentedTimeline.Segment.moveIndexToStart()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2BaseTimelineExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2BaseTimelineExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegmentCount(long, long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2BaseTimelineExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test7()","org.jfree.chart.axis.SegmentedTimeline.toTimelineValue(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test7()","org.jfree.chart.axis.SegmentedTimeline.toMillisecond(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2IncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.setExceptionSegments(java.util.List)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2IncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getGroupSegmentCount()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2IncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsIncluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2IncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExcludeSegments()"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test4()","org.jfree.chart.axis.SegmentedTimeline.toTimelineValue(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test4()","org.jfree.chart.axis.SegmentedTimeline.toMillisecond(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThoughFridayExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThoughFridayExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegmentCount(long, long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThoughFridayExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test2()","org.jfree.chart.axis.SegmentedTimeline.toTimelineValue(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test2()","org.jfree.chart.axis.SegmentedTimeline.toMillisecond(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.setExceptionSegments(java.util.List)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getGroupSegmentCount()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsIncluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExcludeSegments()"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test3()","org.jfree.chart.axis.SegmentedTimeline.toTimelineValue(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test3()","org.jfree.chart.axis.SegmentedTimeline.toMillisecond(long)"
"org.jfree.chart.axis.SegmentedTimelineAdditionalTest.test8()","org.jfree.chart.axis.SegmentedTimeline.addException(java.util.Date)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2Translations()","org.jfree.chart.axis.SegmentedTimeline.addBaseTimelineException(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2Translations()","org.jfree.chart.axis.SegmentedTimeline.getBaseTimeline()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2Translations()","org.jfree.chart.axis.SegmentedTimeline.Segment.moveIndexToStart()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridayIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.setExceptionSegments(java.util.List)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridayIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getGroupSegmentCount()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridayIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsIncluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridayIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExcludeSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testBasicSegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.containsDomainValue(long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegmentCount(long, long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.getExceptionSegmentCount(long, long)"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinExceptionSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExceptionSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.setExceptionSegments(java.util.List)"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getGroupSegmentCount()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsIncluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinIncludedAndExcludedSegments()","org.jfree.chart.axis.SegmentedTimeline.Segment.inExcludeSegments()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsTranslations()","org.jfree.chart.axis.SegmentedTimeline.Segment.moveIndexToStart()"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseFillPaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelsVisible(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseSeriesVisible(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseSeriesVisibleInLegend(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setCreateEntities(java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setFillPaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setItemLabelAnchorOffset(double)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend(java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseCreateEntities(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setItemLabelsVisible(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setLegendShape(int, java.awt.Shape)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setLegendTextPaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setSeriesCreateEntities(int, java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetSeriesVisible()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(java.lang.Boolean)"
"org.jfree.chart.plot.MultiplePiePlotTest.testCloning()","org.jfree.chart.plot.MultiplePiePlot.clone()"
"org.jfree.chart.plot.MultiplePiePlotTest.testCloning()","org.jfree.chart.plot.MultiplePiePlot.setLegendItemShape(java.awt.Shape)"
"org.jfree.chart.plot.MultiplePiePlotTest.testEquals()","org.jfree.chart.plot.MultiplePiePlot.setAggregatedItemsKey(java.lang.Comparable)"
"org.jfree.chart.plot.MultiplePiePlotTest.testEquals()","org.jfree.chart.plot.MultiplePiePlot.setDataExtractOrder(org.jfree.util.TableOrder)"
"org.jfree.chart.plot.MultiplePiePlotTest.testEquals()","org.jfree.chart.plot.MultiplePiePlot.setLimit(double)"
"org.jfree.chart.plot.MultiplePiePlotTest.testEquals()","org.jfree.chart.plot.MultiplePiePlot.setPieChart(org.jfree.chart.JFreeChart)"
"org.jfree.chart.plot.MultiplePiePlotTest.testEquals()","org.jfree.chart.plot.MultiplePiePlot.setAggregatedItemsPaint(java.awt.Paint)"
"org.jfree.chart.plot.MultiplePiePlotTest.testEquals()","org.jfree.chart.plot.MultiplePiePlot.setLegendItemShape(java.awt.Shape)"
"org.jfree.chart.plot.MultiplePiePlotTest.testConstructor()","org.jfree.chart.plot.MultiplePiePlot.getDataset()"
"org.jfree.chart.plot.MultiplePiePlotTest.testConstructor()","org.jfree.chart.plot.MultiplePiePlot.<init>()"
"org.jfree.chart.plot.MultiplePiePlotTest.testConstructor()","org.jfree.data.general.AbstractDataset.hasListener(java.util.EventListener)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindYValue()","org.jfree.data.general.DatasetUtilities.findYValue(org.jfree.data.xy.XYDataset, int, double)"
"org.jfree.chart.renderer.RendererUtilitiesTest.test3561093()","org.jfree.data.xy.XYSeries.<init>(java.lang.Comparable, boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindYValueNonSorted()","org.jfree.data.xy.XYSeries.<init>(java.lang.Comparable, boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindYValueNonSorted()","org.jfree.data.general.DatasetUtilities.findYValue(org.jfree.data.xy.XYDataset, int, double)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindYValueWithDuplicates()","org.jfree.data.general.DatasetUtilities.findYValue(org.jfree.data.xy.XYDataset, int, double)"
"org.jfree.data.xy.MatrixSeriesTest.testGetItemColumn()","org.jfree.data.xy.MatrixSeries.getItemColumn(int)"
"org.jfree.data.xy.MatrixSeriesTest.testGetItem()","org.jfree.data.xy.MatrixSeries.getItem(int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetPercentComplete()","org.jfree.data.gantt.TaskSeriesCollection.getPercentComplete(int, int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetPercentComplete()","org.jfree.data.gantt.TaskSeriesCollection.getPercentComplete(int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetPercentComplete()","org.jfree.data.gantt.TaskSeriesCollection.getPercentComplete(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.getUseYInterval()"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.isDrawBarOutline()"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setBase(double)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline(boolean)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setMargin(double)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setShadowXOffset(double)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setShadowYOffset(double)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar(java.awt.Shape)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBarRenderer.setShadowVisible(boolean)"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.XIntervalSeriesCollection.removeSeries(int)"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.XIntervalSeriesCollection.getSeriesCount()"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testEquals()","org.jfree.data.xy.XIntervalSeriesCollection.addSeries(org.jfree.data.xy.XIntervalSeries)"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testEquals()","org.jfree.data.xy.XIntervalSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testEquals()","org.jfree.data.xy.XIntervalSeriesCollection.<init>()"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testCloning()","org.jfree.data.xy.XIntervalSeriesCollection.clone()"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.test1170825()","org.jfree.data.xy.XIntervalSeriesCollection.getSeries(int)"
"org.jfree.chart.axis.DateTickTest.testEquals()","org.jfree.chart.axis.DateTick.equals(java.lang.Object)"
"org.jfree.chart.axis.DateTickTest.testSerialization()","org.jfree.chart.axis.DateTick.equals(java.lang.Object)"
"org.jfree.chart.axis.DateTickTest.testHashCode()","org.jfree.chart.axis.DateTick.hashCode()"
"org.jfree.chart.axis.DateTickTest.testCloning()","org.jfree.chart.axis.Tick.clone()"
"org.jfree.chart.axis.DateTickTest.testCloning()","org.jfree.chart.axis.DateTick.equals(java.lang.Object)"
"org.jfree.data.general.DatasetUtilitiesTest.testCreateCategoryDataset2()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.Comparable[], java.lang.Comparable[], double[][])"
"org.jfree.data.general.DatasetUtilitiesTest.testCreateCategoryDataset1()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.Comparable[], java.lang.Comparable[], double[][])"
"org.jfree.chart.plot.SpiderWebPlotTest.testDrawWithNullInfo()","org.jfree.util.TableOrder.<init>(java.lang.String)"
"org.jfree.chart.plot.SpiderWebPlotTest.testDrawWithNullInfo()","org.jfree.chart.plot.SpiderWebPlot.<init>(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.plot.SpiderWebPlotTest.testDrawWithNullInfo()","org.jfree.chart.plot.SpiderWebPlot.<init>(org.jfree.data.category.CategoryDataset, org.jfree.util.TableOrder)"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testEquals()","org.jfree.chart.plot.CombinedDomainCategoryPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testSerialization()","org.jfree.chart.plot.CombinedDomainCategoryPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testCloning()","org.jfree.chart.plot.CombinedDomainCategoryPlot.clone()"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.axis.CategoryAxis.<init>()"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainCategoryPlot.<init>()"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainCategoryPlot.add(org.jfree.chart.plot.CategoryPlot)"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainCategoryPlot.remove(org.jfree.chart.plot.CategoryPlot)"
"org.jfree.chart.plot.CombinedDomainCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainCategoryPlot.getSubplots()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testCloning()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.clone()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testHashcode()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testHashcode()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.<init>()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testEquals()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.getRoundXCoordinates()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testEquals()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.setRoundXCoordinates(boolean)"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testSerialization()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testSerialization()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.<init>()"
"org.jfree.chart.PieChart3DTest.testNullValueInDataset()","org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, double)"
"org.jfree.chart.PieChart3DTest.testNullValueInDataset()","org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, java.lang.Number)"
"org.jfree.chart.MeterChartTest.testDrawWithNullInfo()","org.jfree.chart.plot.DialShape.<init>(java.lang.String)"
"org.jfree.chart.MeterChartTest.testDrawWithNullInfo()","org.jfree.chart.plot.MeterPlot.addInterval(org.jfree.chart.plot.MeterInterval)"
"org.jfree.chart.MeterChartTest.testDrawWithNullInfo()","org.jfree.data.general.DefaultValueDataset.<init>(double)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testSerialization()","org.jfree.data.xy.CategoryTableXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testSerialization()","org.jfree.data.xy.CategoryTableXYDataset.add(double, double, java.lang.String)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testSerialization()","org.jfree.data.xy.CategoryTableXYDataset.<init>()"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testEquals()","org.jfree.data.xy.CategoryTableXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testEquals()","org.jfree.data.xy.CategoryTableXYDataset.add(double, double, java.lang.String)"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testEquals()","org.jfree.data.xy.CategoryTableXYDataset.<init>()"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testAddSeries()","org.jfree.data.xy.CategoryTableXYDataset.setAutoWidth(boolean)"
"org.jfree.chart.plot.dial.DialPlotTest.testScaleListener()","org.jfree.chart.plot.dial.DialPlot.addScale(int, org.jfree.chart.plot.dial.DialScale)"
"org.jfree.chart.plot.dial.DialPlotTest.testScaleListener()","org.jfree.chart.plot.dial.StandardDialScale.setStartAngle(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialScale.setExtent(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialScale.setMajorTickPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialScale.setMajorTickStroke(java.awt.Stroke)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testCloning()","org.jfree.chart.plot.dial.StandardDialScale.clone()"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testCloning()","org.jfree.chart.plot.dial.StandardDialScale.setExtent(double)"
"org.jfree.chart.plot.dial.DialPlotTest.testEquals()","org.jfree.chart.plot.dial.DialPlot.setView(double, double, double, double)"
"org.jfree.chart.plot.dial.DialPlotTest.testEquals()","org.jfree.chart.plot.dial.DialPlot.addLayer(org.jfree.chart.plot.dial.DialLayer)"
"org.jfree.chart.plot.dial.DialPlotTest.testEquals()","org.jfree.chart.plot.dial.DialPlot.setBackground(org.jfree.chart.plot.dial.DialLayer)"
"org.jfree.chart.plot.dial.DialPlotTest.testEquals()","org.jfree.chart.plot.dial.DialPlot.setCap(org.jfree.chart.plot.dial.DialLayer)"
"org.jfree.chart.plot.dial.DialPlotTest.testEquals()","org.jfree.chart.plot.dial.DialPlot.setDialFrame(org.jfree.chart.plot.dial.DialFrame)"
"org.jfree.chart.plot.dial.DialPlotTest.testEquals()","org.jfree.chart.plot.dial.StandardDialFrame.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testValueToAngle()","org.jfree.chart.plot.dial.StandardDialScale.valueToAngle(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testHashCode()","org.jfree.chart.plot.dial.StandardDialScale.hashCode()"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setMajorTickIncrement(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setMajorTickLength(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setMinorTickCount(int)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setMinorTickLength(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setTickLabelFont(java.awt.Font)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setTickLabelOffset(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setTickLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setTickLabelsVisible(boolean)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testEquals()","org.jfree.chart.plot.dial.StandardDialScale.setTickRadius(double)"
"org.jfree.chart.plot.dial.StandardDialScaleTest.testAngleToValue()","org.jfree.chart.plot.dial.StandardDialScale.angleToValue(double)"
"org.jfree.data.gantt.SlidingGanttCategoryDatasetTest.testEquals()","org.jfree.data.gantt.SlidingGanttCategoryDataset.setFirstCategoryIndex(int)"
"org.jfree.data.gantt.SlidingGanttCategoryDatasetTest.testEquals()","org.jfree.data.gantt.SlidingGanttCategoryDataset.setMaximumCategoryCount(int)"
"org.jfree.data.gantt.XYTaskDatasetTest.testEquals()","org.jfree.data.gantt.XYTaskDataset.setSeriesWidth(double)"
"org.jfree.data.gantt.XYTaskDatasetTest.testEquals()","org.jfree.data.gantt.XYTaskDataset.setTransposed(boolean)"
"org.jfree.data.gantt.SlidingGanttCategoryDatasetTest.testCloning()","org.jfree.data.gantt.SlidingGanttCategoryDataset.clone()"
"org.jfree.data.gantt.SlidingGanttCategoryDatasetTest.testCloning()","org.jfree.data.gantt.SlidingGanttCategoryDataset.getUnderlyingDataset()"
"org.jfree.data.gantt.SlidingGanttCategoryDatasetTest.testSerialization()","org.jfree.data.gantt.SlidingGanttCategoryDataset.getUnderlyingDataset()"
"org.jfree.data.gantt.SlidingGanttCategoryDatasetTest.testSerialization()","org.jfree.data.gantt.SlidingGanttCategoryDataset.<init>(org.jfree.data.gantt.GanttCategoryDataset, int, int)"
"org.jfree.data.gantt.SlidingGanttCategoryDatasetTest.testSerialization()","org.jfree.data.gantt.SlidingGanttCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetEndValue3()","org.jfree.data.gantt.TaskSeriesCollection.getEndValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testSerialization()","org.jfree.data.gantt.TaskSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetRowCount()","org.jfree.data.gantt.TaskSeriesCollection.getRowCount()"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetValue()","org.jfree.data.gantt.TaskSeriesCollection.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetValue()","org.jfree.data.gantt.TaskSeriesCollection.getValue(int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetColumnCount()","org.jfree.data.gantt.TaskSeriesCollection.getColumnCount()"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetSeriesCount()","org.jfree.data.gantt.TaskSeriesCollection.getSeriesCount()"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testCloning()","org.jfree.data.gantt.TaskSeriesCollection.clone()"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetEndValue2()","org.jfree.data.gantt.TaskSeriesCollection.getEndValue(int, int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetEndValue2()","org.jfree.data.gantt.TaskSeriesCollection.getEndValue(java.lang.Comparable, java.lang.Comparable, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetStartValue3()","org.jfree.data.gantt.TaskSeriesCollection.getStartValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetRowIndex()","org.jfree.data.gantt.TaskSeriesCollection.getRowIndex(java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.test697153()","org.jfree.data.gantt.TaskSeries.removeAll()"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetColumnIndex()","org.jfree.data.gantt.TaskSeriesCollection.getColumnIndex(java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testEquals()","org.jfree.data.gantt.TaskSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetRowKey()","org.jfree.data.gantt.TaskSeriesCollection.getRowKey(int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetStartValue()","org.jfree.data.gantt.TaskSeriesCollection.getStartValue(int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetStartValue()","org.jfree.data.gantt.TaskSeriesCollection.getStartValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetStartValue2()","org.jfree.data.gantt.TaskSeriesCollection.getStartValue(int, int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetStartValue2()","org.jfree.data.gantt.TaskSeriesCollection.getStartValue(java.lang.Comparable, java.lang.Comparable, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.test800324()","org.jfree.data.gantt.TaskSeriesCollection.getEndValue(int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.test800324()","org.jfree.data.gantt.TaskSeriesCollection.getSubIntervalCount(int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.test800324()","org.jfree.data.gantt.TaskSeriesCollection.getStartValue(int, int)"
"org.jfree.data.gantt.TaskSeriesTest.testGetTask()","org.jfree.data.gantt.TaskSeries.get(java.lang.String)"
"org.jfree.data.gantt.TaskSeriesTest.testGetTask()","org.jfree.data.gantt.Task.equals(java.lang.Object)"
"org.jfree.data.gantt.XYTaskDatasetTest.testSerialization()","org.jfree.data.gantt.XYTaskDataset.getTasks()"
"org.jfree.data.gantt.XYTaskDatasetTest.testSerialization()","org.jfree.data.gantt.XYTaskDataset.<init>(org.jfree.data.gantt.TaskSeriesCollection)"
"org.jfree.data.gantt.XYTaskDatasetTest.testSerialization()","org.jfree.data.gantt.XYTaskDataset.equals(java.lang.Object)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetEndValue()","org.jfree.data.gantt.TaskSeriesCollection.getEndValue(int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetEndValue()","org.jfree.data.gantt.TaskSeriesCollection.getEndValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetSubIntervalCount()","org.jfree.data.gantt.TaskSeriesCollection.getSubIntervalCount(int, int)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetSeriesKey()","org.jfree.data.gantt.TaskSeriesCollection.getSeriesKey(int)"
"org.jfree.data.gantt.XYTaskDatasetTest.testCloning()","org.jfree.data.gantt.XYTaskDataset.clone()"
"org.jfree.data.gantt.XYTaskDatasetTest.testCloning()","org.jfree.data.gantt.XYTaskDataset.getTasks()"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setAngle(double)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setDatasetIndex(int)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setFont(java.awt.Font)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setFrameAnchor(org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setInsets(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setRadius(double)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setTemplateValue(java.lang.Number)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setTextAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testEquals()","org.jfree.chart.plot.dial.DialValueIndicator.setValueAnchor(org.jfree.ui.RectangleAnchor)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds4()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds4()","org.jfree.data.xy.YIntervalSeriesCollection.addSeries(org.jfree.data.xy.YIntervalSeries)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds4()","org.jfree.data.xy.YIntervalSeriesCollection.<init>()"
"org.jfree.data.general.DatasetUtilitiesTest.testFindRangeBounds2()","org.jfree.data.xy.YIntervalSeriesCollection.addSeries(org.jfree.data.xy.YIntervalSeries)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindRangeBounds2()","org.jfree.data.xy.YIntervalSeriesCollection.<init>()"
"org.jfree.data.general.DatasetUtilitiesTest.testFindRangeBounds2()","org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.test1170825()","org.jfree.data.xy.YIntervalSeriesCollection.getSeries(int)"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.test1170825()","org.jfree.data.xy.YIntervalSeriesCollection.addSeries(org.jfree.data.xy.YIntervalSeries)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.YIntervalRenderer.<init>()"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testGetLegendItemSeriesIndex()","org.jfree.data.xy.YIntervalSeriesCollection.addSeries(org.jfree.data.xy.YIntervalSeries)"
"org.jfree.chart.ChartRenderingInfoTest.testEquals()","org.jfree.chart.ChartRenderingInfo.setEntityCollection(org.jfree.chart.entity.EntityCollection)"
"org.jfree.chart.plot.dial.DialPlotTest.testBackgroundListener()","org.jfree.chart.plot.dial.DialPlot.setBackground(org.jfree.chart.plot.dial.DialLayer)"
"org.jfree.chart.plot.dial.DialBackgroundTest.testSerialization()","org.jfree.chart.plot.dial.DialBackground.<init>()"
"org.jfree.chart.plot.dial.DialBackgroundTest.testSerialization()","org.jfree.chart.plot.dial.DialBackground.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.plot.dial.DialBackgroundTest.testSerialization()","org.jfree.chart.plot.dial.DialBackground.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialBackgroundTest.testEquals()","org.jfree.chart.plot.dial.DialBackground.<init>()"
"org.jfree.chart.plot.dial.DialBackgroundTest.testEquals()","org.jfree.chart.plot.dial.DialBackground.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.plot.dial.DialBackgroundTest.testEquals()","org.jfree.chart.plot.dial.DialBackground.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialPointerTest.testEquals()","org.jfree.chart.plot.dial.DialPointer.Pin.<init>(int)"
"org.jfree.chart.plot.dial.DialPointerTest.testEquals()","org.jfree.chart.plot.dial.DialPointer.Pin.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.DialPointerTest.testEquals()","org.jfree.chart.plot.dial.DialPointer.<init>(int)"
"org.jfree.chart.plot.dial.DialPlotTest.testFrameListener()","org.jfree.chart.plot.dial.ArcDialFrame.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialPlotTest.testFrameListener()","org.jfree.chart.plot.dial.DialPlot.setDialFrame(org.jfree.chart.plot.dial.DialFrame)"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testEquals()","org.jfree.chart.plot.dial.DialCap.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testEquals()","org.jfree.chart.plot.dial.DialCap.<init>()"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testEquals()","org.jfree.chart.plot.dial.AbstractDialLayer.setVisible(boolean)"
"org.jfree.chart.plot.dial.DialCapTest.testCloning()","org.jfree.chart.plot.dial.DialCap.clone()"
"org.jfree.chart.plot.dial.DialCapTest.testCloning()","org.jfree.chart.plot.dial.DialCap.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialCapTest.testCloning()","org.jfree.chart.plot.dial.DialCap.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.dial.DialBackgroundTest.testCloning()","org.jfree.chart.plot.dial.DialBackground.clone()"
"org.jfree.chart.plot.dial.DialCapTest.testSerialization()","org.jfree.chart.plot.dial.DialCap.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialCapTest.testSerialization()","org.jfree.chart.plot.dial.DialCap.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.dial.DialCapTest.testSerialization()","org.jfree.chart.plot.dial.DialCap.setFillPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialPlotTest.testLayerListener()","org.jfree.chart.plot.dial.DialPlot.addLayer(org.jfree.chart.plot.dial.DialLayer)"
"org.jfree.chart.plot.dial.DialPlotTest.testLayerListener()","org.jfree.chart.plot.dial.DialPlot.removeLayer(org.jfree.chart.plot.dial.DialLayer)"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testEquals()","org.jfree.chart.plot.dial.StandardDialRange.setLowerBound(double)"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testEquals()","org.jfree.chart.plot.dial.StandardDialRange.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testEquals()","org.jfree.chart.plot.dial.StandardDialRange.setUpperBound(double)"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPin()","org.jfree.chart.plot.dial.DialPointer.Pin.<init>()"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPin()","org.jfree.chart.plot.dial.DialPointer.Pin.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPin()","org.jfree.chart.plot.dial.DialPointer.Pin.setStroke(java.awt.Stroke)"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPointer()","org.jfree.chart.plot.dial.DialPointer.Pointer.<init>()"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPointer()","org.jfree.chart.plot.dial.DialPointer.Pointer.setFillPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPointer()","org.jfree.chart.plot.dial.DialPointer.Pointer.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPointer()","org.jfree.chart.plot.dial.DialPointer.Pointer.<init>(int)"
"org.jfree.chart.plot.dial.DialPointerTest.testEqualsPointer()","org.jfree.chart.plot.dial.DialPointer.Pointer.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testSerialization()","org.jfree.chart.plot.dial.DialTextAnnotation.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testSerialization()","org.jfree.chart.plot.dial.DialTextAnnotation.<init>(java.lang.String)"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testSerialization()","org.jfree.chart.plot.dial.DialTextAnnotation.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.DialCapTest.testEquals()","org.jfree.chart.plot.dial.DialCap.setRadius(double)"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testEquals()","org.jfree.chart.plot.dial.StandardDialFrame.setForegroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testEquals()","org.jfree.chart.plot.dial.StandardDialFrame.setRadius(double)"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testEquals()","org.jfree.chart.plot.dial.StandardDialFrame.setStroke(java.awt.Stroke)"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testEquals()","org.jfree.chart.plot.dial.StandardDialFrame.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testEquals()","org.jfree.chart.plot.dial.ArcDialFrame.setExtent(double)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testEquals()","org.jfree.chart.plot.dial.ArcDialFrame.setForegroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testEquals()","org.jfree.chart.plot.dial.ArcDialFrame.setInnerRadius(double)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testEquals()","org.jfree.chart.plot.dial.ArcDialFrame.setOuterRadius(double)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testEquals()","org.jfree.chart.plot.dial.ArcDialFrame.setStartAngle(double)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testEquals()","org.jfree.chart.plot.dial.ArcDialFrame.setStroke(java.awt.Stroke)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testEquals()","org.jfree.chart.plot.dial.ArcDialFrame.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.dial.DialPlotTest.testCapListener()","org.jfree.chart.plot.dial.DialPlot.setCap(org.jfree.chart.plot.dial.DialLayer)"
"org.jfree.chart.axis.NumberAxisTest.testXYAutoRange1()","org.jfree.chart.ChartFactory.createScatterPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.axis.NumberAxisTest.testXYAutoRange2()","org.jfree.chart.ChartFactory.createScatterPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.axis.LogAxisTest.testXYAutoRange2()","org.jfree.chart.ChartFactory.createScatterPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.axis.ValueAxisTest.testAxisMargins()","org.jfree.chart.ChartFactory.createScatterPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.axis.LogAxisTest.testXYAutoRange1()","org.jfree.chart.ChartFactory.createScatterPlot(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.LineAndShapeRenderer.getLegendItem(int, int)"
"org.jfree.chart.axis.LogAxisTest.testAutoRange1()","org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.JFreeChartTest.testSerialization3()","org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.axis.NumberAxisTest.testAutoRange1()","org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.axis.CategoryLabelPositionsTest.testEquals()","org.jfree.chart.axis.CategoryLabelPositions.equals(java.lang.Object)"
"org.jfree.chart.axis.AxisTest.testSerialization()","org.jfree.chart.axis.Axis.setAttributedLabel(java.text.AttributedString)"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testSerialization()","org.jfree.chart.plot.CombinedRangeCategoryPlot.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryAxisTest.testSerialization()","org.jfree.chart.axis.CategoryAxis.setTickLabelPaint(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.axis.SubCategoryAxisTest.testSerialization()","org.jfree.chart.axis.SubCategoryAxis.addSubCategory(java.lang.Comparable)"
"org.jfree.chart.axis.SubCategoryAxisTest.testSerialization()","org.jfree.chart.axis.SubCategoryAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.SubCategoryAxisTest.testSerialization()","org.jfree.chart.axis.SubCategoryAxis.<init>(java.lang.String)"
"org.jfree.chart.renderer.category.AreaRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.AreaRenderer.getLegendItem(int, int)"
"org.jfree.chart.axis.CategoryAxis3DTest.testSerialization()","org.jfree.chart.axis.CategoryAxis3D.<init>(java.lang.String)"
"org.jfree.chart.renderer.AbstractRendererTest.testOutlinePaintLookup()","org.jfree.chart.renderer.AbstractRenderer.getBaseOutlinePaint()"
"org.jfree.chart.renderer.AbstractRendererTest.testOutlinePaintLookup()","org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesOutlinePaint(boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testAxisRange()","org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.CategoryStepRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.CategoryStepRenderer.<init>()"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testSerialization()","org.jfree.chart.axis.ExtendedCategoryAxis.setSubLabelPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.LegendItem.getDatasetIndex()"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.LegendItem.getSeriesIndex()"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.BarRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.axis.CategoryLabelPosition.<init>(org.jfree.ui.RectangleAnchor, org.jfree.text.TextBlockAnchor, org.jfree.chart.axis.CategoryLabelWidthType, float)"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions(double)"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(double)"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.axis.CategoryAnchor.<init>(java.lang.String)"
"org.jfree.chart.axis.CategoryLabelPositionsTest.testSerialization()","org.jfree.chart.axis.CategoryLabelPositions.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryLabelPositionsTest.testSerialization()","org.jfree.chart.axis.CategoryLabelPosition.<init>(org.jfree.ui.RectangleAnchor, org.jfree.text.TextBlockAnchor, org.jfree.chart.axis.CategoryLabelWidthType, float)"
"org.jfree.chart.axis.CategoryLabelPositionsTest.testSerialization()","org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions(double)"
"org.jfree.chart.axis.CategoryLabelPositionsTest.testSerialization()","org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(double)"
"org.jfree.chart.axis.CategoryLabelPositionsTest.testHashCode()","org.jfree.chart.axis.CategoryLabelPositions.hashCode()"
"org.jfree.data.statistics.StatisticsTest.testCorrelation2()","org.jfree.data.statistics.Statistics.getCorrelation(java.lang.Number[], java.lang.Number[])"
"org.jfree.data.statistics.StatisticsTest.testCorrelation1()","org.jfree.data.statistics.Statistics.getCorrelation(java.lang.Number[], java.lang.Number[])"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYAreaRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>(int)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAngleGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAngleGridlinesVisible(boolean)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAngleLabelFont(java.awt.Font)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAngleLabelsVisible(boolean)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAngleTickUnit(org.jfree.chart.axis.TickUnit)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAxis(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setFixedLegendItems(org.jfree.chart.LegendItemCollection)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setRadiusGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setRadiusGridlinesVisible(boolean)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setRadiusMinorGridlinesVisible(boolean)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.addCornerTextItem(java.lang.String)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAngleGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setAngleLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.PolarPlotTest.testEquals()","org.jfree.chart.plot.PolarPlot.setRadiusGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.XYPlotTest.testCloning3()","org.jfree.chart.plot.XYPlot.setFixedLegendItems(org.jfree.chart.LegendItemCollection)"
"org.jfree.chart.plot.XYPlotTest.testCloning3()","org.jfree.chart.LegendItem.<init>(java.lang.String)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setDomainGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setDomainGridlinesVisible(boolean)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setDomainMinorGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setDomainMinorGridlinesVisible(boolean)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setDomainTickBandPaint(java.awt.Paint)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeCrosshairLockedOnData(boolean)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeCrosshairStroke(java.awt.Stroke)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeCrosshairValue(double)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeCrosshairVisible(boolean)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeGridlinesVisible(boolean)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeMinorGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeMinorGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeMinorGridlinesVisible(boolean)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeTickBandPaint(java.awt.Paint)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeZeroBaselineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setRangeZeroBaselineVisible(boolean)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setFixedLegendItems(org.jfree.chart.LegendItemCollection)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setQuadrantOrigin(java.awt.geom.Point2D)"
"org.jfree.chart.plot.XYPlotTest.testEquals()","org.jfree.chart.plot.XYPlot.setQuadrantPaint(int, java.awt.Paint)"
"org.jfree.chart.LegendItemTest.testCloning()","org.jfree.chart.LegendItem.clone()"
"org.jfree.chart.LegendItemTest.testCloning()","org.jfree.chart.LegendItem.<init>(java.lang.String)"
"org.jfree.chart.LegendItemCollectionTest.testSerialization()","org.jfree.chart.LegendItemCollection.equals(java.lang.Object)"
"org.jfree.chart.LegendItemTest.testSerialization()","org.jfree.chart.LegendItem.setLabelPaint(java.awt.Paint)"
"org.jfree.chart.LegendItemTest.testSerialization()","org.jfree.chart.LegendItem.setLinePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYDotRenderer.getLegendItem(int, int)"
"org.jfree.chart.LegendItemCollectionTest.testCloning()","org.jfree.chart.LegendItem.<init>(java.lang.String)"
"org.jfree.chart.LegendItemCollectionTest.testCloning()","org.jfree.chart.LegendItemCollection.clone()"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYAreaRenderer2.getLegendItem(int, int)"
"org.jfree.chart.ChartPanelTest.testSetMouseWheelEnabled()","org.jfree.chart.ChartPanel.isMouseWheelEnabled()"
"org.jfree.chart.ChartPanelTest.testSetMouseWheelEnabled()","org.jfree.chart.ChartPanel.setMouseWheelEnabled(boolean)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMaxOutlier(int, int)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMinOutlier(int, int)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getMedianValue(int, int)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getQ1Value(int, int)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getQ3Value(int, int)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getRangeBounds(boolean)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getY(int, int)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testGetRangeBounds()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getRangeBounds(boolean)"
"org.jfree.data.gantt.TaskTest.testEquals()","org.jfree.data.gantt.Task.setDescription(java.lang.String)"
"org.jfree.data.gantt.TaskTest.testEquals()","org.jfree.data.gantt.Task.setDuration(org.jfree.data.time.TimePeriod)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testCloning()","org.jfree.data.general.DefaultKeyedValueDataset.clone()"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testCloning()","org.jfree.data.general.DefaultKeyedValueDataset.<init>(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testCloning()","org.jfree.data.general.DefaultKeyedValueDataset.<init>(org.jfree.data.KeyedValue)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testCloning()","org.jfree.data.general.DefaultKeyedValueDataset.equals(java.lang.Object)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testCloneIndependence()","org.jfree.data.general.DefaultKeyedValueDataset.updateValue(java.lang.Number)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testCloneIndependence()","org.jfree.data.general.DefaultKeyedValueDataset.clone()"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testSerialization()","org.jfree.data.general.DefaultKeyedValueDataset.<init>(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testSerialization()","org.jfree.data.general.DefaultKeyedValueDataset.<init>(org.jfree.data.KeyedValue)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testSerialization()","org.jfree.data.general.DefaultKeyedValueDataset.equals(java.lang.Object)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testEquals()","org.jfree.data.general.DefaultKeyedValueDataset.<init>(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testEquals()","org.jfree.data.general.DefaultKeyedValueDataset.<init>(org.jfree.data.KeyedValue)"
"org.jfree.data.general.DefaultKeyedValueDatasetTest.testEquals()","org.jfree.data.general.DefaultKeyedValueDataset.equals(java.lang.Object)"
"org.jfree.data.xy.XYSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.XYSeriesCollection.removeSeries(int)"
"org.jfree.data.xy.XYSeriesTest.testSetKey()","org.jfree.data.xy.XYSeriesCollection.removeSeries(int)"
"org.jfree.data.xy.XYSeriesTest.testSetKey()","org.jfree.data.xy.XYSeriesCollection.removeSeries(org.jfree.data.xy.XYSeries)"
"org.jfree.data.xy.XYSeriesCollectionTest.testIndexOf()","org.jfree.data.xy.XYSeriesCollection.indexOf(org.jfree.data.xy.XYSeries)"
"org.jfree.chart.renderer.OutlierTest.testConstructor()","org.jfree.chart.renderer.Outlier.getRadius()"
"org.jfree.chart.renderer.OutlierTest.testConstructor()","org.jfree.chart.renderer.Outlier.getX()"
"org.jfree.chart.renderer.OutlierTest.testConstructor()","org.jfree.chart.renderer.Outlier.getY()"
"org.jfree.data.xy.DefaultXYZDatasetTest.testAddSeries()","org.jfree.data.xy.DefaultXYZDataset.getYValue(int, int)"
"org.jfree.data.xy.DefaultXYZDatasetTest.testAddSeries()","org.jfree.data.xy.DefaultXYZDataset.getSeriesKey(int)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testBug1766646A()","org.jfree.chart.renderer.xy.XYBlockRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.DefaultXYZDatasetTest.testGetSeriesKey()","org.jfree.data.xy.DefaultXYZDataset.getSeriesKey(int)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYBubbleRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testBug1766646B()","org.jfree.chart.renderer.xy.XYBlockRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMonthB()","org.jfree.data.time.Month.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMonthB()","org.jfree.data.time.Month.getFirstMillisecond()"
"org.jfree.chart.JFreeChartTest.testSerialization4()","org.jfree.chart.ChartFactory.createTimeSeriesChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.JFreeChartTest.testSerialization4()","org.jfree.data.time.TimeSeriesCollection.addSeries(org.jfree.data.time.TimeSeries)"
"org.jfree.chart.GanttChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.GanttChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMillisecondA()","org.jfree.data.time.Millisecond.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMillisecondA()","org.jfree.data.time.Millisecond.getLastMillisecond()"
"org.jfree.data.time.DateRangeTest.testEquals()","org.jfree.data.time.DateRange.<init>(java.util.Date, java.util.Date)"
"org.jfree.data.time.DateRangeTest.testImmutable()","org.jfree.data.time.DateRange.getLowerDate()"
"org.jfree.data.time.DateRangeTest.testImmutable()","org.jfree.data.time.DateRange.getUpperDate()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMonthA()","org.jfree.data.time.Month.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMonthA()","org.jfree.data.time.Month.getFirstMillisecond()"
"org.jfree.chart.GanttChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.GanttChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.GanttChartTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.plot.XYPlotTest.testSerialization2()","org.jfree.chart.labels.StandardXYToolTipGenerator.getTimeSeriesInstance()"
"org.jfree.chart.plot.XYPlotTest.testSerialization2()","org.jfree.chart.axis.DateAxis.DefaultTimeline.<init>()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateHourA()","org.jfree.data.time.Hour.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateHourA()","org.jfree.data.time.Hour.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testSetRange()","org.jfree.data.time.DateRange.getLowerDate()"
"org.jfree.chart.axis.DateAxisTest.testSetRange()","org.jfree.data.time.DateRange.getUpperDate()"
"org.jfree.chart.axis.DateAxisTest.testSetRange()","org.jfree.chart.axis.DateAxis.setRange(java.util.Date, java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.test1472942()","org.jfree.chart.axis.DateAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateTickUnit.addToDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateAxis.setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateAxis.setRange(java.util.Date, java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateTickUnit.<init>(int, int)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.data.time.Day.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.data.time.Day.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateTickUnit.<init>(int, int, int, int, java.text.DateFormat)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateTickUnit.<init>(int, int, java.text.DateFormat)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateTickUnit.intToUnitType(int)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.chart.axis.DateTickUnit.notNull(java.text.DateFormat)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayA()","org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearA()","org.jfree.data.time.Year.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearA()","org.jfree.data.time.Year.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearA()","org.jfree.chart.axis.DateTickUnit.addToDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearA()","org.jfree.chart.axis.DateAxis.setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearA()","org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit)"
"org.jfree.data.time.DateRangeTest.testSerialization()","org.jfree.data.time.DateRange.<init>(java.util.Date, java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateSecondA()","org.jfree.data.time.Second.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateSecondA()","org.jfree.data.time.Second.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateHourB()","org.jfree.data.time.Hour.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateHourB()","org.jfree.data.time.Hour.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateTickUnit.addToDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateAxis.setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateAxis.setRange(java.util.Date, java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateTickUnit.<init>(int, int)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.data.time.Day.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.data.time.Day.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateTickUnit.<init>(int, int, int, int, java.text.DateFormat)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateTickUnit.<init>(int, int, java.text.DateFormat)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateTickUnit.intToUnitType(int)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.chart.axis.DateTickUnit.notNull(java.text.DateFormat)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateDayB()","org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond()"
"org.jfree.data.time.DateRangeTest.testClone()","org.jfree.data.time.DateRange.<init>(java.util.Date, java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearB()","org.jfree.data.time.Year.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearB()","org.jfree.data.time.Year.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearB()","org.jfree.chart.axis.DateTickUnit.addToDate(java.util.Date)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearB()","org.jfree.chart.axis.DateAxis.setTickMarkPosition(org.jfree.chart.axis.DateTickMarkPosition)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateYearB()","org.jfree.chart.axis.DateAxis.setTickUnit(org.jfree.chart.axis.DateTickUnit)"
"org.jfree.chart.GanttChartTest.testReplaceDataset()","org.jfree.chart.plot.CategoryPlot.setDataset(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.XYStepChartTest.testReplaceDataset()","org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.TimeSeriesChartTest.testReplaceDataset()","org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateSecondB()","org.jfree.data.time.Second.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateSecondB()","org.jfree.data.time.Second.getLastMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMillisecondB()","org.jfree.data.time.Millisecond.getFirstMillisecond()"
"org.jfree.chart.axis.DateAxisTest.testPreviousStandardDateMillisecondB()","org.jfree.data.time.Millisecond.getLastMillisecond()"
"org.jfree.chart.title.TextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.getExpandToFitSpace()"
"org.jfree.chart.title.TextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setExpandToFitSpace(boolean)"
"org.jfree.chart.title.TextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setMaximumLinesToDisplay(int)"
"org.jfree.chart.title.TextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setTextAlignment(org.jfree.ui.HorizontalAlignment)"
"org.jfree.chart.title.TextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setToolTipText(java.lang.String)"
"org.jfree.chart.title.TextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setURLText(java.lang.String)"
"org.jfree.chart.title.TextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testDrawWithNullLegendLabels()","org.jfree.chart.plot.PiePlot.setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)"
"org.jfree.chart.plot.PiePlot3DTest.testDrawWithNullDataset()","org.jfree.chart.ChartFactory.createPieChart3D(java.lang.String, org.jfree.data.general.PieDataset, boolean, boolean, boolean)"
"org.jfree.chart.title.DateTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.title.DateTitleTest.testEquals()","org.jfree.chart.title.DateTitle.<init>()"
"org.jfree.chart.title.DateTitleTest.testEquals()","org.jfree.chart.title.DateTitle.<init>(int)"
"org.jfree.chart.title.DateTitleTest.testEquals()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint)"
"org.jfree.chart.title.DateTitleTest.testEquals()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint, org.jfree.ui.RectangleEdge, org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, org.jfree.ui.RectangleInsets)"
"org.jfree.chart.title.DateTitleTest.testCloning()","org.jfree.chart.title.DateTitle.<init>()"
"org.jfree.chart.title.DateTitleTest.testCloning()","org.jfree.chart.title.DateTitle.<init>(int)"
"org.jfree.chart.title.DateTitleTest.testCloning()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint)"
"org.jfree.chart.title.DateTitleTest.testCloning()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint, org.jfree.ui.RectangleEdge, org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, org.jfree.ui.RectangleInsets)"
"org.jfree.chart.title.DateTitleTest.testCloning()","org.jfree.chart.title.TextTitle.clone()"
"org.jfree.chart.title.DateTitleTest.testHashcode()","org.jfree.chart.title.DateTitle.<init>()"
"org.jfree.chart.title.DateTitleTest.testHashcode()","org.jfree.chart.title.DateTitle.<init>(int)"
"org.jfree.chart.title.DateTitleTest.testHashcode()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint)"
"org.jfree.chart.title.DateTitleTest.testHashcode()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint, org.jfree.ui.RectangleEdge, org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, org.jfree.ui.RectangleInsets)"
"org.jfree.chart.title.DateTitleTest.testHashcode()","org.jfree.chart.title.TextTitle.hashCode()"
"org.jfree.chart.title.DateTitleTest.testSerialization()","org.jfree.chart.title.DateTitle.<init>()"
"org.jfree.chart.title.DateTitleTest.testSerialization()","org.jfree.chart.title.DateTitle.<init>(int)"
"org.jfree.chart.title.DateTitleTest.testSerialization()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint)"
"org.jfree.chart.title.DateTitleTest.testSerialization()","org.jfree.chart.title.DateTitle.<init>(int, java.util.Locale, java.awt.Font, java.awt.Paint, org.jfree.ui.RectangleEdge, org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, org.jfree.ui.RectangleInsets)"
"org.jfree.data.category.SlidingCategoryDatasetTest.testEquals()","org.jfree.data.category.SlidingCategoryDataset.setMaximumCategoryCount(int)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testEquals()","org.jfree.data.category.DefaultIntervalCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testEquals()","org.jfree.data.category.DefaultIntervalCategoryDataset.generateKeys(int, java.lang.String)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testCloning2()","org.jfree.data.category.DefaultIntervalCategoryDataset.clone()"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testCloning2()","org.jfree.data.category.DefaultIntervalCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testCloning()","org.jfree.data.category.DefaultIntervalCategoryDataset.clone()"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testCloning()","org.jfree.data.category.DefaultIntervalCategoryDataset.setStartValue(int, java.lang.Comparable, java.lang.Number)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testCloning()","org.jfree.data.category.DefaultIntervalCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSerialization()","org.jfree.data.resources.DataPackageResources.getContents()"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSerialization()","org.jfree.data.category.DefaultIntervalCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.time.TimeTableXYDatasetTest.testClear()","org.jfree.data.time.TimeTableXYDataset.clear()"
"org.jfree.data.time.TimeTableXYDatasetTest.testClear()","org.jfree.data.time.TimeTableXYDataset.getItemCount()"
"org.jfree.data.time.TimeTableXYDatasetTest.testClear()","org.jfree.data.time.TimeTableXYDataset.getSeriesCount()"
"org.jfree.data.time.TimeTableXYDatasetTest.testClone()","org.jfree.data.time.TimeTableXYDataset.clone()"
"org.jfree.data.time.TimeTableXYDatasetTest.testStandard()","org.jfree.data.time.TimeTableXYDataset.getItemCount()"
"org.jfree.data.time.TimeTableXYDatasetTest.testStandard()","org.jfree.data.time.TimeTableXYDataset.getSeriesCount()"
"org.jfree.data.time.TimeTableXYDatasetTest.testSerialization()","org.jfree.data.time.TimeTableXYDataset.equals(java.lang.Object)"
"org.jfree.data.time.TimeTableXYDatasetTest.testEquals()","org.jfree.data.time.TimeTableXYDataset.<init>(java.util.TimeZone)"
"org.jfree.data.time.TimeTableXYDatasetTest.testEquals()","org.jfree.data.time.TimeTableXYDataset.getDomainIsPointsInTime()"
"org.jfree.data.time.TimeTableXYDatasetTest.testEquals()","org.jfree.data.time.TimeTableXYDataset.setDomainIsPointsInTime(boolean)"
"org.jfree.data.time.TimeTableXYDatasetTest.testGetTimePeriod()","org.jfree.data.time.TimeTableXYDataset.getTimePeriod(int)"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testSerialization()","org.jfree.chart.plot.CombinedRangeXYPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.XYPlotTest.testCloning2()","org.jfree.chart.plot.XYPlot.clone()"
"org.jfree.chart.plot.XYPlotTest.testCloning2()","org.jfree.chart.plot.XYPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testSetNullRenderer()","org.jfree.chart.plot.XYPlot.setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testCloning()","org.jfree.chart.plot.CombinedDomainXYPlot.clone()"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.LegendItem.getDatasetIndex()"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.LegendItem.getSeriesIndex()"
"org.jfree.chart.plot.XYPlotTest.testMapDatasetToDomainAxis()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testMapDatasetToDomainAxis()","org.jfree.chart.plot.XYPlot.setDomainAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.ChartPanelTest.test2502355_restoreAutoDomainBounds()","org.jfree.chart.ChartPanel.restoreAutoDomainBounds()"
"org.jfree.chart.plot.XYPlotTest.testAddRangeMarker()","org.jfree.chart.plot.XYPlot.clearRangeMarkers()"
"org.jfree.chart.plot.XYPlotTest.testAddRangeMarker()","org.jfree.chart.plot.XYPlot.addRangeMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.XYPlotTest.testCloning_QuadrantOrigin()","org.jfree.chart.plot.XYPlot.getQuadrantOrigin()"
"org.jfree.chart.plot.XYPlotTest.testCloning_QuadrantOrigin()","org.jfree.chart.plot.XYPlot.setQuadrantOrigin(java.awt.geom.Point2D)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindRangeBounds()","org.jfree.chart.ChartFactory.createStackedXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.TableXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.RendererXYPackageUtils.createTestTableXYDataset()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.<init>(double)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.XYBarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.XYBarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testEquals()","org.jfree.chart.plot.CombinedRangeXYPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.XYPlotTest.testRemoveRangeMarker()","org.jfree.chart.plot.XYPlot.removeRangeMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testCloning()","org.jfree.chart.plot.CombinedRangeXYPlot.clone()"
"org.jfree.chart.plot.XYPlotTest.testRendererIndices()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testGetRendererForDataset2()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testConstructor1()","org.jfree.chart.plot.CombinedDomainXYPlot.<init>(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList5()","org.jfree.chart.plot.XYPlot.setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList5()","org.jfree.chart.renderer.xy.XYBarRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList5()","org.jfree.chart.plot.XYPlot.<init>()"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList5()","org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.title.LegendTitleTest.testEquals()","org.jfree.chart.title.LegendTitle.setLegendItemGraphicAnchor(org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.title.LegendTitleTest.testEquals()","org.jfree.chart.title.LegendTitle.setLegendItemGraphicEdge(org.jfree.ui.RectangleEdge)"
"org.jfree.chart.title.LegendTitleTest.testEquals()","org.jfree.chart.title.LegendTitle.setLegendItemGraphicLocation(org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.title.LegendTitleTest.testEquals()","org.jfree.chart.title.LegendTitle.setSortOrder(org.jfree.util.SortOrder)"
"org.jfree.chart.plot.XYPlotTest.testCloning()","org.jfree.chart.plot.XYPlot.clone()"
"org.jfree.chart.ChartPanelTest.test2502355_zoomOutRange()","org.jfree.chart.ChartPanel.zoomOutRange(double, double)"
"org.jfree.chart.ChartPanelTest.test2502355_zoomOutBoth()","org.jfree.chart.ChartPanel.zoomOutBoth(double, double)"
"org.jfree.chart.plot.XYPlotTest.testGetRendererForDataset()","org.jfree.chart.plot.XYPlot.setDataset(int, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.plot.XYPlotTest.testGetRendererForDataset()","org.jfree.chart.plot.XYPlot.<init>()"
"org.jfree.chart.plot.XYPlotTest.testGetRendererForDataset()","org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.plot.XYPlotTest.testGetRendererForDataset()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeXYPlot.<init>()"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeXYPlot.add(org.jfree.chart.plot.XYPlot)"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeXYPlot.remove(org.jfree.chart.plot.XYPlot)"
"org.jfree.chart.plot.CombinedRangeXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeXYPlot.getSubplots()"
"org.jfree.chart.plot.XYPlotTest.testDomainMarkerIndices()","org.jfree.chart.plot.XYPlot.addDomainMarker(int, org.jfree.chart.plot.Marker, org.jfree.ui.Layer)"
"org.jfree.chart.ChartPanelTest.test2502355_restoreAutoRangeBounds()","org.jfree.chart.ChartPanel.restoreAutoRangeBounds()"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testSerialization()","org.jfree.chart.plot.CombinedDomainXYPlot.equals(java.lang.Object)"
"org.jfree.chart.title.LegendTitleTest.testCloning()","org.jfree.chart.title.Title.clone()"
"org.jfree.chart.plot.XYPlotTest.testGetRangeAxisForDataset()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testGetRangeAxisForDataset()","org.jfree.chart.plot.XYPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testGetRangeAxisForDataset()","org.jfree.chart.plot.XYPlot.getRangeAxisForDataset(int)"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testEquals()","org.jfree.chart.plot.CombinedDomainXYPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.XYPlotTest.testGetDomainAxisForDataset()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testGetDomainAxisForDataset()","org.jfree.chart.plot.XYPlot.setDomainAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList2()","org.jfree.chart.plot.XYPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList2()","org.jfree.chart.plot.XYPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList()","org.jfree.chart.plot.XYPlot.setDomainAxis(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.RendererXYPackageUtils.createTestTableXYDataset()"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.getLegendItem(int, int)"
"org.jfree.chart.plot.XYPlotTest.testAddDomainMarker()","org.jfree.chart.plot.XYPlot.addDomainMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.XYPlotTest.testAddDomainMarker()","org.jfree.chart.plot.XYPlot.clearDomainMarkers()"
"org.jfree.chart.title.LegendTitleTest.testSerialization()","org.jfree.chart.title.LegendTitle.getSources()"
"org.jfree.chart.ChartPanelTest.test2502355_zoomInBoth()","org.jfree.chart.ChartPanel.zoomInBoth(double, double)"
"org.jfree.chart.plot.XYPlotTest.testCloning_QuadrantPaint()","org.jfree.chart.plot.XYPlot.setQuadrantPaint(int, java.awt.Paint)"
"org.jfree.chart.ChartPanelTest.test2502355_zoomInRange()","org.jfree.chart.ChartPanel.zoomInRange(double, double)"
"org.jfree.chart.plot.XYPlotTest.testAxisIndices()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testAxisIndices()","org.jfree.chart.plot.XYPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testAxisIndices()","org.jfree.chart.plot.XYPlot.setDomainAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.ChartPanelTest.test2502355_zoomOutDomain()","org.jfree.chart.ChartPanel.zoomOutDomain(double, double)"
"org.jfree.chart.plot.XYPlotTest.testAxisLocationIndices()","org.jfree.chart.plot.XYPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testAxisLocationIndices()","org.jfree.chart.plot.XYPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testMapDatasetToRangeAxis()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testMapDatasetToRangeAxis()","org.jfree.chart.plot.XYPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testMapDatasetToRangeAxis()","org.jfree.chart.plot.XYPlot.getRangeAxisForDataset(int)"
"org.jfree.chart.plot.XYPlotTest.testRangeMarkerIndices()","org.jfree.chart.plot.XYPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.ui.Layer)"
"org.jfree.chart.plot.XYPlotTest.testRangeMarkerIndices()","org.jfree.ui.LengthAdjustmentType.<init>(java.lang.String)"
"org.jfree.chart.ChartPanelTest.test2502355_zoomInDomain()","org.jfree.chart.ChartPanel.zoomInDomain(double, double)"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainXYPlot.<init>()"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainXYPlot.add(org.jfree.chart.plot.XYPlot)"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainXYPlot.remove(org.jfree.chart.plot.XYPlot)"
"org.jfree.chart.plot.CombinedDomainXYPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedDomainXYPlot.getSubplots()"
"org.jfree.chart.ChartPanelTest.test2502355_zoom()","org.jfree.chart.ChartPanel.zoom(java.awt.geom.Rectangle2D)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.RendererXYPackageUtils.createTestXYSeriesCollection()"
"org.jfree.chart.plot.XYPlotTest.testDatasetIndices()","org.jfree.data.xy.XYSeriesCollection.equals(java.lang.Object)"
"org.jfree.chart.plot.XYPlotTest.testDatasetIndices()","org.jfree.chart.renderer.xy.DefaultXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testRemoveAnnotation()","org.jfree.chart.plot.XYPlot.removeAnnotation(org.jfree.chart.annotations.XYAnnotation)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindDomainBounds()","org.jfree.chart.ChartFactory.createXYBarChart(java.lang.String, java.lang.String, boolean, java.lang.String, org.jfree.data.xy.IntervalXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.RendererXYPackageUtils.createTestXYSeriesCollection()"
"org.jfree.chart.plot.XYPlotTest.testSerialization1()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testSerialization1()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.plot.XYPlotTest.testSerialization1()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.plot.MarkerTest.testListenersWithXYPlot()","org.jfree.chart.plot.XYPlot.addDomainMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.MarkerTest.testListenersWithXYPlot()","org.jfree.chart.plot.XYPlot.clearDomainMarkers()"
"org.jfree.chart.plot.MarkerTest.testListenersWithXYPlot()","org.jfree.chart.plot.XYPlot.clearRangeMarkers()"
"org.jfree.chart.plot.MarkerTest.testListenersWithXYPlot()","org.jfree.chart.plot.XYPlot.addRangeMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList3()","org.jfree.chart.plot.XYPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList3()","org.jfree.chart.plot.XYPlot.setRangeAxis(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.XYPlotTest.testEquals_ObjectList4()","org.jfree.chart.plot.XYPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testRemoveDomainMarker()","org.jfree.chart.plot.XYPlot.removeDomainMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.XYPlotTest.testSetRenderer()","org.jfree.chart.plot.MyPlotChangeListener.<init>()"
"org.jfree.chart.plot.XYPlotTest.testSetRenderer()","org.jfree.chart.plot.MyPlotChangeListener.getEvent()"
"org.jfree.chart.ChartPanelTest.test2502355_restoreAutoBounds()","org.jfree.chart.ChartPanel.restoreAutoBounds()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testFindRangeBounds()","org.jfree.chart.ChartFactory.createStackedXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.TableXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testFindRangeBounds()","org.jfree.chart.renderer.xy.RendererXYPackageUtils.createTestTableXYDataset()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testFindRangeBounds()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testFindRangeBounds()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.<init>()"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.<init>()"
"org.jfree.chart.plot.XYPlotTest.testCloneIndependence()","org.jfree.chart.axis.Axis.setLabel(java.lang.String)"
"org.jfree.chart.plot.XYPlotTest.testCloneIndependence()","org.jfree.chart.plot.XYPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testCloneIndependence()","org.jfree.chart.plot.XYPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.XYPlotTest.testCloneIndependence()","org.jfree.chart.renderer.AbstractRenderer.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindDomainBounds()","org.jfree.chart.ChartFactory.createStackedXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.TableXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.RendererXYPackageUtils.createTestTableXYDataset()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.<init>(double)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.XYBarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.XYBarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.plot.XYPlotTest.testGetLegendItems()","org.jfree.chart.plot.XYPlot.getLegendItems()"
"org.jfree.chart.plot.XYPlotTest.testGetLegendItems()","org.jfree.chart.plot.XYPlot.setDataset(int, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.plot.XYPlotTest.testGetLegendItems()","org.jfree.chart.plot.XYPlot.<init>()"
"org.jfree.chart.plot.XYPlotTest.testGetLegendItems()","org.jfree.chart.plot.XYPlot.setRenderer(int, org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.ChartPanelTest.testSetChart()","org.jfree.chart.ChartPanel.getChart()"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testFindRangeBounds()","org.jfree.chart.ChartFactory.createStackedXYAreaChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.xy.TableXYDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.RendererXYPackageUtils.createTestTableXYDataset()"
"org.jfree.chart.plot.XYPlotTest.testBug2817504()","org.jfree.chart.plot.XYPlot.clone()"
"org.jfree.chart.plot.XYPlotTest.testBug2817504()","org.jfree.chart.plot.XYPlot.setRenderer(org.jfree.chart.renderer.xy.XYItemRenderer)"
"org.jfree.chart.title.LegendTitleTest.testHashcode()","org.jfree.chart.title.Title.hashCode()"
"org.jfree.data.time.TimeSeriesTest.testGetMinY2()","org.jfree.data.time.TimeSeries.clear()"
"org.jfree.data.time.TimeSeriesTest.testGetMinY2()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, double)"
"org.jfree.data.time.TimeSeriesTest.testGetMaxY2()","org.jfree.data.time.TimeSeries.clear()"
"org.jfree.data.time.TimeSeriesTest.testGetMaxY2()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, double)"
"org.jfree.data.time.TimeSeriesTest.testClone()","org.jfree.data.time.TimeSeries.update(org.jfree.data.time.RegularTimePeriod, java.lang.Number)"
"org.jfree.data.time.TimeSeriesTest.testClone()","org.jfree.data.time.TimeSeries.clone()"
"org.jfree.data.time.TimeSeriesTest.testCreateCopy2()","org.jfree.data.time.TimeSeries.createCopy(int, int)"
"org.jfree.data.time.TimeSeriesTest.testCreateCopy3()","org.jfree.data.time.TimeSeries.createCopy(int, int)"
"org.jfree.data.time.TimeSeriesTest.testAdd()","org.jfree.data.time.TimeSeries.setMaximumItemCount(int)"
"org.jfree.data.time.TimeSeriesTest.testCreateCopy1()","org.jfree.data.time.TimeSeries.createCopy(org.jfree.data.time.RegularTimePeriod, org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.MovingAverageTest.test1()","org.jfree.data.time.MovingAverage.createMovingAverage(org.jfree.data.time.TimeSeries, java.lang.String, int, int)"
"org.jfree.data.time.TimeSeriesTest.testGetIndex()","org.jfree.data.time.TimeSeries.getIndex(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.TimeSeriesTest.testGetIndex()","org.jfree.data.time.TimeSeries.<init>(java.lang.Comparable, java.lang.Class)"
"org.jfree.data.time.TimeSeriesTest.testGetIndex()","org.jfree.data.time.TimeSeries.<init>(java.lang.Comparable, java.lang.String, java.lang.String, java.lang.Class)"
"org.jfree.data.time.TimeSeriesTest.testUpdate_RegularTimePeriod()","org.jfree.data.time.TimeSeries.update(org.jfree.data.time.RegularTimePeriod, double)"
"org.jfree.data.time.TimeSeriesTest.testUpdate_RegularTimePeriod()","org.jfree.data.time.TimeSeries.update(org.jfree.data.time.RegularTimePeriod, java.lang.Number)"
"org.jfree.data.time.TimeSeriesTest.testAdd_TimeSeriesDataItem()","org.jfree.data.time.TimeSeries.getDataItem(int)"
"org.jfree.data.time.TimeSeriesTest.testAdd_TimeSeriesDataItem()","org.jfree.data.time.TimeSeries.add(org.jfree.data.time.TimeSeriesDataItem)"
"org.jfree.data.time.TimeSeriesTest.testGetDataItem1()","org.jfree.data.time.TimeSeries.getDataItem(int)"
"org.jfree.data.time.TimeSeriesTest.testGetMaxY()","org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number)"
"org.jfree.data.time.TimeSeriesTest.testGetMaxY()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, java.lang.Number)"
"org.jfree.data.time.TimeSeriesTest.testGetMaxY()","org.jfree.data.time.TimeSeries.getMaxY()"
"org.jfree.data.time.TimeSeriesTest.testAddOrUpdate3()","org.jfree.data.time.TimeSeries.getTimePeriodClass()"
"org.jfree.data.time.TimeSeriesTest.testDelete3()","org.jfree.data.time.TimeSeries.delete(int, int)"
"org.jfree.data.time.TimeSeriesTest.testClone2()","org.jfree.data.time.TimeSeries.clone()"
"org.jfree.data.time.TimeSeriesTest.testDelete_RegularTimePeriod()","org.jfree.data.time.TimeSeries.delete(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.TimeSeriesTest.testBug3446965()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, double)"
"org.jfree.data.time.TimeSeriesTest.testBug3446965()","org.jfree.data.time.TimeSeries.getMaxY()"
"org.jfree.data.time.TimeSeriesTest.testBug3446965()","org.jfree.data.time.TimeSeries.getMinY()"
"org.jfree.data.time.TimeSeriesTest.testDelete2()","org.jfree.data.time.TimeSeries.delete(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.TimeSeriesTest.testBug1832432()","org.jfree.data.time.TimeSeries.clone()"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems4()","org.jfree.data.time.TimeSeries.setMaximumItemAge(long)"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems5()","org.jfree.data.time.TimeSeries.removeAgedItems(long, boolean)"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems5()","org.jfree.data.time.TimeSeries.setMaximumItemAge(long)"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems()","org.jfree.data.time.TimeSeries.setMaximumItemAge(long)"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems()","org.jfree.data.time.TimeSeries.getMaximumItemAge()"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems()","org.jfree.data.time.TimeSeries.getMaximumItemCount()"
"org.jfree.data.time.TimeSeriesTest.testFindValueRange2()","org.jfree.data.time.TimeSeries.findValueRange(org.jfree.data.Range, org.jfree.data.time.TimePeriodAnchor, java.util.TimeZone)"
"org.jfree.data.time.TimeSeriesTest.testDelete()","org.jfree.data.time.TimeSeries.delete(int, int)"
"org.jfree.data.time.TimeSeriesTest.testDelete()","org.jfree.data.time.TimeSeries.getValue(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.TimeSeriesTest.testFindValueRange()","org.jfree.data.time.TimeSeries.findValueRange()"
"org.jfree.data.time.TimeSeriesTest.testAddOrUpdate4()","org.jfree.data.time.TimeSeries.getValue(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.TimeSeriesTest.testAddOrUpdate4()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, double)"
"org.jfree.data.time.TimeSeriesTest.testAddOrUpdate()","org.jfree.data.time.TimeSeries.setMaximumItemCount(int)"
"org.jfree.data.time.TimeSeriesTest.testAddOrUpdate()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, double)"
"org.jfree.data.time.TimeSeriesTest.testBug1864222()","org.jfree.data.time.TimeSeries.createCopy(org.jfree.data.time.RegularTimePeriod, org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.TimeSeriesTest.testSetMaximumItemCount()","org.jfree.data.time.TimeSeries.getDataItem(int)"
"org.jfree.data.time.TimeSeriesTest.testSetMaximumItemCount()","org.jfree.data.time.TimeSeries.setMaximumItemCount(int)"
"org.jfree.data.time.TimeSeriesTest.testClear()","org.jfree.data.time.TimeSeries.clear()"
"org.jfree.data.time.TimeSeriesTest.testAddValue()","org.jfree.data.time.TimeSeries.getValue(int)"
"org.jfree.data.time.TimeSeriesTest.testAddOrUpdate2()","org.jfree.data.time.TimeSeries.setMaximumItemCount(int)"
"org.jfree.data.time.TimeSeriesTest.testAddOrUpdate2()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, double)"
"org.jfree.data.time.TimeSeriesTest.testEquals()","org.jfree.data.time.TimeSeries.setMaximumItemAge(long)"
"org.jfree.data.time.TimeSeriesTest.testEquals()","org.jfree.data.time.TimeSeries.setMaximumItemCount(int)"
"org.jfree.data.time.TimeSeriesTest.testEquals()","org.jfree.data.time.TimeSeries.equals(java.lang.Object)"
"org.jfree.data.time.TimeSeriesTest.testEquals()","org.jfree.data.general.Series.setKey(java.lang.Comparable)"
"org.jfree.data.time.TimeSeriesTest.testSerialization()","org.jfree.data.time.TimeSeries.equals(java.lang.Object)"
"org.jfree.data.time.TimeSeriesTest.testSerialization()","org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number)"
"org.jfree.data.time.TimeSeriesTest.testBug1075255()","org.jfree.data.time.TimeSeries.addAndOrUpdate(org.jfree.data.time.TimeSeries)"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems2()","org.jfree.data.time.TimeSeries.removeAgedItems(long, boolean)"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems2()","org.jfree.data.time.TimeSeries.setMaximumItemAge(long)"
"org.jfree.data.time.TimeSeriesTest.testHashCode()","org.jfree.data.time.TimeSeries.hashCode()"
"org.jfree.data.time.TimeSeriesTest.testGetMinY()","org.jfree.data.time.TimeSeries.add(org.jfree.data.time.RegularTimePeriod, java.lang.Number)"
"org.jfree.data.time.TimeSeriesTest.testGetMinY()","org.jfree.data.time.TimeSeries.addOrUpdate(org.jfree.data.time.RegularTimePeriod, java.lang.Number)"
"org.jfree.data.time.TimeSeriesTest.testGetMinY()","org.jfree.data.time.TimeSeries.getMinY()"
"org.jfree.chart.title.ImageTitleTest.testCloning()","org.jfree.chart.title.ImageTitle.equals(java.lang.Object)"
"org.jfree.chart.title.ImageTitleTest.testCloning()","org.jfree.chart.title.ImageTitle.<init>(java.awt.Image)"
"org.jfree.chart.title.ImageTitleTest.testCloning()","org.jfree.chart.title.ImageTitle.<init>(java.awt.Image, int, int, org.jfree.ui.RectangleEdge, org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, org.jfree.ui.RectangleInsets)"
"org.jfree.chart.title.TextTitleTest.testCloning()","org.jfree.chart.title.TextTitle.clone()"
"org.jfree.chart.title.CompositeTitleTest.testCloning()","org.jfree.chart.title.CompositeTitle.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.title.CompositeTitleTest.testCloning()","org.jfree.chart.title.CompositeTitle.equals(java.lang.Object)"
"org.jfree.chart.title.CompositeTitleTest.testCloning()","org.jfree.chart.title.CompositeTitle.getContainer()"
"org.jfree.chart.title.CompositeTitleTest.testCloning()","org.jfree.chart.block.BlockContainer.<init>()"
"org.jfree.chart.title.CompositeTitleTest.testCloning()","org.jfree.chart.title.CompositeTitle.<init>(org.jfree.chart.block.BlockContainer)"
"org.jfree.chart.title.ShortTextTitleTest.testCloning()","org.jfree.chart.title.ShortTextTitle.<init>(java.lang.String)"
"org.jfree.chart.title.ShortTextTitleTest.testCloning()","org.jfree.chart.title.TextTitle.clone()"
"org.jfree.chart.title.ShortTextTitleTest.testCloning()","org.jfree.chart.title.TextTitle.setText(java.lang.String)"
"org.jfree.chart.title.PaintScaleLegendTest.testCloning()","org.jfree.chart.title.PaintScaleLegend.<init>(org.jfree.chart.renderer.PaintScale, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.title.PaintScaleLegendTest.testCloning()","org.jfree.chart.title.PaintScaleLegend.equals(java.lang.Object)"
"org.jfree.chart.title.PaintScaleLegendTest.testCloning()","org.jfree.chart.renderer.GrayPaintScale.getLowerBound()"
"org.jfree.chart.title.PaintScaleLegendTest.testCloning()","org.jfree.chart.renderer.GrayPaintScale.getUpperBound()"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setMajorTickTimePeriodClass(java.lang.Class)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setMinorTickMarkPaint(java.awt.Paint)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setMinorTickMarkStroke(java.awt.Stroke)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setMinorTickMarksVisible(boolean)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setMinorTickTimePeriodClass(java.lang.Class)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setAutoRangeTimePeriodClass(java.lang.Class)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setFirst(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setLabelInfo(org.jfree.chart.axis.PeriodAxisLabelInfo[])"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setLast(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.chart.axis.PeriodAxisTest.testEquals()","org.jfree.chart.axis.PeriodAxis.setTimeZone(java.util.TimeZone)"
"org.jfree.chart.axis.PeriodAxisTest.testCloning()","org.jfree.chart.axis.PeriodAxis.clone()"
"org.jfree.chart.axis.PeriodAxisTest.testCloning()","org.jfree.chart.axis.PeriodAxis.setAutoRangeTimePeriodClass(java.lang.Class)"
"org.jfree.chart.axis.PeriodAxisTest.testCloning()","org.jfree.chart.axis.PeriodAxis.setFirst(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.chart.axis.PeriodAxisTest.testCloning()","org.jfree.chart.axis.PeriodAxis.setLabelInfo(org.jfree.chart.axis.PeriodAxisLabelInfo[])"
"org.jfree.chart.axis.PeriodAxisTest.testCloning()","org.jfree.chart.axis.PeriodAxis.setLast(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.chart.axis.PeriodAxisTest.testCloning()","org.jfree.chart.axis.PeriodAxis.setTimeZone(java.util.TimeZone)"
"org.jfree.chart.axis.PeriodAxisTest.test1932146()","org.jfree.data.time.DateRange.<init>(double, double)"
"org.jfree.chart.axis.PeriodAxisTest.testEqualsWithLocale()","org.jfree.chart.axis.PeriodAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.PeriodAxisTest.testEqualsWithLocale()","org.jfree.chart.axis.PeriodAxis.<init>(java.lang.String, org.jfree.data.time.RegularTimePeriod, org.jfree.data.time.RegularTimePeriod, java.util.TimeZone, java.util.Locale)"
"org.jfree.chart.axis.PeriodAxisTest.testEqualsWithLocale()","org.jfree.data.time.RegularTimePeriod.downsize(java.lang.Class)"
"org.jfree.chart.axis.PeriodAxisTest.testSerialization()","org.jfree.chart.axis.PeriodAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.PeriodAxisTest.testSerialization()","org.jfree.chart.axis.PeriodAxis.<init>(java.lang.String)"
"org.jfree.chart.axis.PeriodAxisTest.testSerialization()","org.jfree.chart.axis.PeriodAxis.<init>(java.lang.String, org.jfree.data.time.RegularTimePeriod, org.jfree.data.time.RegularTimePeriod)"
"org.jfree.chart.axis.PeriodAxisTest.testSerialization()","org.jfree.chart.axis.PeriodAxis.<init>(java.lang.String, org.jfree.data.time.RegularTimePeriod, org.jfree.data.time.RegularTimePeriod, java.util.TimeZone, java.util.Locale)"
"org.jfree.chart.axis.PeriodAxisTest.testSerialization()","org.jfree.data.time.RegularTimePeriod.downsize(java.lang.Class)"
"org.jfree.chart.axis.PeriodAxisTest.test2490803()","org.jfree.chart.axis.PeriodAxis.setRange(org.jfree.data.Range, boolean, boolean)"
"org.jfree.chart.axis.PeriodAxisTest.testHashCode()","org.jfree.chart.axis.PeriodAxis.hashCode()"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_LogAxis()","org.jfree.chart.axis.LogAxis.<init>()"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_LogAxis()","org.jfree.chart.plot.PolarPlot.setAngleOffset(double)"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_LogAxis()","org.jfree.chart.plot.PolarPlot.setMargin(int)"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_LogAxis()","org.jfree.chart.plot.PolarPlot.translateToJava2D(double, double, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_NumberAxis()","org.jfree.chart.plot.PolarPlot.setAngleOffset(double)"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_NumberAxis()","org.jfree.chart.plot.PolarPlot.setMargin(int)"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_NumberAxis()","org.jfree.chart.plot.PolarPlot.translateToJava2D(double, double, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)"
"org.jfree.chart.renderer.category.GanttRendererTest.testSerialization()","org.jfree.chart.renderer.category.GanttRenderer.setCompletePaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.GanttRendererTest.testSerialization()","org.jfree.chart.renderer.category.GanttRenderer.setIncompletePaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.GanttRendererTest.testSerialization()","org.jfree.chart.renderer.category.GanttRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.GanttRendererTest.testEquals()","org.jfree.chart.renderer.category.GanttRenderer.setEndPercent(double)"
"org.jfree.chart.renderer.category.GanttRendererTest.testEquals()","org.jfree.chart.renderer.category.GanttRenderer.setStartPercent(double)"
"org.jfree.chart.renderer.category.GanttRendererTest.testEquals()","org.jfree.chart.renderer.category.GanttRenderer.setCompletePaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.GanttRendererTest.testEquals()","org.jfree.chart.renderer.category.GanttRenderer.setIncompletePaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.GanttRendererTest.testCloning()","org.jfree.chart.renderer.category.GanttRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.GanttRendererTest.testCloning()","org.jfree.chart.renderer.category.GanttRenderer.<init>()"
"org.jfree.chart.renderer.category.GanttRendererTest.testHashcode()","org.jfree.chart.renderer.category.GanttRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.GanttRendererTest.testHashcode()","org.jfree.chart.renderer.category.GanttRenderer.<init>()"
"org.jfree.data.statistics.HistogramDatasetTest.testGetSeriesKey()","org.jfree.data.statistics.HistogramDataset.getSeriesKey(int)"
"org.jfree.data.statistics.HistogramDatasetTest.testEquals()","org.jfree.data.statistics.HistogramDataset.equals(java.lang.Object)"
"org.jfree.data.statistics.HistogramDatasetTest.testBins()","org.jfree.data.statistics.HistogramDataset.addSeries(java.lang.Comparable, double[], int)"
"org.jfree.data.statistics.HistogramDatasetTest.testBins()","org.jfree.data.statistics.HistogramDataset.<init>()"
"org.jfree.data.statistics.HistogramDatasetTest.testSerialization()","org.jfree.data.statistics.HistogramType.<init>(java.lang.String)"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries2()","org.jfree.data.statistics.HistogramDataset.addSeries(java.lang.Comparable, double[], int)"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries2()","org.jfree.data.statistics.HistogramDataset.<init>()"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries2()","org.jfree.data.xy.AbstractIntervalXYDataset.getEndXValue(int, int)"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries2()","org.jfree.data.xy.AbstractIntervalXYDataset.getStartXValue(int, int)"
"org.jfree.data.statistics.HistogramDatasetTest.testCloning()","org.jfree.data.statistics.HistogramDataset.clone()"
"org.jfree.data.statistics.HistogramDatasetTest.test2902842()","org.jfree.data.statistics.HistogramDataset.addSeries(java.lang.Comparable, double[], int)"
"org.jfree.data.statistics.HistogramDatasetTest.test2902842()","org.jfree.data.statistics.HistogramDataset.<init>()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setAutoWidthFactor(double)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setAutoWidthGap(double)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setAutoWidthMethod(int)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setCandleWidth(double)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setDownPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setDrawVolume(boolean)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setMaxCandleWidthInMilliseconds(double)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setUpPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setUseOutlinePaint(boolean)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testEquals()","org.jfree.chart.renderer.xy.CandlestickRenderer.setVolumePaint(java.awt.Paint)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setBackgroundImage(java.awt.Image)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setBackgroundImageAlignment(int)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setBackgroundImageAlpha(float)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setBorderPaint(java.awt.Paint)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setBorderStroke(java.awt.Stroke)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setBorderVisible(boolean)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setPadding(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setRenderingHints(java.awt.RenderingHints)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.setTitle(java.lang.String)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.plot.RingPlot.<init>()"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.JFreeChart.addSubtitle(org.jfree.chart.title.Title)"
"org.jfree.chart.JFreeChartTest.testEquals()","org.jfree.chart.plot.CenterTextMode.<init>()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.CandlestickRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.entity.ContourEntityTest.testSerialization()","org.jfree.chart.entity.ContourEntity.<init>(java.awt.Shape, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.ContourEntityTest.testSerialization()","org.jfree.chart.entity.ContourEntity.equals(java.lang.Object)"
"org.jfree.chart.entity.ContourEntityTest.testCloning()","org.jfree.chart.entity.ContourEntity.clone()"
"org.jfree.chart.entity.ContourEntityTest.testEquals()","org.jfree.chart.entity.ContourEntity.setIndex(int)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals2()","org.jfree.chart.plot.FastScatterPlot.setData(float[][])"
"org.jfree.chart.plot.FastScatterPlotTest.testCloning()","org.jfree.chart.plot.FastScatterPlot.clone()"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setDomainGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setDomainGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setDomainGridlinesVisible(boolean)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setDomainPannable(boolean)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setRangeGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setRangeGridlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setRangeGridlinesVisible(boolean)"
"org.jfree.chart.plot.FastScatterPlotTest.testEquals()","org.jfree.chart.plot.FastScatterPlot.setRangePannable(boolean)"
"org.jfree.chart.plot.FastScatterPlotTest.testSerialization()","org.jfree.chart.plot.FastScatterPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.FastScatterPlotTest.testSerialization()","org.jfree.chart.plot.FastScatterPlot.<init>(float[][], org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.FastScatterPlotTest.testSerialization()","org.jfree.chart.plot.FastScatterPlot.calculateXDataRange(float[][])"
"org.jfree.chart.plot.FastScatterPlotTest.testSerialization()","org.jfree.chart.plot.FastScatterPlot.calculateYDataRange(float[][])"
"org.jfree.chart.title.TitleTest.testEquals()","org.jfree.chart.title.Title.setHorizontalAlignment(org.jfree.ui.HorizontalAlignment)"
"org.jfree.chart.title.TitleTest.testEquals()","org.jfree.chart.title.Title.setVerticalAlignment(org.jfree.ui.VerticalAlignment)"
"org.jfree.chart.title.TitleTest.testEquals()","org.jfree.chart.title.Title.setVisible(boolean)"
"org.jfree.chart.renderer.category.LevelRendererTest.testCloning()","org.jfree.chart.renderer.category.LevelRenderer.setItemMargin(double)"
"org.jfree.chart.renderer.category.LevelRendererTest.testCloning()","org.jfree.chart.renderer.category.LevelRenderer.setMaximumItemWidth(double)"
"org.jfree.chart.renderer.category.LevelRendererTest.testCloning()","org.jfree.chart.renderer.category.LevelRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.LevelRendererTest.testEquals()","org.jfree.chart.renderer.category.LevelRenderer.setItemMargin(double)"
"org.jfree.chart.renderer.category.LevelRendererTest.testEquals()","org.jfree.chart.renderer.category.LevelRenderer.setMaximumItemWidth(double)"
"org.jfree.chart.renderer.category.LevelRendererTest.testEquals()","org.jfree.chart.renderer.category.LevelRenderer.equals(java.lang.Object)"
"org.jfree.chart.title.LegendGraphicTest.testHashcode()","org.jfree.chart.title.LegendGraphic.hashCode()"
"org.jfree.chart.title.CompositeTitleTest.testHashcode()","org.jfree.chart.title.CompositeTitle.equals(java.lang.Object)"
"org.jfree.chart.title.CompositeTitleTest.testHashcode()","org.jfree.chart.title.CompositeTitle.getContainer()"
"org.jfree.chart.title.CompositeTitleTest.testHashcode()","org.jfree.chart.block.BlockContainer.<init>()"
"org.jfree.chart.title.CompositeTitleTest.testHashcode()","org.jfree.chart.title.CompositeTitle.<init>(org.jfree.chart.block.BlockContainer)"
"org.jfree.chart.title.LegendGraphicTest.testSerialization()","org.jfree.chart.title.LegendGraphic.equals(java.lang.Object)"
"org.jfree.chart.title.ShortTextTitleTest.testEquals()","org.jfree.chart.title.ShortTextTitle.<init>(java.lang.String)"
"org.jfree.chart.title.ShortTextTitleTest.testEquals()","org.jfree.chart.title.TextTitle.setText(java.lang.String)"
"org.jfree.chart.block.BlockContainerTest.testCloning()","org.jfree.chart.block.BlockContainer.clone()"
"org.jfree.chart.block.EmptyBlockTest.testCloning()","org.jfree.chart.block.EmptyBlock.clone()"
"org.jfree.chart.block.LabelBlockTest.testEquals()","org.jfree.chart.block.LabelBlock.setContentAlignmentPoint(org.jfree.text.TextBlockAnchor)"
"org.jfree.chart.block.LabelBlockTest.testEquals()","org.jfree.chart.block.LabelBlock.setTextAnchor(org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.block.LabelBlockTest.testEquals()","org.jfree.chart.block.LabelBlock.setToolTipText(java.lang.String)"
"org.jfree.chart.block.LabelBlockTest.testEquals()","org.jfree.chart.block.LabelBlock.setURLText(java.lang.String)"
"org.jfree.chart.plot.MultiplePiePlotTest.testSerialization()","org.jfree.chart.plot.MultiplePiePlot.setAggregatedItemsPaint(java.awt.Paint)"
"org.jfree.chart.plot.MultiplePiePlotTest.testSerialization()","org.jfree.util.TableOrder.<init>(java.lang.String)"
"org.jfree.chart.plot.MultiplePiePlotTest.testSerialization()","org.jfree.chart.plot.MultiplePiePlot.equals(java.lang.Object)"
"org.jfree.chart.block.BlockContainerTest.testEquals()","org.jfree.chart.block.BlockContainer.equals(java.lang.Object)"
"org.jfree.chart.block.AbstractBlockTest.testSerialization()","org.jfree.chart.block.EmptyBlock.<init>(double, double)"
"org.jfree.chart.block.AbstractBlockTest.testSerialization()","org.jfree.chart.block.AbstractBlock.setHeight(double)"
"org.jfree.chart.block.AbstractBlockTest.testSerialization()","org.jfree.chart.block.AbstractBlock.setWidth(double)"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYTitleAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYTitleAnnotation.<init>(double, double, org.jfree.chart.title.Title)"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYTitleAnnotation.<init>(double, double, org.jfree.chart.title.Title, org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.isStripOutlineVisible()"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setAxis(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setAxisLocation(org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setAxisOffset(double)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setScale(org.jfree.chart.renderer.PaintScale)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setStripOutlinePaint(java.awt.Paint)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setStripOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setStripOutlineVisible(boolean)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setStripWidth(double)"
"org.jfree.chart.title.PaintScaleLegendTest.testEquals()","org.jfree.chart.title.PaintScaleLegend.setSubdivisionCount(int)"
"org.jfree.chart.block.ColorBlockTest.testCloning()","org.jfree.chart.block.ColorBlock.<init>(java.awt.Paint, double, double)"
"org.jfree.chart.block.ColorBlockTest.testCloning()","org.jfree.chart.block.ColorBlock.equals(java.lang.Object)"
"org.jfree.chart.title.ImageTitleTest.testHashcode()","org.jfree.chart.title.ImageTitle.equals(java.lang.Object)"
"org.jfree.chart.title.ImageTitleTest.testHashcode()","org.jfree.chart.title.ImageTitle.<init>(java.awt.Image)"
"org.jfree.chart.title.ImageTitleTest.testHashcode()","org.jfree.chart.title.ImageTitle.<init>(java.awt.Image, int, int, org.jfree.ui.RectangleEdge, org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, org.jfree.ui.RectangleInsets)"
"org.jfree.chart.title.ShortTextTitleTest.testSerialization()","org.jfree.chart.title.ShortTextTitle.<init>(java.lang.String)"
"org.jfree.chart.title.ShortTextTitleTest.testSerialization()","org.jfree.chart.title.TextTitle.setText(java.lang.String)"
"org.jfree.chart.title.PaintScaleLegendTest.testSerialization()","org.jfree.chart.title.PaintScaleLegend.<init>(org.jfree.chart.renderer.PaintScale, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.title.PaintScaleLegendTest.testSerialization()","org.jfree.chart.title.PaintScaleLegend.equals(java.lang.Object)"
"org.jfree.chart.title.PaintScaleLegendTest.testSerialization()","org.jfree.chart.renderer.GrayPaintScale.getLowerBound()"
"org.jfree.chart.title.PaintScaleLegendTest.testSerialization()","org.jfree.chart.renderer.GrayPaintScale.getUpperBound()"
"org.jfree.chart.block.LabelBlockTest.testCloning()","org.jfree.chart.block.LabelBlock.clone()"
"org.jfree.chart.title.TitleTest.testHashcode()","org.jfree.chart.title.TextTitle.hashCode()"
"org.jfree.chart.title.TitleTest.testHashcode()","org.jfree.chart.title.TextTitle.<init>()"
"org.jfree.chart.block.BlockContainerTest.testSerialization()","org.jfree.chart.block.BlockContainer.<init>()"
"org.jfree.chart.block.BlockContainerTest.testSerialization()","org.jfree.chart.block.BlockContainer.equals(java.lang.Object)"
"org.jfree.chart.JFreeChartTest.testSerialization2()","org.jfree.chart.ChartFactory.createPieChart3D(java.lang.String, org.jfree.data.general.PieDataset)"
"org.jfree.chart.block.AbstractBlockTest.testEquals()","org.jfree.chart.block.AbstractBlock.setID(java.lang.String)"
"org.jfree.chart.JFreeChartTest.testEquals2()","org.jfree.chart.plot.PiePlot.<init>()"
"org.jfree.chart.JFreeChartTest.testEquals2()","org.jfree.chart.JFreeChart.equals(java.lang.Object)"
"org.jfree.chart.title.TextTitleTest.testHashcode()","org.jfree.chart.title.TextTitle.hashCode()"
"org.jfree.chart.title.TextTitleTest.testHashcode()","org.jfree.chart.title.TextTitle.<init>()"
"org.jfree.chart.title.ImageTitleTest.testEquals()","org.jfree.chart.title.ImageTitle.setImage(java.awt.Image)"
"org.jfree.chart.title.LegendGraphicTest.testEquals()","org.jfree.chart.title.LegendGraphic.isLineVisible()"
"org.jfree.chart.title.LegendGraphicTest.testEquals()","org.jfree.chart.title.LegendGraphic.isShapeFilled()"
"org.jfree.chart.title.LegendGraphicTest.testEquals()","org.jfree.chart.title.LegendGraphic.isShapeOutlineVisible()"
"org.jfree.chart.title.LegendGraphicTest.testEquals()","org.jfree.chart.title.LegendGraphic.isShapeVisible()"
"org.jfree.chart.title.LegendGraphicTest.testEquals()","org.jfree.chart.title.LegendGraphic.setFillPaint(java.awt.Paint)"
"org.jfree.chart.title.LegendGraphicTest.testEquals()","org.jfree.chart.title.LegendGraphic.setShape(java.awt.Shape)"
"org.jfree.chart.title.ShortTextTitleTest.testHashcode()","org.jfree.chart.title.ShortTextTitle.<init>(java.lang.String)"
"org.jfree.chart.title.ShortTextTitleTest.testHashcode()","org.jfree.chart.title.TextTitle.hashCode()"
"org.jfree.chart.title.ShortTextTitleTest.testHashcode()","org.jfree.chart.title.TextTitle.setText(java.lang.String)"
"org.jfree.chart.block.BorderArrangementTest.testEquals()","org.jfree.chart.block.BorderArrangement.equals(java.lang.Object)"
"org.jfree.chart.block.BlockBorderTest.testSerialization()","org.jfree.chart.block.BlockBorder.equals(java.lang.Object)"
"org.jfree.chart.block.BlockBorderTest.testSerialization()","org.jfree.chart.block.BlockBorder.<init>(org.jfree.ui.RectangleInsets, java.awt.Paint)"
"org.jfree.chart.block.BlockBorderTest.testSerialization()","org.jfree.util.UnitType.<init>(java.lang.String)"
"org.jfree.chart.title.CompositeTitleTest.testSerialization()","org.jfree.chart.title.CompositeTitle.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.title.CompositeTitleTest.testSerialization()","org.jfree.chart.title.CompositeTitle.equals(java.lang.Object)"
"org.jfree.chart.title.CompositeTitleTest.testSerialization()","org.jfree.chart.title.CompositeTitle.getContainer()"
"org.jfree.chart.title.CompositeTitleTest.testSerialization()","org.jfree.chart.block.BlockContainer.<init>()"
"org.jfree.chart.title.CompositeTitleTest.testSerialization()","org.jfree.chart.title.CompositeTitle.<init>(org.jfree.chart.block.BlockContainer)"
"org.jfree.chart.JFreeChartTest.testSerialization1()","org.jfree.chart.title.LegendTitle.getSources()"
"org.jfree.chart.title.CompositeTitleTest.testEquals()","org.jfree.chart.block.AbstractBlock.setBorder(org.jfree.chart.block.BlockBorder)"
"org.jfree.chart.title.LegendGraphicTest.testCloning()","org.jfree.chart.title.LegendGraphic.clone()"
"org.jfree.chart.title.TextTitleTest.testSerialization()","org.jfree.chart.title.TextTitle.<init>(java.lang.String)"
"org.jfree.chart.title.TextTitleTest.testSerialization()","org.jfree.chart.title.TextTitle.equals(java.lang.Object)"
"org.jfree.chart.block.AbstractBlockTest.testCloning()","org.jfree.chart.block.EmptyBlock.clone()"
"org.jfree.chart.block.LabelBlockTest.testSerialization()","org.jfree.chart.block.LabelBlock.equals(java.lang.Object)"
"org.jfree.chart.title.LegendGraphicTest.testCloning2()","org.jfree.chart.title.LegendGraphic.clone()"
"org.jfree.chart.block.EmptyBlockTest.testEquals()","org.jfree.chart.block.EmptyBlock.<init>(double, double)"
"org.jfree.chart.block.EmptyBlockTest.testEquals()","org.jfree.chart.block.AbstractBlock.setHeight(double)"
"org.jfree.chart.block.EmptyBlockTest.testEquals()","org.jfree.chart.block.AbstractBlock.setWidth(double)"
"org.jfree.chart.block.EmptyBlockTest.testSerialization()","org.jfree.chart.block.EmptyBlock.<init>(double, double)"
"org.jfree.chart.block.EmptyBlockTest.testSerialization()","org.jfree.chart.block.AbstractBlock.setHeight(double)"
"org.jfree.chart.block.EmptyBlockTest.testSerialization()","org.jfree.chart.block.AbstractBlock.setWidth(double)"
"org.jfree.chart.block.BlockBorderTest.testEquals()","org.jfree.chart.block.BlockBorder.equals(java.lang.Object)"
"org.jfree.chart.block.BlockBorderTest.testEquals()","org.jfree.chart.block.BlockBorder.<init>(org.jfree.ui.RectangleInsets, java.awt.Paint)"
"org.jfree.chart.block.ColorBlockTest.testSerialization()","org.jfree.chart.block.ColorBlock.<init>(java.awt.Paint, double, double)"
"org.jfree.chart.block.ColorBlockTest.testSerialization()","org.jfree.chart.block.ColorBlock.equals(java.lang.Object)"
"org.jfree.chart.block.ColorBlockTest.testEquals()","org.jfree.chart.block.ColorBlock.<init>(java.awt.Paint, double, double)"
"org.jfree.chart.block.ColorBlockTest.testEquals()","org.jfree.chart.block.ColorBlock.equals(java.lang.Object)"
"org.jfree.chart.title.PaintScaleLegendTest.testHashcode()","org.jfree.chart.title.PaintScaleLegend.<init>(org.jfree.chart.renderer.PaintScale, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.title.PaintScaleLegendTest.testHashcode()","org.jfree.chart.title.PaintScaleLegend.equals(java.lang.Object)"
"org.jfree.chart.title.PaintScaleLegendTest.testHashcode()","org.jfree.chart.renderer.GrayPaintScale.getLowerBound()"
"org.jfree.chart.title.PaintScaleLegendTest.testHashcode()","org.jfree.chart.renderer.GrayPaintScale.getUpperBound()"
"org.jfree.chart.axis.CyclicNumberAxisTest.testSerialization()","org.jfree.chart.axis.CyclicNumberAxis.<init>(double, double, java.lang.String)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testSerialization()","org.jfree.chart.axis.CyclicNumberAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testSerialization()","org.jfree.chart.axis.CyclicNumberAxis.setFixedAutoRange(double)"
"org.jfree.chart.axis.LogarithmicAxisTest.testSerialization()","org.jfree.chart.axis.LogarithmicAxis.<init>(java.lang.String)"
"org.jfree.chart.axis.LogarithmicAxisTest.testSerialization()","org.jfree.chart.axis.LogarithmicAxis.setupNumberFmtObj()"
"org.jfree.chart.axis.LogAxisTest.testSerialization()","org.jfree.chart.axis.LogAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.SymbolAxisTest.testSerialization()","org.jfree.chart.axis.SymbolAxis.<init>(java.lang.String, java.lang.String[])"
"org.jfree.chart.axis.SymbolAxisTest.testSerialization()","org.jfree.chart.axis.SymbolAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.SymbolAxisTest.testSerialization()","org.jfree.chart.axis.NumberAxis.setAutoRangeStickyZero(boolean)"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization2()","org.jfree.chart.plot.ThermometerPlot.setSubrangePaint(int, java.awt.Paint)"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization2()","org.jfree.chart.plot.ThermometerPlot.equals(java.lang.Object)"
"org.jfree.chart.axis.ColorBarTest.testSerialization()","org.jfree.chart.axis.ColorBar.<init>(java.lang.String)"
"org.jfree.chart.axis.ColorBarTest.testSerialization()","org.jfree.chart.axis.ColorBar.equals(java.lang.Object)"
"org.jfree.chart.axis.ColorBarTest.testSerialization()","org.jfree.chart.plot.ColorPalette.setMaxZ(double)"
"org.jfree.chart.axis.ColorBarTest.testSerialization()","org.jfree.chart.plot.ColorPalette.setMinZ(double)"
"org.jfree.chart.axis.ColorBarTest.testSerialization()","org.jfree.chart.plot.RainbowPalette.<init>()"
"org.jfree.chart.axis.ColorBarTest.testSerialization()","org.jfree.chart.plot.RainbowPalette.initialize()"
"org.jfree.chart.axis.ColorBarTest.testSerialization()","org.jfree.chart.plot.ColorPalette.<init>()"
"org.jfree.chart.axis.ModuloAxisTest.testSerialization()","org.jfree.chart.axis.ModuloAxis.<init>(java.lang.String, org.jfree.data.Range)"
"org.jfree.chart.axis.ModuloAxisTest.testSerialization()","org.jfree.chart.axis.ModuloAxis.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization()","org.jfree.chart.plot.CategoryPlot.setOrientation(org.jfree.chart.plot.PlotOrientation)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization()","org.jfree.chart.plot.CategoryPlot.equals(java.lang.Object)"
"org.jfree.chart.axis.NumberAxis3DTest.testSerialization()","org.jfree.chart.axis.NumberAxis3D.<init>(java.lang.String)"
"org.jfree.chart.axis.DateAxisTest.testSerialization()","org.jfree.chart.axis.DateAxis.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization2()","org.jfree.chart.plot.CategoryPlot.setOrientation(org.jfree.chart.plot.PlotOrientation)"
"org.jfree.chart.plot.CategoryPlotTest.testSerialization2()","org.jfree.chart.plot.CategoryPlot.equals(java.lang.Object)"
"org.jfree.chart.axis.NumberAxisTest.testSerialization()","org.jfree.data.RangeType.<init>(java.lang.String)"
"org.jfree.chart.axis.NumberAxisTest.testSerialization()","org.jfree.chart.axis.AxisLabelLocation.<init>(java.lang.String)"
"org.jfree.chart.axis.NumberAxisTest.testSerialization()","org.jfree.chart.axis.NumberTickUnit.<init>(double, java.text.NumberFormat)"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization()","org.jfree.chart.plot.ThermometerPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization()","org.jfree.chart.plot.ThermometerPlot.<init>()"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization()","org.jfree.chart.plot.ThermometerPlot.<init>(org.jfree.data.general.ValueDataset)"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization()","org.jfree.chart.plot.ThermometerPlot.setAxisRange()"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization()","org.jfree.data.general.DefaultValueDataset.<init>()"
"org.jfree.chart.plot.ThermometerPlotTest.testSerialization()","org.jfree.chart.axis.Axis.setAxisLineVisible(boolean)"
"org.jfree.data.DefaultKeyedValuesTest.testInsertValue()","org.jfree.data.DefaultKeyedValues.insertValue(int, java.lang.Comparable, double)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.StatisticalBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.plot.ThermometerPlotTest.testSetUnits()","org.jfree.chart.plot.ThermometerPlot.getUnits()"
"org.jfree.chart.plot.ThermometerPlotTest.testSetUnits()","org.jfree.chart.plot.ThermometerPlot.setUnits(java.lang.String)"
"org.jfree.chart.plot.MultiplePiePlotTest.testGetLegendItems()","org.jfree.chart.plot.MultiplePiePlot.getLegendItems()"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setCenterText(java.lang.String)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setCenterTextColor(java.awt.Color)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setCenterTextFont(java.awt.Font)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setCenterTextFormatter(java.text.Format)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setCenterTextMode(org.jfree.chart.plot.CenterTextMode)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setInnerSeparatorExtension(double)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setOuterSeparatorExtension(double)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setSectionDepth(double)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setSeparatorStroke(java.awt.Stroke)"
"org.jfree.chart.plot.RingPlotTest.testEquals()","org.jfree.chart.plot.RingPlot.setSeparatorsVisible(boolean)"
"org.jfree.chart.plot.PiePlotTest.testBug1126_b()","org.jfree.chart.plot.PiePlot.getSectionOutlinePaint(java.lang.Comparable)"
"org.jfree.chart.plot.PiePlotTest.testBug1126_b()","org.jfree.chart.plot.PiePlot.setSectionOutlinePaint(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.plot.CategoryPlotTest.testAddRangeMarker()","org.jfree.chart.plot.CategoryPlot.addRangeMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.CategoryPlotTest.testAddRangeMarker()","org.jfree.chart.plot.CategoryPlot.clearRangeMarkers()"
"org.jfree.chart.plot.PiePlotTest.testBug1126()","org.jfree.chart.plot.PiePlot.getSectionPaint(java.lang.Comparable)"
"org.jfree.chart.plot.PiePlotTest.testBug1126()","org.jfree.chart.plot.PiePlot.setSectionPaint(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testCloning_URLGenerator()","org.jfree.chart.plot.PiePlot.getURLGenerator()"
"org.jfree.chart.plot.PiePlotTest.testGetLegendItems()","org.jfree.chart.plot.PiePlot.setIgnoreZeroValues(boolean)"
"org.jfree.chart.plot.PiePlotTest.testGetLegendItems()","org.jfree.chart.plot.PiePlot.getLegendItems()"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setAxisLocation(int)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setBulbRadius(int)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setColumnRadius(int)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setGap(int)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setMercuryPaint(java.awt.Paint)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setPadding(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setShowValueLines(boolean)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setSubrange(int, double, double)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setThermometerPaint(java.awt.Paint)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setThermometerStroke(java.awt.Stroke)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setValueFont(java.awt.Font)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setValueFormat(java.text.NumberFormat)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setValueLocation(int)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setValuePaint(java.awt.Paint)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setSubrangePaint(int, java.awt.Paint)"
"org.jfree.chart.plot.ThermometerPlotTest.testEquals()","org.jfree.chart.plot.ThermometerPlot.setUnits(int)"
"org.jfree.chart.JFreeChartTest.testTitleChangeEvent()","org.jfree.chart.JFreeChart.setTitle(org.jfree.chart.title.TextTitle)"
"org.jfree.chart.JFreeChartTest.testTitleChangeEvent()","org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset)"
"org.jfree.chart.plot.PiePlotTest.testCloning_LegendLabelGenerator()","org.jfree.chart.labels.AbstractPieItemLabelGenerator.getNumberFormat()"
"org.jfree.chart.plot.PiePlotTest.testCloning_LegendLabelGenerator()","org.jfree.chart.plot.PiePlot.setLegendLabelGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)"
"org.jfree.chart.plot.PiePlot3DTest.testEquals()","org.jfree.chart.plot.PiePlot3D.<init>()"
"org.jfree.chart.plot.PiePlot3DTest.testEquals()","org.jfree.chart.plot.PiePlot3D.setDarkerSides(boolean)"
"org.jfree.chart.plot.PiePlot3DTest.testEquals()","org.jfree.chart.plot.PiePlot3D.setDepthFactor(double)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.test2947660()","org.jfree.chart.plot.CategoryPlot.setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.testMapDatasetToDomainAxis()","org.jfree.data.category.DefaultCategoryDataset.setValue(double, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.plot.CategoryPlotTest.testMapDatasetToDomainAxis()","org.jfree.chart.plot.CategoryPlot.setDomainAxis(int, org.jfree.chart.axis.CategoryAxis)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning()","org.jfree.chart.plot.CategoryPlot.addAnnotation(org.jfree.chart.annotations.CategoryAnnotation)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning()","org.jfree.chart.plot.CategoryPlot.setRangeCrosshairPaint(java.awt.Paint)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning()","org.jfree.chart.plot.CategoryPlot.setRangeMinorGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning()","org.jfree.chart.plot.CategoryPlot.addDomainMarker(org.jfree.chart.plot.CategoryMarker, org.jfree.ui.Layer)"
"org.jfree.chart.JFreeChartTest.testAddSubtitle()","org.jfree.chart.JFreeChart.addSubtitle(int, org.jfree.chart.title.Title)"
"org.jfree.chart.JFreeChartTest.testAddSubtitle()","org.jfree.chart.JFreeChart.addSubtitle(org.jfree.chart.title.Title)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.getDrawBorder()"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setDialShape(org.jfree.chart.plot.DialShape)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setDrawBorder(boolean)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setMeterAngle(int)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setRange(org.jfree.data.Range)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setTickLabelFont(java.awt.Font)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setTickLabelFormat(java.text.NumberFormat)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setTickLabelsVisible(boolean)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setTickSize(double)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setUnits(java.lang.String)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setValueFont(java.awt.Font)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setValuePaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.<init>()"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setDialBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setDialOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setNeedlePaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setTickLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testEquals()","org.jfree.chart.plot.MeterPlot.setTickPaint(java.awt.Paint)"
"org.jfree.chart.JFreeChartTest.testBug942()","org.jfree.chart.title.TextTitle.getText()"
"org.jfree.chart.plot.CategoryPlotTest.testCloning3()","org.jfree.chart.plot.CategoryPlot.setFixedLegendItems(org.jfree.chart.LegendItemCollection)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning3()","org.jfree.chart.plot.CategoryPlot.getFixedLegendItems()"
"org.jfree.chart.plot.CategoryPlotTest.testRangeMarkerIndices()","org.jfree.chart.plot.CategoryPlot.addRangeMarker(int, org.jfree.chart.plot.Marker, org.jfree.ui.Layer)"
"org.jfree.chart.plot.CategoryPlotTest.testRangeMarkerIndices()","org.jfree.ui.LengthAdjustmentType.<init>(java.lang.String)"
"org.jfree.chart.plot.CategoryPlotTest.testRangeMarkerIndices()","org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.TimeSeriesChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.TimeSeriesChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.XYStepAreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.XYStepAreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.plot.CompassPlotTest.testSerialization()","org.jfree.chart.plot.CompassPlot.setRoseCenterPaint(java.awt.Paint)"
"org.jfree.chart.plot.CompassPlotTest.testSerialization()","org.jfree.chart.plot.CompassPlot.setRoseHighlightPaint(java.awt.Paint)"
"org.jfree.chart.plot.CompassPlotTest.testSerialization()","org.jfree.chart.plot.CompassPlot.setRosePaint(java.awt.Paint)"
"org.jfree.chart.plot.CompassPlotTest.testSerialization()","org.jfree.chart.plot.CompassPlot.<init>(org.jfree.data.general.ValueDataset)"
"org.jfree.chart.plot.CompassPlotTest.testSerialization()","org.jfree.chart.plot.CompassPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.CompassPlotTest.testSerialization()","org.jfree.chart.plot.CompassPlot.setSeriesNeedle(int)"
"org.jfree.chart.axis.NumberAxisTest.testAutoRange4()","org.jfree.chart.ChartFactory.createBarChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.axis.NumberAxisTest.testAutoRange4()","org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)"
"org.jfree.chart.XYStepChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.XYStepChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.XYBarChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.XYBarChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeCategoryPlot.<init>()"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeCategoryPlot.add(org.jfree.chart.plot.CategoryPlot)"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeCategoryPlot.remove(org.jfree.chart.plot.CategoryPlot)"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testRemoveSubplot()","org.jfree.chart.plot.CombinedRangeCategoryPlot.getSubplots()"
"org.jfree.chart.plot.PiePlotTest.testCloning_LegendLabelURLGenerator()","org.jfree.chart.plot.PiePlot.getLegendLabelURLGenerator()"
"org.jfree.chart.plot.PiePlotTest.testCloning_LegendLabelURLGenerator()","org.jfree.chart.plot.PiePlot.setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)"
"org.jfree.chart.plot.SpiderWebPlotTest.testCloning()","org.jfree.chart.plot.SpiderWebPlot.clone()"
"org.jfree.chart.plot.SpiderWebPlotTest.testCloning()","org.jfree.chart.plot.SpiderWebPlot.setLegendItemShape(java.awt.Shape)"
"org.jfree.chart.plot.SpiderWebPlotTest.testCloning()","org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlinePaint(int, java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testCloning()","org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlineStroke(int, java.awt.Stroke)"
"org.jfree.chart.plot.SpiderWebPlotTest.testCloning()","org.jfree.chart.plot.SpiderWebPlot.setSeriesPaint(int, java.awt.Paint)"
"org.jfree.chart.plot.CategoryPlotTest.testMapDatasetToRangeAxis()","org.jfree.data.category.DefaultCategoryDataset.setValue(double, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.plot.CategoryPlotTest.testMapDatasetToRangeAxis()","org.jfree.chart.plot.CategoryPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.CategoryPlotTest.testDomainMarkerIndices()","org.jfree.chart.plot.CategoryPlot.addDomainMarker(int, org.jfree.chart.plot.CategoryMarker, org.jfree.ui.Layer)"
"org.jfree.chart.plot.CategoryPlotTest.testDomainMarkerIndices()","org.jfree.chart.plot.CategoryMarker.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryPlotTest.testDomainMarkerIndices()","org.jfree.chart.plot.CategoryMarker.<init>(java.lang.Comparable)"
"org.jfree.chart.plot.CategoryPlotTest.testDomainMarkerIndices()","org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.PiePlotTest.testCloning_LegendLabelToolTipGenerator()","org.jfree.chart.plot.PiePlot.setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)"
"org.jfree.chart.plot.PiePlotTest.testCloning_LegendLabelToolTipGenerator()","org.jfree.chart.labels.AbstractPieItemLabelGenerator.getNumberFormat()"
"org.jfree.chart.JFreeChartTest.testGetSubtitle()","org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset)"
"org.jfree.chart.plot.CategoryPlotTest.testAddDomainMarker()","org.jfree.chart.plot.CategoryPlot.addDomainMarker(org.jfree.chart.plot.CategoryMarker)"
"org.jfree.chart.plot.CategoryPlotTest.testAddDomainMarker()","org.jfree.chart.plot.CategoryPlot.clearDomainMarkers()"
"org.jfree.chart.axis.NumberAxisTest.testAutoRange2()","org.jfree.chart.ChartFactory.createLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testEquals()","org.jfree.chart.plot.CombinedRangeCategoryPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList5()","org.jfree.chart.plot.CategoryPlot.setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList5()","org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.XYAreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.XYAreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.plot.MarkerTest.testListenersWithCategoryPlot()","org.jfree.chart.plot.CategoryPlot.addDomainMarker(org.jfree.chart.plot.CategoryMarker)"
"org.jfree.chart.plot.MarkerTest.testListenersWithCategoryPlot()","org.jfree.chart.plot.CategoryPlot.addRangeMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.MarkerTest.testListenersWithCategoryPlot()","org.jfree.chart.plot.CategoryPlot.clearDomainMarkers()"
"org.jfree.chart.plot.MarkerTest.testListenersWithCategoryPlot()","org.jfree.chart.plot.CategoryPlot.clearRangeMarkers()"
"org.jfree.chart.plot.CategoryPlotTest.testAxisIndices()","org.jfree.chart.plot.CategoryPlot.setDomainAxis(int, org.jfree.chart.axis.CategoryAxis)"
"org.jfree.chart.plot.CategoryPlotTest.testAxisIndices()","org.jfree.chart.plot.CategoryPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setAxisLabelGap(double)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setAxisLinePaint(java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setAxisLineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setBaseSeriesOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setBaseSeriesOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setBaseSeriesPaint(java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setDataExtractOrder(org.jfree.util.TableOrder)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setDirection(org.jfree.util.Rotation)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setHeadPercent(double)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setInteriorGap(double)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setLabelFont(java.awt.Font)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setMaxValue(double)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setSeriesPaint(java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setStartAngle(double)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setWebFilled(boolean)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setLegendItemShape(java.awt.Shape)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlinePaint(int, java.awt.Paint)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setSeriesOutlineStroke(int, java.awt.Stroke)"
"org.jfree.chart.plot.SpiderWebPlotTest.testEquals()","org.jfree.chart.plot.SpiderWebPlot.setSeriesPaint(int, java.awt.Paint)"
"org.jfree.chart.plot.CombinedRangeCategoryPlotTest.testCloning()","org.jfree.chart.plot.CombinedRangeCategoryPlot.clone()"
"org.jfree.chart.plot.CompassPlotTest.testEquals()","org.jfree.chart.plot.CompassPlot.<init>()"
"org.jfree.chart.plot.CompassPlotTest.testEquals()","org.jfree.chart.plot.CompassPlot.setDrawBorder(boolean)"
"org.jfree.chart.plot.CompassPlotTest.testEquals()","org.jfree.chart.plot.CompassPlot.setLabelFont(java.awt.Font)"
"org.jfree.chart.plot.CompassPlotTest.testEquals()","org.jfree.chart.plot.CompassPlot.setLabelType(int)"
"org.jfree.chart.plot.CompassPlotTest.testEquals()","org.jfree.chart.plot.CompassPlot.setRoseCenterPaint(java.awt.Paint)"
"org.jfree.chart.plot.CompassPlotTest.testEquals()","org.jfree.chart.plot.CompassPlot.setRoseHighlightPaint(java.awt.Paint)"
"org.jfree.chart.plot.CompassPlotTest.testEquals()","org.jfree.chart.plot.CompassPlot.setRosePaint(java.awt.Paint)"
"org.jfree.chart.plot.CompassPlotTest.testCloning()","org.jfree.chart.plot.CompassPlot.clone()"
"org.jfree.chart.plot.CategoryPlotTest.testGetRangeAxisIndex()","org.jfree.chart.plot.CategoryPlot.getRangeAxisIndex(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.labels.StandardPieSectionLabelGenerator.<init>(java.lang.String)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlinePaint(boolean)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setAutoPopulateSectionOutlineStroke(boolean)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setAutoPopulateSectionPaint(boolean)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setBaseSectionOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setBaseSectionOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setCircular(boolean)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setDirection(org.jfree.util.Rotation)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setInteriorGap(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelGap(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelLinkMargin(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelLinkStroke(java.awt.Stroke)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelLinksVisible(boolean)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLabelShadowPaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setMaximumLabelWidth(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setMinimumArcAngleToDraw(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setPieIndex(int)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setSectionOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setSectionOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setSectionOutlinesVisible(boolean)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setSectionPaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setShadowPaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setShadowXOffset(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setShadowYOffset(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setStartAngle(double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setBaseSectionPaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setExplodePercent(java.lang.Comparable, double)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setIgnoreZeroValues(boolean)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLegendItemShape(java.awt.Shape)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLegendLabelToolTipGenerator(org.jfree.chart.labels.PieSectionLabelGenerator)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setLegendLabelURLGenerator(org.jfree.chart.urls.PieURLGenerator)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setSectionOutlinePaint(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setSectionOutlineStroke(java.lang.Comparable, java.awt.Stroke)"
"org.jfree.chart.plot.PiePlotTest.testEquals()","org.jfree.chart.plot.PiePlot.setSectionPaint(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.plot.CategoryPlotTest.testAxisLocationIndices()","org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.CategoryPlotTest.testAxisLocationIndices()","org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList3()","org.jfree.chart.plot.CategoryPlot.setRangeAxis(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList3()","org.jfree.chart.plot.CategoryPlot.setRangeAxis(int, org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.CategoryPlotTest.testSetRenderer()","org.jfree.chart.plot.MyPlotChangeListener.<init>()"
"org.jfree.chart.plot.CategoryPlotTest.testSetRenderer()","org.jfree.chart.plot.MyPlotChangeListener.getEvent()"
"org.jfree.chart.plot.PiePlotTest.testCloning_LegendItemShape()","org.jfree.chart.plot.PiePlot.setLegendItemShape(java.awt.Shape)"
"org.jfree.chart.plot.ThermometerPlotTest.testCloning()","org.jfree.chart.plot.ThermometerPlot.clone()"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList2()","org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList2()","org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems()","org.jfree.chart.plot.PolarPlot.getLegendItems()"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems()","org.jfree.chart.plot.PolarPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems()","org.jfree.chart.plot.PolarPlot.setRenderer(org.jfree.chart.renderer.PolarItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning2()","org.jfree.chart.axis.AxisSpace.setBottom(double)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning2()","org.jfree.chart.plot.CategoryPlot.getFixedDomainAxisSpace()"
"org.jfree.chart.plot.CategoryPlotTest.testCloning2()","org.jfree.chart.plot.CategoryPlot.getFixedRangeAxisSpace()"
"org.jfree.chart.plot.CategoryPlotTest.testCloning2()","org.jfree.chart.plot.CategoryPlot.setFixedDomainAxisSpace(org.jfree.chart.axis.AxisSpace)"
"org.jfree.chart.plot.CategoryPlotTest.testCloning2()","org.jfree.chart.plot.CategoryPlot.setFixedRangeAxisSpace(org.jfree.chart.axis.AxisSpace)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList4()","org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList4()","org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation(int, org.jfree.chart.axis.AxisLocation)"
"org.jfree.chart.plot.CategoryPlotTest.testEquals_ObjectList()","org.jfree.chart.plot.CategoryPlot.setDomainAxis(org.jfree.chart.axis.CategoryAxis)"
"org.jfree.chart.axis.NumberAxisTest.testAutoRange3()","org.jfree.chart.ChartFactory.createLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testBug2817504()","org.jfree.chart.plot.CategoryPlot.clone()"
"org.jfree.chart.plot.CategoryPlotTest.testBug2817504()","org.jfree.chart.plot.CategoryPlot.setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.testRendererIndices()","org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.testRendererIndices()","org.jfree.chart.plot.CategoryPlot.getRendererCount()"
"org.jfree.chart.plot.CategoryPlotTest.testGetRendererForDataset2()","org.jfree.chart.plot.CategoryPlot.setRenderer(int, org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.testGetRendererForDataset2()","org.jfree.data.category.DefaultCategoryDataset.setValue(double, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.plot.CategoryPlotTest.test1169972()","org.jfree.chart.plot.CategoryPlot.setRenderer(org.jfree.chart.renderer.category.CategoryItemRenderer)"
"org.jfree.chart.plot.CategoryPlotTest.test1169972()","org.jfree.chart.plot.CategoryPlot.setDomainAxis(org.jfree.chart.axis.CategoryAxis)"
"org.jfree.chart.plot.CategoryPlotTest.test1169972()","org.jfree.chart.plot.CategoryPlot.setRangeAxis(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.plot.CategoryPlotTest.testGetRangeAxisForDataset()","org.jfree.chart.renderer.category.DefaultCategoryItemRenderer.<init>()"
"org.jfree.chart.JFreeChartTest.testLegendEvents()","org.jfree.chart.ChartFactory.createPieChart(java.lang.String, org.jfree.data.general.PieDataset)"
"org.jfree.chart.JFreeChartTest.testLegendEvents()","org.jfree.chart.JFreeChart.getLegend()"
"org.jfree.chart.plot.MeterPlotTest.testCloning()","org.jfree.chart.plot.MeterPlot.clone()"
"org.jfree.chart.plot.MeterPlotTest.testCloning()","org.jfree.chart.plot.MeterPlot.getTickLabelFormat()"
"org.jfree.chart.plot.MeterPlotTest.testCloning()","org.jfree.chart.plot.DialShape.<init>(java.lang.String)"
"org.jfree.chart.plot.MeterPlotTest.testCloning()","org.jfree.chart.plot.MeterPlot.<init>()"
"org.jfree.chart.plot.MeterPlotTest.testCloning()","org.jfree.chart.plot.MeterPlot.getDataset()"
"org.jfree.chart.plot.PiePlotTest.testBug1126_e()","org.jfree.chart.labels.StandardPieSectionLabelGenerator.setAttributedLabel(int, java.text.AttributedString)"
"org.jfree.chart.plot.PiePlotTest.testBug1126_e()","org.jfree.chart.plot.PiePlot.getLabelGenerator()"
"org.jfree.chart.plot.RingPlotTest.testCloning()","org.jfree.chart.plot.RingPlot.setSeparatorPaint(java.awt.Paint)"
"org.jfree.chart.plot.RingPlotTest.testCloning()","org.jfree.chart.plot.RingPlot.<init>(org.jfree.data.general.PieDataset)"
"org.jfree.chart.plot.RingPlotTest.testCloning()","org.jfree.chart.plot.RingPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems2()","org.jfree.chart.plot.PolarPlot.getLegendItems()"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems2()","org.jfree.chart.plot.PolarPlot.setDataset(int, org.jfree.data.xy.XYDataset)"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems2()","org.jfree.chart.plot.PolarPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems2()","org.jfree.chart.plot.PolarPlot.setRenderer(int, org.jfree.chart.renderer.PolarItemRenderer)"
"org.jfree.chart.plot.PolarPlotTest.testGetLegendItems2()","org.jfree.chart.plot.PolarPlot.setRenderer(org.jfree.chart.renderer.PolarItemRenderer)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization1()","org.jfree.chart.plot.MeterPlot.setDialBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization1()","org.jfree.chart.plot.MeterPlot.setDialOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization1()","org.jfree.chart.plot.MeterPlot.setNeedlePaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization1()","org.jfree.chart.plot.MeterPlot.setTickLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization1()","org.jfree.chart.plot.MeterPlot.setTickPaint(java.awt.Paint)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization1()","org.jfree.chart.plot.MeterPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.PolarPlotTest.testCloning()","org.jfree.chart.plot.PolarPlot.clone()"
"org.jfree.chart.plot.PolarPlotTest.testCloning()","org.jfree.chart.plot.PolarPlot.getAxis()"
"org.jfree.chart.plot.PolarPlotTest.testCloning()","org.jfree.chart.plot.PolarPlot.addCornerTextItem(java.lang.String)"
"org.jfree.chart.JFreeChartTest.testGetSubtitles()","org.jfree.chart.JFreeChart.getSubtitles()"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_NumberAxisAndMargin()","org.jfree.chart.plot.PolarPlot.setAngleOffset(double)"
"org.jfree.chart.plot.PolarPlotTest.testTranslateToJava2D_NumberAxisAndMargin()","org.jfree.chart.plot.PolarPlot.translateToJava2D(double, double, org.jfree.chart.axis.ValueAxis, java.awt.geom.Rectangle2D)"
"org.jfree.chart.plot.RingPlotTest.testSerialization()","org.jfree.chart.plot.CenterTextMode.<init>()"
"org.jfree.chart.plot.RingPlotTest.testSerialization()","org.jfree.chart.plot.RingPlot.setSeparatorPaint(java.awt.Paint)"
"org.jfree.chart.plot.RingPlotTest.testSerialization()","org.jfree.chart.plot.RingPlot.<init>(org.jfree.data.general.PieDataset)"
"org.jfree.chart.plot.RingPlotTest.testSerialization()","org.jfree.chart.plot.RingPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryPlotTest.testGetDomainAxisIndex()","org.jfree.chart.plot.CategoryPlot.setDomainAxis(int, org.jfree.chart.axis.CategoryAxis)"
"org.jfree.chart.plot.PiePlotTest.testBug1126_c()","org.jfree.chart.plot.PiePlot.getSectionOutlineStroke(java.lang.Comparable)"
"org.jfree.chart.plot.PiePlotTest.testBug1126_c()","org.jfree.chart.plot.PiePlot.setSectionOutlineStroke(java.lang.Comparable, java.awt.Stroke)"
"org.jfree.chart.ScatterPlotTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.ScatterPlotTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.axis.LogAxisTest.testAutoRange3()","org.jfree.chart.ChartFactory.createLineChart(java.lang.String, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, org.jfree.chart.plot.PlotOrientation, boolean, boolean, boolean)"
"org.jfree.chart.plot.CategoryPlotTest.testGetDomainAxisForDataset()","org.jfree.chart.plot.CategoryPlot.setDomainAxis(int, org.jfree.chart.axis.CategoryAxis)"
"org.jfree.chart.plot.PolarPlotTest.testSerialization()","org.jfree.chart.plot.PolarAxisLocation.<init>(java.lang.String)"
"org.jfree.chart.plot.PolarPlotTest.testSerialization()","org.jfree.chart.plot.PolarPlot.setAngleGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.PolarPlotTest.testSerialization()","org.jfree.chart.plot.PolarPlot.setAngleLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.PolarPlotTest.testSerialization()","org.jfree.chart.plot.PolarPlot.setRadiusGridlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.PiePlotTest.testBug1126_d()","org.jfree.chart.plot.PiePlot.setExplodePercent(java.lang.Comparable, double)"
"org.jfree.chart.plot.PiePlotTest.testBug1126_d()","org.jfree.chart.plot.PiePlot.getExplodePercent(java.lang.Comparable)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setBackgroundAlpha(float)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setBackgroundImage(java.awt.Image)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setBackgroundImageAlignment(int)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setBackgroundImageAlpha(float)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setForegroundAlpha(float)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setNoDataMessage(java.lang.String)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setNoDataMessageFont(java.awt.Font)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setNoDataMessagePaint(java.awt.Paint)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.PlotTest.testEquals()","org.jfree.chart.plot.Plot.setOutlineVisible(boolean)"
"org.jfree.chart.XYLineChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.XYLineChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.data.general.DatasetUtilitiesTest.testBug2849731_3()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testBug2849731_3()","org.jfree.data.xy.XYIntervalSeriesCollection.addSeries(org.jfree.data.xy.XYIntervalSeries)"
"org.jfree.data.general.DatasetUtilitiesTest.testBug2849731_2()","org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindRangeBounds2()","org.jfree.chart.renderer.xy.XYBarRenderer.setUseYInterval(boolean)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindRangeBounds2()","org.jfree.chart.renderer.xy.XYBarRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindDomainBounds2()","org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindDomainBounds2()","org.jfree.data.xy.XYIntervalSeriesCollection.addSeries(org.jfree.data.xy.XYIntervalSeries)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindDomainBounds2()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(int, java.lang.Boolean)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindDomainBounds2()","org.jfree.data.xy.XYIntervalSeriesCollection.<init>()"
"org.jfree.data.xy.XYIntervalSeriesCollectionTest.test1170825()","org.jfree.data.xy.XYIntervalSeriesCollection.getSeries(int)"
"org.jfree.data.xy.XYIntervalSeriesCollectionTest.test1170825()","org.jfree.data.xy.XYIntervalSeriesCollection.addSeries(org.jfree.data.xy.XYIntervalSeries)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.LegendItem.getDatasetIndex()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.LegendItem.getSeriesIndex()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.category.LevelRendererTest.testGetLegendItemSeriesIndex()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getLegendItem(int, int)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testGetLegendItem()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(java.util.List, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testGetLegendItem()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend(int, java.lang.Boolean)"
"org.jfree.chart.renderer.category.BarRendererTest.testGetLegendItem()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend(int, java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setBaseItemLabelsVisible(java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setBaseOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setBaseStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.RendererChangeDetector.<init>()"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.RendererChangeDetector.getNotified()"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.RendererChangeDetector.setNotified(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setItemLabelFont(java.awt.Font)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setItemLabelPaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setItemLabelsVisible(java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setPositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelFont(int, java.awt.Font)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelPaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible(int, java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlinePaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlineStroke(int, java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesShape(int, java.awt.Shape)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesStroke(int, java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setBasePaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setBaseShape(java.awt.Shape)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setPaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesNegativeItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setSeriesPositiveItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.AbstractRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setShape(java.awt.Shape)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setLegendShape(int, java.awt.Shape)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setLegendTextPaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesCreateEntities(int, java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextFont(java.awt.Font)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setLegendTextFont(int, java.awt.Font)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesFillPaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelPaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelsVisible(int, java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlinePaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesOutlineStroke(int, java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesShape(int, java.awt.Shape)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesStroke(int, java.awt.Stroke)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextPaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setBaseShape(java.awt.Shape)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesNegativeItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesPositiveItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisibleInLegend(int, java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testCloning()","org.jfree.chart.renderer.AbstractRenderer.setShape(java.awt.Shape)"
"org.jfree.data.time.MillisecondTest.testHashcode()","org.jfree.data.time.Millisecond.hashCode()"
"org.jfree.data.time.MillisecondTest.testNext()","org.jfree.data.time.Millisecond.next()"
"org.jfree.data.time.MillisecondTest.testNext()","org.jfree.data.time.Millisecond.getSecond()"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds_StatisticalCategoryDataset()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.add(double, double, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds_StatisticalCategoryDataset()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.<init>()"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getStdDevValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.KeyedObjects2DTest.testRemoveColumnByIndex()","org.jfree.data.KeyedObjects2D.removeColumn(int)"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testGetColumnCount()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getColumnCount()"
"org.jfree.data.KeyedObjects2DTest.testRemoveColumnByKey()","org.jfree.data.KeyedObjects2D.removeColumn(java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testRemove()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.remove(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testGetRangeBounds()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeBounds(boolean)"
"org.jfree.data.KeyedObjects2DTest.testCloning()","org.jfree.data.KeyedObjects2D.clone()"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds_IntervalCategoryDataset()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds_IntervalCategoryDataset()","org.jfree.data.general.TestIntervalCategoryDataset.<init>()"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds_IntervalCategoryDataset()","org.jfree.data.general.TestIntervalCategoryDataset.addItem(double, double, double, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds_IntervalCategoryDataset()","org.jfree.data.general.TestIntervalCategoryDataset.addItem(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxOutlier(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxRegularValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMeanValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMedianValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinOutlier(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinRegularValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ1Value(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ3Value(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAddUpdatesCachedRange()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeBounds(boolean)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testSerialization()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.KeyedObjects2DTest.testSerialization()","org.jfree.data.KeyedObjects2D.equals(java.lang.Object)"
"org.jfree.data.general.DatasetUtilitiesTest.testBug2849731()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testBug2849731()","org.jfree.data.general.TestIntervalCategoryDataset.<init>()"
"org.jfree.data.general.DatasetUtilitiesTest.testBug2849731()","org.jfree.data.general.TestIntervalCategoryDataset.addItem(double, double, double, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testBug2849731()","org.jfree.data.general.TestIntervalCategoryDataset.addItem(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.KeyedObjects2DTest.testGetValueByKey()","org.jfree.data.KeyedObjects2D.getObject(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.KeyedObjects2DTest.testSetObject()","org.jfree.data.KeyedObjects2D.getObject(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testCloning()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.clone()"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testSerialization1()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testGetValue()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.StatisticalBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(int, java.lang.Boolean)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testRemove()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.remove(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.test3072674()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeBounds(boolean)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.test3072674()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeLowerBound(boolean)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.test3072674()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeUpperBound(boolean)"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testAddValue()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getValues(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.test1701822()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.add(org.jfree.data.statistics.BoxAndWhiskerItem, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.test1701822()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.<init>()"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.test1701822()","org.jfree.data.statistics.BoxAndWhiskerItem.<init>(java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.lang.Number, java.util.List)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxOutlier(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMaxRegularValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMeanValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMedianValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinOutlier(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getMinRegularValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ1Value(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getQ3Value(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testAdd()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeBounds(boolean)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testGetRangeBounds2()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeBounds(boolean)"
"org.jfree.data.KeyedObjects2DTest.testRemoveRowByKey()","org.jfree.data.KeyedObjects2D.removeRow(java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testGetRangeBounds()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeBounds(boolean)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testCloning()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.clone()"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testSerialization2()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.ScatterRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testGetRangeLowerBound()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeLowerBound(boolean)"
"org.jfree.data.KeyedObjects2DTest.testRemoveValue()","org.jfree.data.KeyedObjects2D.removeObject(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.KeyedObjects2DTest.testGetValueByIndex()","org.jfree.data.KeyedObjects2D.getObject(int, int)"
"org.jfree.data.KeyedObjects2DTest.testGetValueByIndex()","org.jfree.data.KeyedObjects2D.addObject(java.lang.Object, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.KeyedObjects2DTest.testGetValueByIndex()","org.jfree.data.KeyedObjects2D.<init>()"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testGetRowCount()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getRowCount()"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testGetRangeUpperBound()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.getRangeUpperBound(boolean)"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testCloning()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.clone()"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testEquals()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.KeyedObjects2DTest.testEquals()","org.jfree.data.KeyedObjects2D.equals(java.lang.Object)"
"org.jfree.data.KeyedObjects2DTest.testRemoveRowByIndex()","org.jfree.data.KeyedObjects2D.removeRow(int)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds_MultiValueCategoryDataset()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.add(java.util.List, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds_MultiValueCategoryDataset()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.<init>()"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testEquals()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.equals(java.lang.Object)"
"org.jfree.chart.axis.DateAxisTest.testEquals()","org.jfree.chart.axis.DateAxis.setDateFormatOverride(java.text.DateFormat)"
"org.jfree.chart.axis.DateAxisTest.testEquals()","org.jfree.chart.axis.DateAxis.setTimeline(org.jfree.chart.axis.Timeline)"
"org.jfree.chart.axis.SegmentedTimelineTest.testHashCode()","org.jfree.chart.axis.SegmentedTimeline.hashCode()"
"org.jfree.chart.axis.SegmentedTimelineTest.testSerialization2()","org.jfree.chart.axis.SegmentedTimeline.equals(java.lang.Object)"
"org.jfree.chart.axis.SegmentedTimelineTest.testCloning()","org.jfree.chart.axis.SegmentedTimeline.clone()"
"org.jfree.chart.axis.SegmentedTimelineTest.testEquals()","org.jfree.chart.axis.SegmentedTimeline.equals(java.lang.Object)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2SegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getBaseTimeline()"
"org.jfree.chart.axis.SegmentedTimelineTest.testSerialization()","org.jfree.chart.axis.SegmentedTimeline.newFifteenMinuteTimeline()"
"org.jfree.data.time.HourTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Hour.<init>(int, int, int, int)"
"org.jfree.data.time.DayTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.HourTest.testLastHourNext()","org.jfree.data.time.Hour.next()"
"org.jfree.data.time.HourTest.testEquals()","org.jfree.data.time.Hour.equals(java.lang.Object)"
"org.jfree.data.time.DayTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.HourTest.testNext()","org.jfree.data.time.Hour.getDayOfMonth()"
"org.jfree.data.time.HourTest.testNext()","org.jfree.data.time.Hour.getMonth()"
"org.jfree.data.time.HourTest.testNext()","org.jfree.data.time.Hour.getYear()"
"org.jfree.data.time.HourTest.testNext()","org.jfree.data.time.Hour.next()"
"org.jfree.data.time.DayTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Second.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Second.<init>(int, int, int, int, int, int)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Minute.getDay()"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Minute.getHourValue()"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Second.<init>(int, org.jfree.data.time.Minute)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Minute.getMinute()"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Second.peg(java.util.Calendar)"
"org.jfree.data.time.MillisecondTest.testEqualsSelf()","org.jfree.data.time.Millisecond.<init>()"
"org.jfree.data.time.MillisecondTest.testEqualsSelf()","org.jfree.data.time.Millisecond.<init>(java.util.Date)"
"org.jfree.data.time.MillisecondTest.testEqualsSelf()","org.jfree.data.time.Millisecond.equals(java.lang.Object)"
"org.jfree.data.time.TimePeriodValueTest.testEquals()","org.jfree.data.time.TimePeriodValue.equals(java.lang.Object)"
"org.jfree.data.time.HourTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Hour.<init>(int, int, int, int)"
"org.jfree.data.time.SecondTest.testEquals()","org.jfree.data.time.Second.equals(java.lang.Object)"
"org.jfree.data.time.HourTest.testEqualsSelf()","org.jfree.data.time.Hour.<init>()"
"org.jfree.data.time.HourTest.testEqualsSelf()","org.jfree.data.time.Hour.<init>(java.util.Date)"
"org.jfree.data.time.HourTest.testEqualsSelf()","org.jfree.data.time.Hour.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.HourTest.testEqualsSelf()","org.jfree.data.time.Hour.equals(java.lang.Object)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.test1161340()","org.jfree.data.time.TimePeriodValuesCollection.removeSeries(org.jfree.data.time.TimePeriodValues)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.test1161340()","org.jfree.data.time.TimePeriodValuesCollection.getSeriesCount()"
"org.jfree.data.time.SecondTest.testNext()","org.jfree.data.time.Second.next()"
"org.jfree.data.time.SecondTest.testNext()","org.jfree.data.time.Hour.getDayOfMonth()"
"org.jfree.data.time.SecondTest.testNext()","org.jfree.data.time.Hour.getMonth()"
"org.jfree.data.time.SecondTest.testNext()","org.jfree.data.time.Minute.getHour()"
"org.jfree.data.time.DayTest.testNext()","org.jfree.data.time.Day.next()"
"org.jfree.data.time.MinuteTest.testEqualsSelf()","org.jfree.data.time.Minute.<init>()"
"org.jfree.data.time.MinuteTest.testEqualsSelf()","org.jfree.data.time.Minute.<init>(java.util.Date)"
"org.jfree.data.time.MinuteTest.testEqualsSelf()","org.jfree.data.time.Minute.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.xy.DefaultWindDatasetTest.testEquals()","org.jfree.data.xy.DefaultWindDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultWindDatasetTest.testEquals()","org.jfree.data.xy.DefaultWindDataset.<init>()"
"org.jfree.data.time.HourTest.testDateConstructor1()","org.jfree.data.time.Hour.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.MinuteTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.DayTest.test1Jan1900Previous()","org.jfree.data.time.Day.previous()"
"org.jfree.data.time.HourTest.testGetEnd()","org.jfree.data.time.Hour.<init>(int, int, int, int)"
"org.jfree.data.time.HourTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.MinuteTest.testHashcode()","org.jfree.data.time.Minute.hashCode()"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testCreateInstance()","org.jfree.chart.axis.PeriodAxisLabelInfo.createInstance(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.MillisecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Millisecond.<init>(int, int, int, int, int, int, int)"
"org.jfree.data.time.MillisecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Millisecond.<init>(int, org.jfree.data.time.Second)"
"org.jfree.data.time.MillisecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Second.getMinute()"
"org.jfree.data.time.MillisecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Second.getSecond()"
"org.jfree.data.time.MillisecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Millisecond.peg(java.util.Calendar)"
"org.jfree.data.time.TimePeriodValueTest.testSerialization()","org.jfree.data.time.TimePeriodValue.equals(java.lang.Object)"
"org.jfree.data.time.TimeSeriesDataItemTest.testEqualsSelf()","org.jfree.data.time.TimeSeriesDataItem.equals(java.lang.Object)"
"org.jfree.data.time.MinuteTest.testGetSerialIndex()","org.jfree.data.time.Minute.getSerialIndex()"
"org.jfree.data.time.SecondTest.testEqualsSelf()","org.jfree.data.time.Second.<init>()"
"org.jfree.data.time.SecondTest.testEqualsSelf()","org.jfree.data.time.Second.<init>(java.util.Date)"
"org.jfree.data.time.SecondTest.testEqualsSelf()","org.jfree.data.time.Second.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.SecondTest.testEqualsSelf()","org.jfree.data.time.Second.equals(java.lang.Object)"
"org.jfree.data.time.MillisecondTest.testSerialization()","org.jfree.data.time.Millisecond.<init>()"
"org.jfree.data.time.MillisecondTest.testSerialization()","org.jfree.data.time.Millisecond.<init>(java.util.Date)"
"org.jfree.data.time.MillisecondTest.testSerialization()","org.jfree.data.time.Millisecond.equals(java.lang.Object)"
"org.jfree.data.time.DayTest.test31Dec9999Previous()","org.jfree.data.time.Day.previous()"
"org.jfree.data.time.MinuteTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Minute.<init>(int, int, int, int, int)"
"org.jfree.data.time.MinuteTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Hour.getDay()"
"org.jfree.data.time.MinuteTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Minute.<init>(int, org.jfree.data.time.Hour)"
"org.jfree.data.time.MinuteTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Minute.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Minute.peg(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Hour.getHour()"
"org.jfree.data.time.HourTest.testFirstHourPrevious()","org.jfree.data.time.Hour.previous()"
"org.jfree.data.xy.DefaultWindDatasetTest.testSerialization()","org.jfree.data.xy.DefaultWindDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultWindDatasetTest.testSerialization()","org.jfree.data.xy.DefaultWindDataset.<init>()"
"org.jfree.data.time.MillisecondTest.testNotCloneable()","org.jfree.data.time.Millisecond.<init>(int, int, int, int, int, int, int)"
"org.jfree.data.time.MillisecondTest.testNotCloneable()","org.jfree.data.time.Millisecond.<init>(int, org.jfree.data.time.Second)"
"org.jfree.data.time.MillisecondTest.testNotCloneable()","org.jfree.data.time.Second.getMinute()"
"org.jfree.data.time.MillisecondTest.testNotCloneable()","org.jfree.data.time.Second.getSecond()"
"org.jfree.data.time.MillisecondTest.testNotCloneable()","org.jfree.data.time.Millisecond.peg(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecond()","org.jfree.data.time.Minute.getFirstMillisecond()"
"org.jfree.data.time.MinuteTest.testNotCloneable()","org.jfree.data.time.Minute.<init>(int, int, int, int, int)"
"org.jfree.data.time.MinuteTest.testNotCloneable()","org.jfree.data.time.Hour.getDay()"
"org.jfree.data.time.MinuteTest.testNotCloneable()","org.jfree.data.time.Minute.<init>(int, org.jfree.data.time.Hour)"
"org.jfree.data.time.MinuteTest.testNotCloneable()","org.jfree.data.time.Minute.peg(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testNotCloneable()","org.jfree.data.time.Hour.getHour()"
"org.jfree.data.time.HourTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Hour.<init>(int, int, int, int)"
"org.jfree.data.xy.DefaultWindDatasetTest.testCloning()","org.jfree.data.xy.DefaultWindDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultWindDatasetTest.testCloning()","org.jfree.data.xy.DefaultWindDataset.<init>()"
"org.jfree.data.time.MillisecondTest.testDateConstructor1()","org.jfree.data.time.Millisecond.getMillisecond()"
"org.jfree.data.time.MillisecondTest.testDateConstructor1()","org.jfree.data.time.Millisecond.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.DayTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Day.<init>(int, int, int)"
"org.jfree.data.time.DayTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Day.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.DayTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Day.peg(java.util.Calendar)"
"org.jfree.data.time.DayTest.testGetFirstMillisecondWithCalendar()","org.jfree.date.SerialDate.createInstance(int, int, int)"
"org.jfree.data.time.DayTest.test31Dec9999Next()","org.jfree.data.time.Day.next()"
"org.jfree.data.time.SecondTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.MinuteTest.testEquals()","org.jfree.data.time.Minute.equals(java.lang.Object)"
"org.jfree.data.time.TimePeriodValuesTest.testEquals()","org.jfree.data.time.TimePeriodValues.setDomainDescription(java.lang.String)"
"org.jfree.data.time.TimePeriodValuesTest.testEquals()","org.jfree.data.time.TimePeriodValues.setRangeDescription(java.lang.String)"
"org.jfree.data.time.HourTest.testFirstHourNext()","org.jfree.data.time.Hour.getYear()"
"org.jfree.data.time.HourTest.testFirstHourNext()","org.jfree.data.time.Hour.next()"
"org.jfree.data.time.MinuteTest.testGetLastMillisecond()","org.jfree.data.time.Minute.getLastMillisecond()"
"org.jfree.data.time.MillisecondTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Millisecond.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.TimeSeriesDataItemTest.testEquals()","org.jfree.data.time.TimeSeriesDataItem.equals(java.lang.Object)"
"org.jfree.data.time.DayTest.testGetLastMillisecond()","org.jfree.data.time.Day.getLastMillisecond()"
"org.jfree.data.time.SecondTest.testDateConstructor2()","org.jfree.data.time.Second.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.DayTest.testEqualsSelf()","org.jfree.data.time.Day.<init>()"
"org.jfree.data.time.DayTest.testEqualsSelf()","org.jfree.data.time.Day.<init>(java.util.Date)"
"org.jfree.data.time.DayTest.testDateConstructor1()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.DayTest.testDateConstructor1()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.DayTest.testDateConstructor1()","org.jfree.data.time.Day.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.HourTest.testParseHour()","org.jfree.data.time.Hour.parseHour(java.lang.String)"
"org.jfree.data.time.HourTest.testGetLastMillisecond()","org.jfree.data.time.Hour.getLastMillisecond()"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.<init>(int, int, int, int, int)"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Hour.getDay()"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.<init>(int, org.jfree.data.time.Hour)"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.peg(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Hour.getHour()"
"org.jfree.data.time.HourTest.testGetSerialIndex()","org.jfree.data.time.Hour.getSerialIndex()"
"org.jfree.data.time.DayTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.xy.DefaultWindDatasetTest.testIndexOf()","org.jfree.data.xy.DefaultWindDataset.getSeriesCount()"
"org.jfree.data.xy.DefaultWindDatasetTest.testIndexOf()","org.jfree.data.xy.DefaultWindDataset.getSeriesKey(int)"
"org.jfree.data.xy.DefaultWindDatasetTest.testIndexOf()","org.jfree.data.general.AbstractSeriesDataset.indexOf(java.lang.Comparable)"
"org.jfree.data.time.TimePeriodValueTest.testEqualsSelf()","org.jfree.data.time.TimePeriodValue.equals(java.lang.Object)"
"org.jfree.data.time.HourTest.testLastHourPrevious()","org.jfree.data.time.Hour.previous()"
"org.jfree.data.time.HourTest.testDateConstructor2()","org.jfree.data.time.Hour.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.SecondTest.testNotCloneable()","org.jfree.data.time.Second.<init>(int, int, int, int, int, int)"
"org.jfree.data.time.SecondTest.testNotCloneable()","org.jfree.data.time.Minute.getDay()"
"org.jfree.data.time.SecondTest.testNotCloneable()","org.jfree.data.time.Minute.getHourValue()"
"org.jfree.data.time.SecondTest.testNotCloneable()","org.jfree.data.time.Second.<init>(int, org.jfree.data.time.Minute)"
"org.jfree.data.time.SecondTest.testNotCloneable()","org.jfree.data.time.Minute.getMinute()"
"org.jfree.data.time.SecondTest.testNotCloneable()","org.jfree.data.time.Second.peg(java.util.Calendar)"
"org.jfree.data.time.SecondTest.testNotCloneable()","org.jfree.data.time.Minute.<init>(int, int, int, int, int)"
"org.jfree.data.time.MinuteTest.testNext()","org.jfree.data.time.Minute.next()"
"org.jfree.data.time.MinuteTest.testNext()","org.jfree.data.time.Hour.getDayOfMonth()"
"org.jfree.data.time.MinuteTest.testNext()","org.jfree.data.time.Hour.getMonth()"
"org.jfree.data.time.MinuteTest.testNext()","org.jfree.data.time.Minute.getHour()"
"org.jfree.data.time.MinuteTest.testDateConstructor1()","org.jfree.data.time.Minute.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.DayTest.testGetSerialIndex()","org.jfree.data.time.Day.getSerialIndex()"
"org.jfree.data.time.DayTest.testHashcode()","org.jfree.data.time.Day.hashCode()"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecond()","org.jfree.data.time.Millisecond.getFirstMillisecond()"
"org.jfree.data.time.DayTest.testDateConstructor2()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.DayTest.testDateConstructor2()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.DayTest.testDateConstructor2()","org.jfree.data.time.Day.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.HourTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Hour.<init>(int, int, int, int)"
"org.jfree.data.time.MillisecondTest.testGetLastMillisecond()","org.jfree.data.time.Millisecond.getLastMillisecond()"
"org.jfree.data.time.SecondTest.testDateConstructor1()","org.jfree.data.time.Second.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecond()","org.jfree.data.time.Second.getFirstMillisecond()"
"org.jfree.data.time.MillisecondTest.testGetEnd()","org.jfree.data.time.Millisecond.<init>(int, int, int, int, int, int, int)"
"org.jfree.data.time.MillisecondTest.testGetEnd()","org.jfree.data.time.Millisecond.<init>(int, org.jfree.data.time.Second)"
"org.jfree.data.time.MillisecondTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.MillisecondTest.testGetEnd()","org.jfree.data.time.Second.getMinute()"
"org.jfree.data.time.MillisecondTest.testGetEnd()","org.jfree.data.time.Second.getSecond()"
"org.jfree.data.time.MillisecondTest.testGetEnd()","org.jfree.data.time.Millisecond.peg(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.DayTest.testGetFirstMillisecond()","org.jfree.data.time.Day.getFirstMillisecond()"
"org.jfree.data.time.HourTest.testHashcode()","org.jfree.data.time.Hour.hashCode()"
"org.jfree.data.time.MillisecondTest.testEquals()","org.jfree.data.time.Millisecond.equals(java.lang.Object)"
"org.jfree.data.time.MinuteTest.test1611872()","org.jfree.data.time.Minute.previous()"
"org.jfree.data.time.MillisecondTest.test943985()","org.jfree.data.time.Millisecond.<init>(java.util.Date)"
"org.jfree.data.time.MillisecondTest.test943985()","org.jfree.data.time.Millisecond.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.MillisecondTest.test943985()","org.jfree.data.time.Millisecond.getFirstMillisecond()"
"org.jfree.data.time.MillisecondTest.test943985()","org.jfree.data.time.Millisecond.getLastMillisecond()"
"org.jfree.data.time.SecondTest.testHashcode()","org.jfree.data.time.Second.hashCode()"
"org.jfree.data.time.SecondTest.testHashcode()","org.jfree.data.time.Second.equals(java.lang.Object)"
"org.jfree.data.time.DayTest.testEquals()","org.jfree.data.time.Day.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultWindDatasetTest.testGetSeriesKey()","org.jfree.data.xy.DefaultWindDataset.getSeriesKey(int)"
"org.jfree.data.time.SecondTest.testSerialization()","org.jfree.data.time.Second.<init>()"
"org.jfree.data.time.SecondTest.testSerialization()","org.jfree.data.time.Second.<init>(java.util.Date)"
"org.jfree.data.time.SecondTest.testSerialization()","org.jfree.data.time.Second.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.SecondTest.testSerialization()","org.jfree.data.time.Second.equals(java.lang.Object)"
"org.jfree.data.time.DayTest.testSerialization()","org.jfree.data.time.Day.equals(java.lang.Object)"
"org.jfree.data.time.HourTest.testSerialization()","org.jfree.data.time.Hour.<init>()"
"org.jfree.data.time.HourTest.testSerialization()","org.jfree.data.time.Hour.<init>(java.util.Date)"
"org.jfree.data.time.HourTest.testSerialization()","org.jfree.data.time.Hour.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.HourTest.testSerialization()","org.jfree.data.time.Hour.equals(java.lang.Object)"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Millisecond.<init>(int, int, int, int, int, int, int)"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Millisecond.<init>(int, org.jfree.data.time.Second)"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Second.getMinute()"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Second.getSecond()"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Millisecond.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Millisecond.peg(java.util.Calendar)"
"org.jfree.data.time.DayTest.testParseDay()","org.jfree.data.time.Day.parseDay(java.lang.String)"
"org.jfree.data.time.SecondTest.testGetLastMillisecond()","org.jfree.data.time.Second.getLastMillisecond()"
"org.jfree.data.time.MinuteTest.testDateConstructor2()","org.jfree.data.time.Minute.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.SecondTest.testGetSerialIndex()","org.jfree.data.time.Second.getSerialIndex()"
"org.jfree.data.time.SecondTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.TimePeriodValuesTest.testClone()","org.jfree.data.time.TimePeriodValues.clone()"
"org.jfree.data.time.TimePeriodValuesTest.testClone()","org.jfree.data.time.TimePeriodValues.update(int, java.lang.Number)"
"org.jfree.data.time.MillisecondTest.testGetSerialIndex()","org.jfree.data.time.Millisecond.getSerialIndex()"
"org.jfree.data.time.DayTest.testNotCloneable()","org.jfree.data.time.Day.<init>(int, int, int)"
"org.jfree.data.time.DayTest.testNotCloneable()","org.jfree.data.time.Day.peg(java.util.Calendar)"
"org.jfree.data.time.DayTest.testNotCloneable()","org.jfree.date.SerialDate.createInstance(int, int, int)"
"org.jfree.data.time.HourTest.testGetStart()","org.jfree.data.time.Hour.<init>(int, int, int, int)"
"org.jfree.data.time.HourTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Millisecond.<init>(int, int, int, int, int, int, int)"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Millisecond.<init>(int, org.jfree.data.time.Second)"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Second.getMinute()"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Second.getSecond()"
"org.jfree.data.time.MillisecondTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Millisecond.peg(java.util.Calendar)"
"org.jfree.data.time.MinuteTest.testSerialization()","org.jfree.data.time.Minute.<init>()"
"org.jfree.data.time.MinuteTest.testSerialization()","org.jfree.data.time.Minute.<init>(java.util.Date)"
"org.jfree.data.time.MinuteTest.testSerialization()","org.jfree.data.time.Minute.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.HourTest.testNotCloneable()","org.jfree.data.time.Hour.<init>(int, int, int, int)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Second.<init>(int, int, int, int, int, int)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.getDay()"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.getHourValue()"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Second.<init>(int, org.jfree.data.time.Minute)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.getMinute()"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Second.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Second.peg(java.util.Calendar)"
"org.jfree.data.time.SecondTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Minute.<init>(int, int, int, int, int)"
"org.jfree.data.time.TimePeriodValuesTest.test1161329()","org.jfree.data.time.TimePeriodValues.delete(int, int)"
"org.jfree.data.time.DayTest.test1Jan1900Next()","org.jfree.data.time.Day.next()"
"org.jfree.data.time.MillisecondTest.testGetStart()","org.jfree.data.time.Millisecond.<init>(int, int, int, int, int, int, int)"
"org.jfree.data.time.MillisecondTest.testGetStart()","org.jfree.data.time.Millisecond.<init>(int, org.jfree.data.time.Second)"
"org.jfree.data.time.MillisecondTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.MillisecondTest.testGetStart()","org.jfree.data.time.Second.getMinute()"
"org.jfree.data.time.MillisecondTest.testGetStart()","org.jfree.data.time.Second.getSecond()"
"org.jfree.data.time.MillisecondTest.testGetStart()","org.jfree.data.time.Millisecond.peg(java.util.Calendar)"
"org.jfree.data.time.HourTest.testGetFirstMillisecond()","org.jfree.data.time.Hour.getFirstMillisecond()"
"org.jfree.data.time.DayTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Day.<init>(int, int, int)"
"org.jfree.data.time.DayTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Day.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.DayTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Day.peg(java.util.Calendar)"
"org.jfree.data.time.DayTest.testGetLastMillisecondWithCalendar()","org.jfree.date.SerialDate.createInstance(int, int, int)"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Second.<init>(int, int, int, int, int, int)"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Minute.getDay()"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Minute.getHourValue()"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Second.<init>(int, org.jfree.data.time.Minute)"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Minute.getMinute()"
"org.jfree.data.time.SecondTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Second.peg(java.util.Calendar)"
"org.jfree.data.time.MillisecondTest.testDateConstructor2()","org.jfree.data.time.Millisecond.getMillisecond()"
"org.jfree.data.time.MillisecondTest.testDateConstructor2()","org.jfree.data.time.Millisecond.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testCloning()","org.jfree.chart.renderer.category.CategoryStepRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testCloning()","org.jfree.chart.renderer.category.CategoryStepRenderer.<init>(boolean)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testCloning()","org.jfree.chart.renderer.category.LineRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testCloning()","org.jfree.chart.renderer.category.LineRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testCloning()","org.jfree.chart.renderer.category.AreaRenderer.clone()"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testCloning()","org.jfree.chart.renderer.category.StackedAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCloning()","org.jfree.chart.renderer.category.StackedBarRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testCloning()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testCloning()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testCloning()","org.jfree.chart.renderer.category.IntervalBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testCloning()","org.jfree.chart.renderer.category.IntervalBarRenderer.<init>()"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning_LegendItemToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning1()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning1()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning1()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemLabelGenerator(int, org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testCloning()","org.jfree.chart.renderer.category.ScatterRenderer.clone()"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testCloning()","org.jfree.chart.renderer.category.StatisticalBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testCloning()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning_LegendItemLabelGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testCloning()","org.jfree.chart.renderer.category.LineAndShapeRenderer.clone()"
"org.jfree.chart.renderer.category.DefaultCategoryItemRendererTest.testCloning()","org.jfree.chart.renderer.category.DefaultCategoryItemRenderer.<init>()"
"org.jfree.chart.renderer.category.DefaultCategoryItemRendererTest.testCloning()","org.jfree.chart.renderer.category.LineAndShapeRenderer.clone()"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning2()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning2()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemLabelGenerator(int, org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning2()","org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.<init>()"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testCloning()","org.jfree.chart.renderer.category.WaterfallBarRenderer.setFirstBarPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testCloning()","org.jfree.chart.renderer.category.WaterfallBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testCloning_LegendItemURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testCloning()","org.jfree.chart.renderer.category.StackedBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.BarRendererTest.testCloning()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testCloning()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testCloning()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.<init>()"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testCloning()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, boolean, boolean)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testCloning()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.renderer.category.AreaRendererTest.testCloning()","org.jfree.chart.renderer.category.AreaRenderer.clone()"
"org.jfree.chart.renderer.category.LayeredBarRendererTest.testCloning()","org.jfree.chart.renderer.category.LayeredBarRenderer.<init>()"
"org.jfree.chart.renderer.category.BarRenderer3DTest.testCloning()","org.jfree.chart.renderer.category.BarRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testCloning()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)"
"org.jfree.data.xy.XYSeriesTest.testCloning3()","org.jfree.data.xy.XYSeries.clone()"
"org.jfree.data.xy.DefaultTableXYDatasetTest.testSerialization()","org.jfree.data.xy.DefaultTableXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.XYSeriesCollectionTest.testSerialization()","org.jfree.data.xy.XYSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.XYSeriesTest.testSerialization()","org.jfree.data.xy.XYSeries.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultTableXYDatasetTest.testAddSeries()","org.jfree.data.xy.DefaultTableXYDataset.setAutoWidth(boolean)"
"org.jfree.data.xy.XYSeriesTest.testEquals()","org.jfree.data.general.Series.setKey(java.lang.Comparable)"
"org.jfree.data.xy.TableXYDatasetTest.testTableXYDataset()","org.jfree.data.xy.DefaultTableXYDataset.removeSeries(org.jfree.data.xy.XYSeries)"
"org.jfree.data.xy.XYSeriesCollectionTest.testCloning()","org.jfree.data.xy.XYSeriesCollection.clone()"
"org.jfree.data.xy.XYSeriesCollectionTest.testEquals()","org.jfree.data.xy.XYSeriesCollection.setAutoWidth(boolean)"
"org.jfree.data.xy.XYSeriesCollectionTest.testEquals()","org.jfree.data.xy.XYSeriesCollection.setIntervalPositionFactor(double)"
"org.jfree.data.xy.TableXYDatasetTest.testCloning()","org.jfree.data.xy.DefaultTableXYDataset.clone()"
"org.jfree.data.xy.TableXYDatasetTest.testEquals()","org.jfree.data.xy.DefaultTableXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultTableXYDatasetTest.testEquals()","org.jfree.data.xy.DefaultTableXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.XYSeriesTest.testCloning2()","org.jfree.data.xy.XYSeries.clone()"
"org.jfree.data.xy.XYSeriesTest.testHashCode()","org.jfree.data.xy.XYSeries.hashCode()"
"org.jfree.data.xy.DefaultTableXYDatasetTest.testCloning()","org.jfree.data.xy.DefaultTableXYDataset.clone()"
"org.jfree.data.xy.TableXYDatasetTest.testSerialization()","org.jfree.data.xy.DefaultTableXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.TableXYDatasetTest.testPrune()","org.jfree.data.xy.DefaultTableXYDataset.prune()"
"org.jfree.data.xy.TableXYDatasetTest.testPrune()","org.jfree.data.xy.DefaultTableXYDataset.removeSeries(int)"
"org.jfree.data.xy.TableXYDatasetTest.testRemoveAllValuesForX()","org.jfree.data.xy.DefaultTableXYDataset.removeAllValuesForX(java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testCloning()","org.jfree.data.xy.XYSeries.clone()"
"org.jfree.chart.LineChartTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.LineChart3DTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.StackedBarChart3DTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.AreaChartTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.StackedAreaChartTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.plot.CategoryPlotTest.testDatasetIndices()","org.jfree.chart.plot.CategoryPlot.getDatasetCount()"
"org.jfree.chart.BarChartTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.StackedBarChartTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.BarChart3DTest.testReplaceDataset()","org.jfree.data.general.DatasetUtilities.createCategoryDataset(java.lang.String, java.lang.String, java.lang.Number[][])"
"org.jfree.chart.renderer.category.BarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(int, java.lang.Boolean)"
"org.jfree.chart.renderer.category.BarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testEquals()","org.jfree.chart.renderer.category.ScatterRenderer.setDrawOutlines(boolean)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testEquals()","org.jfree.chart.renderer.category.ScatterRenderer.setUseFillPaint(boolean)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testEquals()","org.jfree.chart.renderer.category.ScatterRenderer.setUseOutlinePaint(boolean)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testEquals()","org.jfree.chart.renderer.category.ScatterRenderer.setUseSeriesOffset(boolean)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testEquals()","org.jfree.chart.renderer.category.ScatterRenderer.setBaseShapesFilled(boolean)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testEquals()","org.jfree.chart.renderer.category.ScatterRenderer.setSeriesShapesFilled(int, boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testPaintLookup()","org.jfree.chart.renderer.AbstractRenderer.getBasePaint()"
"org.jfree.chart.renderer.AbstractRendererTest.testPaintLookup()","org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesPaint(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setBaseShapesFilled(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setBaseShapesVisible(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setDrawSeriesLineAsPath(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setGapThreshold(double)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setGapThresholdType(org.jfree.util.UnitType)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setPlotDiscontinuous(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setPlotImages(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setPlotLines(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setShapesFilled(boolean)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setLegendLine(java.awt.Shape)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setSeriesShapesFilled(int, java.lang.Boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLegendLine(java.awt.Shape)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(int, java.lang.Boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testFillPaintLookup()","org.jfree.chart.renderer.AbstractRenderer.getBaseFillPaint()"
"org.jfree.chart.renderer.AbstractRendererTest.testFillPaintLookup()","org.jfree.chart.renderer.AbstractRenderer.getSeriesFillPaint(int)"
"org.jfree.chart.renderer.AbstractRendererTest.testFillPaintLookup()","org.jfree.chart.renderer.AbstractRenderer.lookupSeriesFillPaint(int)"
"org.jfree.chart.renderer.AbstractRendererTest.testFillPaintLookup()","org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesFillPaint(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.getDrawOutlines()"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseLinesVisible(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesFilled(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawOutlines(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLinesVisible(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setShapesFilled(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setShapesVisible(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseFillPaint(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setUseOutlinePaint(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesLinesVisible(int, boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesFilled(int, boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setSeriesShapesVisible(int, boolean)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setSeriesFillPaint(int, java.awt.Paint)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testEquals()","org.jfree.chart.renderer.xy.VectorRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testEquals()","org.jfree.chart.renderer.xy.VectorRenderer.<init>()"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testCloning()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setLegendLine(java.awt.Shape)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testCloning()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.setSeriesShapesFilled(int, java.lang.Boolean)"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testEquals()","org.jfree.chart.renderer.DefaultPolarItemRenderer.setSeriesFilled(int, boolean)"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testEquals()","org.jfree.chart.renderer.DefaultPolarItemRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.IntervalBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testFindRangeBounds()","org.jfree.data.category.DefaultIntervalCategoryDataset.generateKeys(int, java.lang.String)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible(int, java.lang.Boolean)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)"
"org.jfree.chart.plot.SpiderWebPlotTest.testGetLegendItems()","org.jfree.chart.plot.SpiderWebPlot.getLegendItems()"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testCloning()","org.jfree.chart.renderer.DefaultPolarItemRenderer.clone()"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testCloning()","org.jfree.chart.renderer.DefaultPolarItemRenderer.setSeriesFilled(int, boolean)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.category.LineAndShapeRenderer.setItemMargin(double)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseOutlinePaint(boolean)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.category.LineAndShapeRenderer.setUseSeriesOffset(boolean)"
"org.jfree.data.gantt.TaskTest.testGetSubTaskCount()","org.jfree.data.gantt.Task.removeSubtask(org.jfree.data.gantt.Task)"
"org.jfree.chart.axis.AxisSpaceTest.testCloning()","org.jfree.chart.axis.AxisSpace.clone()"
"org.jfree.chart.axis.AxisSpaceTest.testEquals()","org.jfree.chart.axis.AxisSpace.setLeft(double)"
"org.jfree.chart.axis.AxisSpaceTest.testEquals()","org.jfree.chart.axis.AxisSpace.setRight(double)"
"org.jfree.chart.axis.AxisSpaceTest.testEquals()","org.jfree.chart.axis.AxisSpace.setTop(double)"
"org.jfree.chart.axis.AxisSpaceTest.testEquals()","org.jfree.chart.axis.AxisSpace.setBottom(double)"
"org.jfree.chart.axis.AxisSpaceTest.testHashCode()","org.jfree.chart.axis.AxisSpace.hashCode()"
"org.jfree.data.xy.XYSeriesTest.testUpdate2()","org.jfree.data.xy.XYSeries.update(java.lang.Number, java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testUpdate()","org.jfree.data.xy.XYSeries.update(java.lang.Number, java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testUpdateXY()","org.jfree.data.xy.XYSeries.update(java.lang.Number, java.lang.Number)"
"org.jfree.chart.axis.DateTickUnitTest.testSerialization()","org.jfree.chart.axis.DateTickUnit.equals(java.lang.Object)"
"org.jfree.chart.axis.DateAxisTest.testCloning()","org.jfree.chart.axis.DateAxis.clone()"
"org.jfree.chart.axis.DateTickUnitTest.testHashCode()","org.jfree.chart.axis.DateTickUnit.hashCode()"
"org.jfree.chart.axis.DateAxisTest.testJava2DToValue()","org.jfree.chart.axis.DateAxis.<init>()"
"org.jfree.chart.axis.DateAxisTest.testJava2DToValue()","org.jfree.chart.axis.DateAxis.java2DToValue(double, java.awt.geom.Rectangle2D, org.jfree.ui.RectangleEdge)"
"org.jfree.chart.axis.DateAxisTest.testJava2DToValue()","org.jfree.chart.axis.DateAxis.setRange(double, double)"
"org.jfree.chart.axis.DateTickUnitTest.testEquals()","org.jfree.chart.axis.DateTickUnit.equals(java.lang.Object)"
"org.jfree.chart.axis.DateAxisTest.testHashCode()","org.jfree.chart.axis.DateAxis.hashCode()"
"org.jfree.chart.axis.DateAxisTest.testHashCode()","org.jfree.chart.axis.DateAxis.equals(java.lang.Object)"
"org.jfree.data.category.CategoryToPieDatasetTest.testConstructor()","org.jfree.data.category.CategoryToPieDataset.getKeys()"
"org.jfree.data.category.CategoryToPieDatasetTest.testConstructor()","org.jfree.data.category.CategoryToPieDataset.getUnderlyingDataset()"
"org.jfree.data.category.CategoryToPieDatasetTest.testConstructor()","org.jfree.data.category.CategoryToPieDataset.getValue(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalSeriesCollectionTest.testCloning()","org.jfree.data.xy.XYIntervalSeriesCollection.clone()"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.WaterfallBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.WaterfallBarRenderer.<init>()"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.WaterfallBarRenderer.<init>(java.awt.Paint, java.awt.Paint, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength(double)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.WaterfallBarRenderer.<init>()"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.WaterfallBarRenderer.<init>(java.awt.Paint, java.awt.Paint, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength(double)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testEquals()","org.jfree.chart.renderer.category.WaterfallBarRenderer.setLastBarPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testEquals()","org.jfree.chart.renderer.category.WaterfallBarRenderer.setNegativeBarPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testEquals()","org.jfree.chart.renderer.category.WaterfallBarRenderer.setPositiveBarPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testEquals()","org.jfree.chart.renderer.category.WaterfallBarRenderer.setFirstBarPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.WaterfallBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.WaterfallBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.WaterfallBarRenderer.<init>()"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.WaterfallBarRenderer.<init>(java.awt.Paint, java.awt.Paint, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.BarRenderer.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.renderer.category.WaterfallBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.BarRenderer.setMinimumBarLength(double)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testEquals()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testEquals()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.setSeriesToGroupMap(org.jfree.data.KeyToGroupMap)"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.GroupedStackedBarRenderer.<init>()"
"org.jfree.chart.renderer.category.GroupedStackedBarRendererTest.testPublicCloneable()","org.jfree.data.KeyToGroupMap.<init>()"
"org.jfree.data.xy.DefaultTableXYDatasetTest.testGetSeries()","org.jfree.data.xy.DefaultTableXYDataset.getSeries(int)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindStackedRangeBoundsForTableXYDataset1()","org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)"
"org.jfree.data.xy.TableXYDatasetTest.testAutoPrune()","org.jfree.data.xy.DefaultTableXYDataset.removeSeries(int)"
"org.jfree.data.xy.TableXYDatasetTest.test788597()","org.jfree.data.xy.DefaultTableXYDataset.removeAllSeries()"
"org.jfree.data.time.TimePeriodValuesTest.getMaxEndIndex()","org.jfree.data.time.TimePeriodValues.getMaxEndIndex()"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testGetDomainBoundsWithoutInterval()","org.jfree.data.time.TimePeriodValuesCollection.getDomainBounds(boolean)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testGetDomainBoundsWithoutInterval()","org.jfree.data.time.TimePeriodValuesCollection.setDomainIsPointsInTime(boolean)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testGetDomainBoundsWithInterval()","org.jfree.data.time.TimePeriodValuesCollection.getDomainBounds(boolean)"
"org.jfree.data.KeyToGroupMapTest.testGetGroup()","org.jfree.data.KeyToGroupMap.mapKeyToGroup(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.KeyToGroupMapTest.testGetGroup()","org.jfree.data.KeyToGroupMap.getGroup(java.lang.Comparable)"
"org.jfree.data.KeyToGroupMapTest.testGetGroup()","org.jfree.data.KeyToGroupMap.<init>(java.lang.Comparable)"
"org.jfree.data.KeyToGroupMapTest.testEquals()","org.jfree.data.KeyToGroupMap.equals(java.lang.Object)"
"org.jfree.data.KeyToGroupMapTest.testCloning()","org.jfree.data.KeyToGroupMap.clone()"
"org.jfree.data.KeyToGroupMapTest.testKeyCount()","org.jfree.data.KeyToGroupMap.getKeyCount(java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindStackedRangeBounds_CategoryDataset3()","org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset, org.jfree.data.KeyToGroupMap)"
"org.jfree.data.KeyToGroupMapTest.testSerialization()","org.jfree.data.KeyToGroupMap.equals(java.lang.Object)"
"org.jfree.data.KeyToGroupMapTest.testGroupCount()","org.jfree.data.KeyToGroupMap.getGroupCount()"
"org.jfree.data.general.DatasetUtilitiesTest.testStackedRangeWithMap()","org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset, org.jfree.data.KeyToGroupMap)"
"org.jfree.data.KeyToGroupMapTest.testGetGroupIndex()","org.jfree.data.KeyToGroupMap.getGroupIndex(java.lang.Comparable)"
"org.jfree.data.KeyToGroupMapTest.testMapKeyToGroup()","org.jfree.data.KeyToGroupMap.mapKeyToGroup(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.KeyToGroupMapTest.testMapKeyToGroup()","org.jfree.data.KeyToGroupMap.getGroup(java.lang.Comparable)"
"org.jfree.data.KeyToGroupMapTest.testMapKeyToGroup()","org.jfree.data.KeyToGroupMap.<init>(java.lang.Comparable)"
"org.jfree.chart.plot.CrosshairTest.testSerialization()","org.jfree.chart.plot.Crosshair.equals(java.lang.Object)"
"org.jfree.chart.plot.CrosshairTest.testSerialization()","org.jfree.chart.labels.StandardCrosshairLabelGenerator.<init>()"
"org.jfree.chart.plot.CrosshairTest.testSerialization()","org.jfree.chart.labels.StandardCrosshairLabelGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.plot.CrosshairTest.testSerialization()","org.jfree.chart.plot.Crosshair.<init>(double, java.awt.Paint, java.awt.Stroke)"
"org.jfree.chart.panel.CrosshairOverlayTest.testCloning()","org.jfree.chart.panel.CrosshairOverlay.clone()"
"org.jfree.chart.panel.CrosshairOverlayTest.testCloning()","org.jfree.chart.panel.CrosshairOverlay.addDomainCrosshair(org.jfree.chart.plot.Crosshair)"
"org.jfree.chart.panel.CrosshairOverlayTest.testCloning()","org.jfree.chart.panel.CrosshairOverlay.addRangeCrosshair(org.jfree.chart.plot.Crosshair)"
"org.jfree.chart.plot.CrosshairTest.testCloning()","org.jfree.chart.plot.Crosshair.clone()"
"org.jfree.chart.plot.CrosshairTest.testHashCode()","org.jfree.chart.plot.Crosshair.hashCode()"
"org.jfree.chart.panel.CrosshairOverlayTest.testSerialization()","org.jfree.chart.panel.CrosshairOverlay.addDomainCrosshair(org.jfree.chart.plot.Crosshair)"
"org.jfree.chart.panel.CrosshairOverlayTest.testSerialization()","org.jfree.chart.panel.CrosshairOverlay.addRangeCrosshair(org.jfree.chart.plot.Crosshair)"
"org.jfree.chart.panel.CrosshairOverlayTest.testSerialization()","org.jfree.chart.panel.AbstractOverlay.<init>()"
"org.jfree.chart.panel.CrosshairOverlayTest.testSerialization()","org.jfree.chart.panel.CrosshairOverlay.<init>()"
"org.jfree.chart.panel.CrosshairOverlayTest.testSerialization()","org.jfree.chart.panel.CrosshairOverlay.equals(java.lang.Object)"
"org.jfree.chart.panel.CrosshairOverlayTest.testSerialization()","org.jfree.chart.plot.Crosshair.<init>(double)"
"org.jfree.chart.axis.CategoryTickTest.testEquals()","org.jfree.text.TextFragment.<init>(java.lang.String, java.awt.Font)"
"org.jfree.chart.axis.CategoryTickTest.testEquals()","org.jfree.text.TextLine.<init>(java.lang.String)"
"org.jfree.chart.axis.CategoryTickTest.testEquals()","org.jfree.text.TextLine.<init>(java.lang.String, java.awt.Font)"
"org.jfree.chart.axis.CategoryTickTest.testEquals()","org.jfree.chart.axis.CategoryTick.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryTickTest.testHashCode()","org.jfree.chart.axis.CategoryTick.hashCode()"
"org.jfree.chart.axis.CategoryTickTest.testHashCode()","org.jfree.text.TextFragment.<init>(java.lang.String, java.awt.Font)"
"org.jfree.chart.axis.CategoryTickTest.testHashCode()","org.jfree.text.TextLine.<init>(java.lang.String)"
"org.jfree.chart.axis.CategoryTickTest.testHashCode()","org.jfree.text.TextLine.<init>(java.lang.String, java.awt.Font)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYBlockRenderer.clone()"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYBlockRenderer.getPaintScale()"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYBlockRenderer.setPaintScale(org.jfree.chart.renderer.PaintScale)"
"org.jfree.chart.renderer.LookupPaintScaleTest.testEquals()","org.jfree.chart.renderer.LookupPaintScale.add(double, java.awt.Paint)"
"org.jfree.chart.renderer.LookupPaintScaleTest.testEquals()","org.jfree.chart.renderer.LookupPaintScale.equals(java.lang.Object)"
"org.jfree.chart.renderer.LookupPaintScaleTest.testGeneral()","org.jfree.chart.renderer.LookupPaintScale.getPaint(double)"
"org.jfree.chart.renderer.LookupPaintScaleTest.testCloning()","org.jfree.chart.renderer.LookupPaintScale.clone()"
"org.jfree.chart.renderer.LookupPaintScaleTest.testSerialization()","org.jfree.chart.renderer.LookupPaintScale.add(double, java.awt.Paint)"
"org.jfree.chart.renderer.LookupPaintScaleTest.testSerialization()","org.jfree.chart.renderer.LookupPaintScale.equals(java.lang.Object)"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testCloning()","org.jfree.data.time.ohlc.OHLCSeriesCollection.clone()"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testCloning()","org.jfree.chart.renderer.xy.HighLowRenderer.clone()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testCloning()","org.jfree.chart.renderer.xy.CandlestickRenderer.clone()"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testCloning()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.clone()"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorPaint(java.awt.Paint)"
"org.jfree.data.category.SlidingCategoryDatasetTest.testCloning()","org.jfree.data.category.SlidingCategoryDataset.clone()"
"org.jfree.data.category.SlidingCategoryDatasetTest.testCloning()","org.jfree.data.category.SlidingCategoryDataset.getUnderlyingDataset()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testCloning()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.clone()"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.getLegendLine()"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar(java.awt.Shape)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testCloning()","org.jfree.data.statistics.SimpleHistogramDataset.clone()"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testCloning_LegendItemToolTipGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLine3DRenderer.setWallPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLine3DRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLine3DRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYStepRenderer.clone()"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testCloning2()","org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorStroke(java.awt.Stroke)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testCloning()","org.jfree.data.xy.VectorSeriesCollection.clone()"
"org.jfree.chart.renderer.xy.WindItemRendererTest.testCloning()","org.jfree.chart.renderer.xy.WindItemRenderer.clone()"
"org.jfree.data.general.DefaultKeyedValues2DDatasetTest.testCloning()","org.jfree.data.general.DefaultKeyedValues2DDataset.<init>()"
"org.jfree.data.general.DefaultKeyedValues2DDatasetTest.testCloning()","org.jfree.data.category.DefaultCategoryDataset.clone()"
"org.jfree.data.gantt.TaskSeriesTest.testCloning()","org.jfree.data.gantt.TaskSeries.clone()"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYDotRenderer.clone()"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.clone()"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testCloning()","org.jfree.chart.renderer.xy.YIntervalRenderer.clone()"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testCloning()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addAnnotation(org.jfree.chart.annotations.XYAnnotation, org.jfree.ui.Layer)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testCloning()","org.jfree.chart.renderer.xy.VectorRenderer.clone()"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setLegendLine(java.awt.Shape)"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYSplineRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYSplineRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYSplineRenderer.<init>(int, org.jfree.chart.renderer.xy.XYSplineRenderer$FillType)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testCloning()","org.jfree.chart.renderer.xy.DeviationRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testCloning()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>()"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testCloning()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>(boolean, boolean)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath(boolean)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.clone()"
"org.jfree.data.DefaultKeyedValues2DTest.testCloning()","org.jfree.data.DefaultKeyedValues2D.clone()"
"org.jfree.data.DefaultKeyedValues2DTest.testCloning()","org.jfree.data.DefaultKeyedValues2D.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYBubbleRenderer.clone()"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testCloning_LegendItemLabelGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testCloning()","org.jfree.data.xy.MatrixSeriesCollection.clone()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYAreaRenderer.clone()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testCloning()","org.jfree.chart.renderer.xy.XYAreaRenderer.setLegendArea(java.awt.Shape)"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.testCloning()","org.jfree.data.xy.YIntervalSeriesCollection.clone()"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testCloning()","org.jfree.chart.renderer.xy.XYAreaRenderer2.clone()"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testCloning()","org.jfree.chart.renderer.xy.XYAreaRenderer2.setLegendArea(java.awt.Shape)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testCloning()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.clone()"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testCloning_LegendItemURLGenerator()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetSeries()","org.jfree.data.gantt.TaskSeriesCollection.getSeries(java.lang.Comparable)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testGetSeries()","org.jfree.data.gantt.TaskSeriesCollection.getSeries(int)"
"org.jfree.chart.BarChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.BarChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.BarChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.XYBarChartTest.testReplaceDataset()","org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.LineChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.LineChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.AreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.AreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.BarChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.BarChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.ScatterPlotTest.testReplaceDataset()","org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.XYAreaChartTest.testReplaceDataset()","org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.BarChart3DTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.BarChart3DTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.XYBarRenderer.setUseYInterval(boolean)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.XYBarRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.XYLineChartTest.testReplaceDataset()","org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.LineChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.LineChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.LineChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.XYStepAreaChartTest.testReplaceDataset()","org.jfree.chart.plot.XYPlot.setDataset(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.AreaChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.AreaChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.AreaChartTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.LineChart3DTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.LineChart3DTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.LineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.LineAndShapeRenderer.<init>(boolean, boolean)"
"org.jfree.chart.BarChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.BarChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.BarChartTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.LineChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.LineChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.LineChartTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setAutoPopulateSeriesShape(boolean)"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.setDrawOutlines(boolean)"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLinePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.setGuideLinesVisible(boolean)"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.setPaintScale(org.jfree.chart.renderer.PaintScale)"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.setUseFillPaint(boolean)"
"org.jfree.chart.renderer.xy.XYShapeRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYShapeRenderer.setUseOutlinePaint(boolean)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testEquals()","org.jfree.data.xy.VectorSeriesCollection.addSeries(org.jfree.data.xy.VectorSeries)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testEquals()","org.jfree.data.xy.VectorSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testEquals()","org.jfree.data.xy.VectorSeriesCollection.<init>()"
"org.jfree.data.xy.VectorDataItemTest.testEquals()","org.jfree.data.xy.VectorDataItem.<init>(double, double, double, double)"
"org.jfree.data.xy.VectorDataItemTest.testEquals()","org.jfree.data.xy.Vector.<init>(double, double)"
"org.jfree.data.xy.VectorDataItemTest.testEquals()","org.jfree.data.xy.XYCoordinate.<init>(double, double)"
"org.jfree.data.xy.VectorSeriesTest.testEquals()","org.jfree.data.ComparableObjectSeries.remove(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testEquals()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testEquals()","org.jfree.data.xy.VectorSeries.add(double, double, double, double)"
"org.jfree.data.xy.VectorSeriesTest.testEquals()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testSerialization()","org.jfree.data.xy.VectorSeriesCollection.addSeries(org.jfree.data.xy.VectorSeries)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testSerialization()","org.jfree.data.xy.VectorSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testSerialization()","org.jfree.data.xy.VectorSeriesCollection.<init>()"
"org.jfree.data.xy.VectorDataItemTest.testSerialization()","org.jfree.data.xy.VectorDataItem.<init>(double, double, double, double)"
"org.jfree.data.xy.VectorDataItemTest.testSerialization()","org.jfree.data.xy.Vector.<init>(double, double)"
"org.jfree.data.xy.VectorDataItemTest.testSerialization()","org.jfree.data.xy.XYCoordinate.<init>(double, double)"
"org.jfree.data.xy.VectorDataItemTest.testHashcode()","org.jfree.data.ComparableObjectItem.hashCode()"
"org.jfree.data.xy.VectorTest.testSerialization()","org.jfree.data.xy.Vector.equals(java.lang.Object)"
"org.jfree.data.xy.VectorTest.testHashcode()","org.jfree.data.xy.Vector.hashCode()"
"org.jfree.data.xy.VectorSeriesTest.testSerialization()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testSerialization()","org.jfree.data.xy.VectorSeries.add(double, double, double, double)"
"org.jfree.data.xy.VectorSeriesTest.testSerialization()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.VectorTest.testEquals()","org.jfree.data.xy.Vector.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testHashcode()","org.jfree.chart.renderer.xy.VectorRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testHashcode()","org.jfree.chart.renderer.xy.VectorRenderer.<init>()"
"org.jfree.chart.renderer.xy.VectorRendererTest.testSerialization()","org.jfree.chart.renderer.xy.VectorRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testSerialization()","org.jfree.chart.renderer.xy.VectorRenderer.<init>()"
"org.jfree.data.xy.XYSeriesTest.testGetMinX()","org.jfree.data.xy.XYSeries.getMinX()"
"org.jfree.data.xy.XYSeriesTest.testRemove2()","org.jfree.data.xy.XYSeries.remove(int)"
"org.jfree.data.statistics.RegressionTest.testPowerRegression1b()","org.jfree.data.statistics.Regression.getPowerRegression(org.jfree.data.xy.XYDataset, int)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMinimumRangeValue()","org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(org.jfree.data.xy.XYDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMinimumRangeValue()","org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.statistics.RegressionTest.testOLSRegression1b()","org.jfree.data.statistics.Regression.getOLSRegression(org.jfree.data.xy.XYDataset, int)"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetRangeUpperBound()","org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound(boolean)"
"org.jfree.data.xy.XYSeriesTest.testGetMaxY2()","org.jfree.data.xy.XYSeries.addOrUpdate(double, double)"
"org.jfree.data.xy.XYSeriesTest.testIndexOf()","org.jfree.data.xy.XYSeries.indexOf(java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testIndexOf3()","org.jfree.data.xy.XYSeries.indexOf(java.lang.Number)"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetRangeLowerBound()","org.jfree.data.xy.XYSeriesCollection.getRangeLowerBound(boolean)"
"org.jfree.data.xy.XYSeriesTest.testUpdateByIndex3()","org.jfree.data.xy.XYSeries.updateByIndex(int, java.lang.Number)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMaximumRangeValue()","org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.XYSeriesTest.testSetMaximumItemCount2()","org.jfree.data.xy.XYSeries.setMaximumItemCount(int)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMaximumDomainValue()","org.jfree.data.general.DatasetUtilities.findMaximumDomainValue(org.jfree.data.xy.XYDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds2()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.XYSeriesTest.testAddOrUpdate()","org.jfree.data.xy.XYSeries.addOrUpdate(java.lang.Number, java.lang.Number)"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetDomainBounds()","org.jfree.data.xy.XYSeriesCollection.getDomainBounds(boolean)"
"org.jfree.data.xy.XYSeriesTest.testRemove()","org.jfree.data.xy.XYSeries.remove(java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testRemove()","org.jfree.data.xy.XYSeries.remove(int)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds3()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds2_XYDataset()","org.jfree.data.xy.XYSeries.add(double, java.lang.Number)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMinimumDomainValue()","org.jfree.data.general.DatasetUtilities.findMinimumDomainValue(org.jfree.data.xy.XYDataset)"
"org.jfree.data.statistics.RegressionTest.testOLSRegression2b()","org.jfree.data.statistics.Regression.getOLSRegression(org.jfree.data.xy.XYDataset, int)"
"org.jfree.data.xy.XYSeriesTest.testAdditionOfDuplicateXValues()","org.jfree.data.xy.XYSeries.getY(int)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindRangeBounds()","org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.XYSeriesTest.testGetMaxX()","org.jfree.data.xy.XYSeries.getMaxX()"
"org.jfree.data.xy.XYSeriesTest.testBug1955483()","org.jfree.data.xy.XYSeries.addOrUpdate(double, double)"
"org.jfree.data.xy.XYSeriesTest.testGetMaxY()","org.jfree.data.xy.XYSeries.getMaxY()"
"org.jfree.data.xy.XYSeriesTest.testGetMaxY()","org.jfree.data.xy.XYSeries.add(double, java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testGetMinY()","org.jfree.data.xy.XYSeries.getMinY()"
"org.jfree.data.xy.XYSeriesTest.testGetMinY()","org.jfree.data.xy.XYSeries.add(double, java.lang.Number)"
"org.jfree.data.statistics.RegressionTest.testPowerRegression2b()","org.jfree.data.statistics.Regression.getPowerRegression(org.jfree.data.xy.XYDataset, int)"
"org.jfree.data.xy.XYSeriesTest.testUpdateByIndex()","org.jfree.data.xy.XYSeries.updateByIndex(int, java.lang.Number)"
"org.jfree.data.xy.XYSeriesCollectionTest.testBug3445507()","org.jfree.data.xy.XYSeriesCollection.getRangeBounds(boolean)"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetRangeBounds()","org.jfree.data.xy.XYSeriesCollection.getRangeBounds(boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateDomainBounds()","org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.XYSeriesTest.testClear()","org.jfree.data.xy.XYSeries.clear()"
"org.jfree.data.xy.XYSeriesTest.testAddOrUpdate2()","org.jfree.data.xy.XYSeries.addOrUpdate(java.lang.Number, java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testSetMaximumItemCount()","org.jfree.data.xy.XYSeries.getMaximumItemCount()"
"org.jfree.data.xy.XYSeriesTest.testSetMaximumItemCount4()","org.jfree.data.xy.XYSeries.setMaximumItemCount(int)"
"org.jfree.data.xy.XYSeriesTest.testIndexOf2()","org.jfree.data.xy.XYSeries.indexOf(java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testDelete()","org.jfree.data.xy.XYSeries.delete(int, int)"
"org.jfree.data.xy.XYSeriesTest.testToArray()","org.jfree.data.xy.XYSeries.toArray()"
"org.jfree.data.general.DatasetUtilitiesTest.testSampleFunction2D()","org.jfree.data.general.DatasetUtilities.sampleFunction2D(org.jfree.data.function.Function2D, double, double, int, java.lang.Comparable)"
"org.jfree.data.xy.XYSeriesTest.testUpdateByIndex2()","org.jfree.data.xy.XYSeries.updateByIndex(int, java.lang.Number)"
"org.jfree.data.xy.XYSeriesTest.testToArrayExample()","org.jfree.data.xy.XYSeries.toArray()"
"org.jfree.data.xy.XYSeriesTest.testToArrayExample()","org.jfree.data.xy.DefaultXYDataset.getYValue(int, int)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindDomainBounds()","org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.XYSeriesTest.testSetMaximumItemCount3()","org.jfree.data.xy.XYSeries.setMaximumItemCount(int)"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testGenerateLabel()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.generateLabel(org.jfree.data.xy.XYDataset, int, int)"
"org.jfree.data.category.CategoryToPieDatasetTest.testGetValue()","org.jfree.data.category.CategoryToPieDataset.getValue(java.lang.Comparable)"
"org.jfree.data.category.CategoryToPieDatasetTest.testGetValue()","org.jfree.data.category.CategoryToPieDataset.getValue(int)"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetValue()","org.jfree.data.category.SlidingCategoryDataset.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.category.CategoryToPieDatasetTest.testGetIndex()","org.jfree.data.category.CategoryToPieDataset.getIndex(java.lang.Comparable)"
"org.jfree.data.category.CategoryToPieDatasetTest.testGetIndex()","org.jfree.util.TableOrder.<init>(java.lang.String)"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetColumnIndex()","org.jfree.data.category.SlidingCategoryDataset.getColumnIndex(java.lang.Comparable)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testRemove()","org.jfree.data.time.ohlc.OHLCSeries.getPeriod(int)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testEquals()","org.jfree.data.ComparableObjectSeries.remove(java.lang.Comparable)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testEquals()","org.jfree.data.time.ohlc.OHLCSeries.add(org.jfree.data.time.RegularTimePeriod, double, double, double, double)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testRemove_int()","org.jfree.data.time.ohlc.OHLCSeries.remove(int)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testRemove_int()","org.jfree.data.time.ohlc.OHLCSeries.getPeriod(int)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBlockRenderer.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYShapeAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYShapeAnnotation.hashCode()"
"org.jfree.chart.annotations.XYShapeAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYShapeAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYShapeAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYShapeAnnotation.<init>(java.awt.Shape, java.awt.Stroke, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.annotations.XYShapeAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYShapeAnnotation.<init>(java.awt.Shape, java.awt.Stroke, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.annotations.XYShapeAnnotationTest.testCloning()","org.jfree.chart.annotations.XYShapeAnnotation.clone()"
"org.jfree.chart.annotations.XYShapeAnnotationTest.testEquals()","org.jfree.chart.annotations.XYShapeAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYShapeAnnotationTest.testEquals()","org.jfree.chart.annotations.XYShapeAnnotation.<init>(java.awt.Shape, java.awt.Stroke, java.awt.Paint, java.awt.Paint)"
"org.jfree.data.time.QuarterTest.testParseQuarter()","org.jfree.data.time.Quarter.parseQuarter(java.lang.String)"
"org.jfree.data.time.QuarterTest.testParseQuarter()","org.jfree.data.time.Quarter.getYear()"
"org.jfree.chart.axis.NumberAxisTest.testTranslateJava2DToValue()","org.jfree.chart.axis.NumberAxis.java2DToValue(double, java.awt.geom.Rectangle2D, org.jfree.ui.RectangleEdge)"
"org.jfree.chart.axis.LogAxisTest.testTranslateJava2DToValue()","org.jfree.chart.axis.LogAxis.java2DToValue(double, java.awt.geom.Rectangle2D, org.jfree.ui.RectangleEdge)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setAlpha(float)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setLabel(java.lang.String)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setLabelAnchor(org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setLabelFont(java.awt.Font)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setLabelOffset(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setLabelPaint(java.awt.Paint)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setLabelTextAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.ValueMarkerTest.testEquals()","org.jfree.chart.plot.Marker.setStroke(java.awt.Stroke)"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelPaint()","org.jfree.chart.plot.Marker.getLabelPaint()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelPaint()","org.jfree.chart.plot.Marker.setLabelPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.LevelRendererTest.testSerialization()","org.jfree.chart.renderer.category.LevelRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.LevelRendererTest.testSerialization()","org.jfree.chart.renderer.category.LevelRenderer.<init>()"
"org.jfree.chart.renderer.category.LevelRendererTest.testHashcode()","org.jfree.chart.renderer.category.LevelRenderer.hashCode()"
"org.jfree.chart.renderer.category.LevelRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.LevelRenderer.<init>()"
"org.jfree.chart.renderer.category.LevelRendererTest.testPublicCloneable()","org.jfree.chart.renderer.AbstractRenderer.setBaseOutlinePaint(java.awt.Paint)"
"org.jfree.data.KeyedObjectsTest.testRemoveValue()","org.jfree.data.KeyedObjects.removeValue(java.lang.Comparable)"
"org.jfree.data.KeyedObjectsTest.testRemoveValueInt()","org.jfree.data.KeyedObjects.removeValue(int)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetItemLabelsVisible()","org.jfree.chart.renderer.AbstractRenderer.setItemLabelsVisible(boolean)"
"org.jfree.chart.renderer.category.StandardBarPainterTest.testSerialization()","org.jfree.chart.renderer.category.StandardBarPainter.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StandardBarPainterTest.testSerialization()","org.jfree.chart.renderer.category.StandardBarPainter.<init>()"
"org.jfree.chart.renderer.category.StandardBarPainterTest.testEquals()","org.jfree.chart.renderer.category.StandardBarPainter.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StandardBarPainterTest.testEquals()","org.jfree.chart.renderer.category.StandardBarPainter.<init>()"
"org.jfree.chart.renderer.category.StandardBarPainterTest.testCloning()","org.jfree.chart.renderer.category.StandardBarPainter.<init>()"
"org.jfree.chart.renderer.category.StandardBarPainterTest.testHashcode()","org.jfree.chart.renderer.category.StandardBarPainter.hashCode()"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.isShadowVisible()"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setAxisLabelPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setAxisOffset(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setBarPainter(org.jfree.chart.renderer.category.BarPainter)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setChartBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setDomainGridlinePaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setDrawingSupplier(org.jfree.chart.plot.DrawingSupplier)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setErrorIndicatorPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setExtraLargeFont(java.awt.Font)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setGridBandAlternatePaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setGridBandPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setItemLabelPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setLabelLinkPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setLabelLinkStyle(org.jfree.chart.plot.PieLabelLinkStyle)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setLargeFont(java.awt.Font)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setLegendBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setLegendItemPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setPlotBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setPlotOutlinePaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setRangeGridlinePaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setRegularFont(java.awt.Font)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setShadowPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setShadowVisible(boolean)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setSubtitlePaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setThermometerPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setTickLabelPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setTitlePaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setWallPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testEquals()","org.jfree.chart.StandardChartTheme.setXYBarPainter(org.jfree.chart.renderer.xy.XYBarPainter)"
"org.jfree.data.DefaultKeyedValueTest.testCloning()","org.jfree.data.DefaultKeyedValue.clone()"
"org.jfree.data.DefaultKeyedValueTest.testCloning()","org.jfree.data.DefaultKeyedValue.setValue(java.lang.Number)"
"org.jfree.data.DefaultKeyedValuesTest.testSortByKeyDescending()","org.jfree.data.DefaultKeyedValues.sortByKeys(org.jfree.util.SortOrder)"
"org.jfree.chart.annotations.XYImageAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYImageAnnotation.<init>(double, double, java.awt.Image)"
"org.jfree.chart.annotations.XYImageAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYImageAnnotation.<init>(double, double, java.awt.Image, org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.title.ImageTitleTest.testWidthAndHeight()","org.jfree.chart.title.ImageTitle.<init>(java.awt.Image)"
"org.jfree.chart.title.ImageTitleTest.testWidthAndHeight()","org.jfree.chart.title.ImageTitle.<init>(java.awt.Image, int, int, org.jfree.ui.RectangleEdge, org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, org.jfree.ui.RectangleInsets)"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testGeneral()","org.jfree.data.general.DefaultHeatMapDataset.getMaximumXValue()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testGeneral()","org.jfree.data.general.DefaultHeatMapDataset.getMaximumYValue()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testGeneral()","org.jfree.data.general.DefaultHeatMapDataset.getMinimumXValue()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testGeneral()","org.jfree.data.general.DefaultHeatMapDataset.getMinimumYValue()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testGeneral()","org.jfree.data.general.DefaultHeatMapDataset.getXSampleCount()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testGeneral()","org.jfree.data.general.DefaultHeatMapDataset.getYSampleCount()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testGeneral()","org.jfree.data.general.DefaultHeatMapDataset.getZValue(int, int)"
"org.jfree.chart.entity.CategoryItemEntityTest.testSerialization()","org.jfree.chart.entity.CategoryItemEntity.<init>(java.awt.Shape, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, int, java.lang.Object, int)"
"org.jfree.chart.entity.CategoryItemEntityTest.testSerialization()","org.jfree.chart.entity.CategoryItemEntity.equals(java.lang.Object)"
"org.jfree.data.category.SlidingCategoryDatasetTest.testSerialization()","org.jfree.data.category.SlidingCategoryDataset.getUnderlyingDataset()"
"org.jfree.data.category.SlidingCategoryDatasetTest.testSerialization()","org.jfree.data.category.SlidingCategoryDataset.equals(java.lang.Object)"
"org.jfree.chart.entity.LegendItemEntityTest.testEquals()","org.jfree.chart.entity.LegendItemEntity.equals(java.lang.Object)"
"org.jfree.data.category.CategoryToPieDatasetTest.testSerialization()","org.jfree.data.category.CategoryToPieDataset.getExtractIndex()"
"org.jfree.data.category.CategoryToPieDatasetTest.testSerialization()","org.jfree.data.category.CategoryToPieDataset.getExtractType()"
"org.jfree.data.category.CategoryToPieDatasetTest.testSerialization()","org.jfree.data.category.CategoryToPieDataset.equals(java.lang.Object)"
"org.jfree.data.category.CategoryToPieDatasetTest.testSerialization()","org.jfree.data.category.CategoryToPieDataset.getUnderlyingDataset()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testPublicCloneable()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.<init>()"
"org.jfree.chart.renderer.xy.StackedXYAreaRenderer2Test.testPublicCloneable()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer2.<init>(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testEquals()","org.jfree.chart.renderer.category.IntervalBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testEquals()","org.jfree.chart.renderer.category.IntervalBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYLine3DRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYLine3DRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.setLegendLine(java.awt.Shape)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.setNegativePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.setPositivePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.setRoundXCoordinates(boolean)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.labels.IntervalXYItemLabelGenerator.<init>()"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.labels.IntervalXYItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setDefaultEntityRadius(int)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setBaseItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setToolTipGenerator(org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.YIntervalRenderer.setAdditionalItemLabelGenerator(org.jfree.chart.labels.XYItemLabelGenerator)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.urls.StandardXYURLGenerator.<init>()"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.<init>()"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.addAnnotation(org.jfree.chart.annotations.XYAnnotation, org.jfree.ui.Layer)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemLabelGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemToolTipGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testEquals()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setLegendItemURLGenerator(org.jfree.chart.labels.XYSeriesLabelGenerator)"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testSerialization()","org.jfree.chart.renderer.DefaultPolarItemRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testSerialization()","org.jfree.chart.renderer.DefaultPolarItemRenderer.<init>()"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testSerialization()","org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testSerialization()","org.jfree.chart.renderer.category.LineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.category.BarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.<init>()"
"org.jfree.chart.renderer.category.BarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter()"
"org.jfree.chart.renderer.category.BarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible()"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYSplineRenderer.FillType.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1b()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1b()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1b()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1b()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.XYErrorRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.HighLowRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testEquals()","org.jfree.chart.renderer.category.CategoryStepRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testEquals()","org.jfree.chart.renderer.category.CategoryStepRenderer.<init>(boolean)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testHashcode()","org.jfree.chart.renderer.xy.YIntervalRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testHashcode()","org.jfree.chart.renderer.xy.YIntervalRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2a()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2a()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2a()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2a()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testHashcode()","org.jfree.chart.renderer.xy.XYAreaRenderer2.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testHashcode()","org.jfree.chart.renderer.xy.XYAreaRenderer2.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testHashcode()","org.jfree.chart.renderer.xy.CandlestickRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testHashcode()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testHashcode()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>(double)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testHashcode()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>(double, boolean, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.XYErrorRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.AbstractRendererTest.testSerialization()","org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextFont(java.awt.Font)"
"org.jfree.chart.renderer.AbstractRendererTest.testSerialization()","org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testEquals()","org.jfree.chart.renderer.xy.DeviationRenderer.setAlpha(float)"
"org.jfree.chart.plot.dial.DialPlotTest.testCloning()","org.jfree.chart.plot.dial.DialPlot.<init>()"
"org.jfree.chart.plot.dial.DialPlotTest.testCloning()","org.jfree.chart.plot.dial.DialPlot.<init>(org.jfree.data.general.ValueDataset)"
"org.jfree.chart.plot.dial.DialPlotTest.testCloning()","org.jfree.chart.plot.dial.DialPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.DialPlotTest.testCloning()","org.jfree.chart.plot.dial.ArcDialFrame.<init>()"
"org.jfree.chart.plot.dial.DialPlotTest.testCloning()","org.jfree.chart.plot.dial.ArcDialFrame.<init>(double, double)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals_ObjectList3()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals_ObjectList3()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLine3DRenderer.setXOffset(double)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYLine3DRenderer.setYOffset(double)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testSerialization2()","org.jfree.chart.labels.ItemLabelPosition.<init>()"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testSerialization2()","org.jfree.chart.renderer.xy.XYBarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.plot.SpiderWebPlotTest.testSerialization()","org.jfree.chart.plot.SpiderWebPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.SpiderWebPlotTest.testSerialization()","org.jfree.chart.plot.SpiderWebPlot.<init>(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.plot.SpiderWebPlotTest.testSerialization()","org.jfree.chart.plot.SpiderWebPlot.<init>(org.jfree.data.category.CategoryDataset, org.jfree.util.TableOrder)"
"org.jfree.chart.renderer.category.BarRenderer3DTest.testEquals()","org.jfree.chart.renderer.category.BarRenderer3D.setWallPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testSerialization()","org.jfree.chart.renderer.category.StackedBarRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3c()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3c()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3c()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3c()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1d()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1d()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1d()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1d()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.VectorRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.VectorRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.<init>(java.awt.Paint, java.awt.Paint, boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1a()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1a()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1a()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1a()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testEquals()","org.jfree.chart.renderer.category.LineRenderer3D.setWallPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testEquals()","org.jfree.chart.renderer.category.LineRenderer3D.setXOffset(double)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testEquals()","org.jfree.chart.renderer.category.LineRenderer3D.setYOffset(double)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.HighLowRenderer.<init>()"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testHashcode()","org.jfree.chart.renderer.DefaultPolarItemRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.DefaultPolarItemRendererTest.testHashcode()","org.jfree.chart.renderer.DefaultPolarItemRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3d()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3d()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3d()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3d()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testHashcode()","org.jfree.chart.renderer.category.ScatterRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testHashcode()","org.jfree.chart.renderer.category.ScatterRenderer.<init>()"
"org.jfree.chart.renderer.category.BarRendererTest.testEventNotification()","org.jfree.chart.renderer.RendererChangeDetector.<init>()"
"org.jfree.chart.renderer.category.BarRendererTest.testEventNotification()","org.jfree.chart.renderer.RendererChangeDetector.getNotified()"
"org.jfree.chart.renderer.category.BarRendererTest.testEventNotification()","org.jfree.chart.renderer.RendererChangeDetector.setNotified(boolean)"
"org.jfree.chart.renderer.category.BarRendererTest.testEventNotification()","org.jfree.chart.renderer.AbstractRenderer.setBasePaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.BarRendererTest.testHashcode()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.hashCode()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1c()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1c()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1c()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList1c()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testHashcode()","org.jfree.chart.renderer.xy.DeviationRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testHashcode()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>()"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testHashcode()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>(boolean, boolean)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath(boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testHashcode()","org.jfree.chart.renderer.AbstractRenderer.hashCode()"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.StatisticalBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYLine3DRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.XYBlockRenderer.findRangeBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBlockRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBlockRenderer.updateOffsets()"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testPublicCloneable()","org.jfree.chart.renderer.LookupPaintScale.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testPublicCloneable()","org.jfree.chart.renderer.xy.XYAreaRenderer2.<init>()"
"org.jfree.chart.renderer.category.BarRenderer3DTest.testSerialization()","org.jfree.chart.renderer.category.BarRenderer3D.setWallPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYErrorRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYErrorRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testSerialization2()","org.jfree.chart.renderer.xy.XYErrorRenderer.setErrorStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testPublicCloneable()","org.jfree.chart.renderer.category.LineRenderer3D.<init>()"
"org.jfree.chart.renderer.category.GanttRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.GanttRenderer.<init>()"
"org.jfree.chart.renderer.category.GanttRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.setIncludeBaseInRange(boolean)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.ScatterRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.StackedBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.StackedBarRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testSerialization()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testSerialization()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testSerialization()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testSerialization()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testFindDomainBounds()","org.jfree.data.xy.XYSeriesCollection.removeAllSeries()"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testFindDomainBounds()","org.jfree.chart.renderer.xy.XYBlockRenderer.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testHashcode()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testHashcode()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.<init>()"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testHashcode()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, boolean, boolean)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testHashcode()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBarRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2b()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2b()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2b()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2b()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testSerialization()","org.jfree.chart.renderer.category.ScatterRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.ScatterRendererTest.testSerialization()","org.jfree.chart.renderer.category.ScatterRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testPublicCloneable()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testPublicCloneable()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testSerialization()","org.jfree.chart.renderer.AreaRendererEndType.<init>(java.lang.String)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testSerialization()","org.jfree.chart.renderer.category.StackedAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testSerialization()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testSerialization()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>(boolean)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testConstructor()","org.jfree.chart.renderer.xy.CandlestickRenderer.getCandleWidth()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testConstructor()","org.jfree.chart.renderer.xy.CandlestickRenderer.getDownPaint()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testConstructor()","org.jfree.chart.renderer.xy.CandlestickRenderer.getDrawVolume()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testConstructor()","org.jfree.chart.renderer.xy.CandlestickRenderer.getUpPaint()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testConstructor()","org.jfree.chart.renderer.xy.CandlestickRenderer.getUseOutlinePaint()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testConstructor()","org.jfree.chart.renderer.xy.CandlestickRenderer.getVolumePaint()"
"org.jfree.chart.renderer.AbstractRendererTest.testSetItemLabelPaint()","org.jfree.chart.renderer.AbstractRenderer.getItemLabelPaint(int, int)"
"org.jfree.chart.renderer.category.LayeredBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.LayeredBarRenderer.<init>()"
"org.jfree.chart.renderer.AbstractRendererTest.testSetPaint()","org.jfree.chart.renderer.AbstractRenderer.setPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>(double)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>(double, boolean, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testPublicCloneable()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testPublicCloneable()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>(java.text.DateFormat, java.text.NumberFormat)"
"org.jfree.chart.plot.dial.DialPlotTest.testHashCode()","org.jfree.chart.plot.dial.DialPlot.hashCode()"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYSplineRenderer.setFillType(org.jfree.chart.renderer.xy.XYSplineRenderer$FillType)"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYSplineRenderer.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYSplineRenderer.setPrecision(int)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYAreaRenderer.setGradientTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYAreaRenderer.setOutline(boolean)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYAreaRenderer.setLegendArea(java.awt.Shape)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYAreaRenderer.setUseFillPaint(boolean)"
"org.jfree.chart.renderer.category.LayeredBarRendererTest.testEquals()","org.jfree.chart.renderer.category.LayeredBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testEquals_ObjectList()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>(java.lang.String)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.<init>(double)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetShape()","org.jfree.chart.renderer.AbstractRenderer.getItemShape(int, int)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetShape()","org.jfree.chart.renderer.AbstractRenderer.setShape(java.awt.Shape)"
"org.jfree.chart.renderer.category.DefaultCategoryItemRendererTest.testHashcode()","org.jfree.chart.renderer.category.DefaultCategoryItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYDotRenderer.<init>()"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.IntervalBarRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList5()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList5()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList5()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList5()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testHashcode()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testHashcode()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testHashcode()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testHashcode()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBlockRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapeStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals_ObjectList3()","org.jfree.chart.renderer.AbstractRenderer.setSeriesPositiveItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.plot.dial.DialPlotTest.testSerialization()","org.jfree.chart.plot.dial.DialPlot.<init>()"
"org.jfree.chart.plot.dial.DialPlotTest.testSerialization()","org.jfree.chart.plot.dial.DialPlot.<init>(org.jfree.data.general.ValueDataset)"
"org.jfree.chart.plot.dial.DialPlotTest.testSerialization()","org.jfree.chart.plot.dial.DialPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.DialPlotTest.testSerialization()","org.jfree.chart.plot.dial.ArcDialFrame.<init>()"
"org.jfree.chart.plot.dial.DialPlotTest.testSerialization()","org.jfree.chart.plot.dial.ArcDialFrame.<init>(double, double)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2c()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2c()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2c()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2c()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.WindItemRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.WindItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBlockRenderer.setBlockHeight(double)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBlockRenderer.setBlockWidth(double)"
"org.jfree.chart.renderer.xy.XYBlockRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBlockRenderer.setPaintScale(org.jfree.chart.renderer.PaintScale)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testSerialization()","org.jfree.chart.renderer.xy.HighLowRenderer.setCloseTickPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testSerialization()","org.jfree.chart.renderer.xy.HighLowRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.StatisticalBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.StackedAreaRenderer.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>(boolean)"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testSerialization()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testSerialization()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testSerialization()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>(double, boolean)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals_ObjectList2()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals_ObjectList2()","org.jfree.chart.labels.StandardCategoryToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.StackedBarRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.StackedBarRenderer.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testEquals()","org.jfree.chart.renderer.xy.XYAreaRenderer2.isOutline()"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testEquals()","org.jfree.chart.renderer.xy.XYAreaRenderer2.setLegendArea(java.awt.Shape)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testSerialization()","org.jfree.chart.renderer.xy.YIntervalRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testSerialization()","org.jfree.chart.renderer.xy.YIntervalRenderer.<init>()"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.test1562759()","org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseLinesVisible()"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.test1562759()","org.jfree.chart.renderer.category.LineAndShapeRenderer.getBaseShapesVisible()"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>()"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>(boolean, boolean)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath(boolean)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYAreaRenderer.hashCode()"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testEquals()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setDrawLines(boolean)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testEquals()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setGroupPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testEquals()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.setGroupStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3b()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3b()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3b()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3b()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.CategoryStepRenderer.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testEquals()","org.jfree.chart.renderer.category.StackedBarRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.AreaRendererTest.testEquals()","org.jfree.chart.renderer.category.AreaRenderer.setEndType(org.jfree.chart.renderer.AreaRendererEndType)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testSerialization()","org.jfree.chart.renderer.xy.DeviationRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testSerialization()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>()"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testSerialization()","org.jfree.chart.renderer.xy.DeviationRenderer.<init>(boolean, boolean)"
"org.jfree.chart.renderer.xy.DeviationRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setDrawSeriesLineAsPath(boolean)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testHashcode()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3a()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3a()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3a()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList3a()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetNegativeItemLabelPosition()","org.jfree.chart.renderer.AbstractRenderer.getNegativeItemLabelPosition(int, int)"
"org.jfree.chart.renderer.xy.WindItemRendererTest.testSerialization()","org.jfree.chart.renderer.xy.WindItemRenderer.<init>()"
"org.jfree.chart.renderer.category.DefaultCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.DefaultCategoryItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testHashcode()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testHashcode()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testHashcode()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>(double, boolean)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBubbleRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>(int)"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testEquals()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.setErrorIndicatorPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setItemURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setToolTipGenerator(org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setBaseItemURLGenerator(org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setItemLabelGenerator(org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemLabelGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemToolTipGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setLegendItemURLGenerator(org.jfree.chart.labels.CategorySeriesLabelGenerator)"
"org.jfree.chart.renderer.category.DefaultCategoryItemRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.DefaultCategoryItemRenderer.<init>()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.getFillBox()"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setArtifactPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setFillBox(boolean)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setItemMargin(double)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMaximumBarWidth(double)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMeanVisible(boolean)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.setMedianVisible(boolean)"
"org.jfree.chart.renderer.xy.WindItemRendererTest.testEquals()","org.jfree.chart.renderer.xy.WindItemRenderer.<init>()"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testSerialization()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testSerialization()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.setRenderAsPercentages(boolean)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testSerialization()","org.jfree.chart.renderer.category.LineRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testSerialization()","org.jfree.chart.renderer.category.LineRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testEquals()","org.jfree.chart.renderer.category.StatisticalBarRenderer.setErrorIndicatorPaint(java.awt.Paint)"
"org.jfree.chart.renderer.category.StatisticalBarRendererTest.testEquals()","org.jfree.chart.renderer.category.StatisticalBarRenderer.setErrorIndicatorStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.category.LayeredBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.LayeredBarRenderer.<init>()"
"org.jfree.chart.renderer.AbstractRendererTest.testAutoPopulateFlagDefaults()","org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesFillPaint()"
"org.jfree.chart.renderer.AbstractRendererTest.testAutoPopulateFlagDefaults()","org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesOutlinePaint()"
"org.jfree.chart.renderer.AbstractRendererTest.testAutoPopulateFlagDefaults()","org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesOutlineStroke()"
"org.jfree.chart.renderer.AbstractRendererTest.testAutoPopulateFlagDefaults()","org.jfree.chart.renderer.AbstractRenderer.getAutoPopulateSeriesShape()"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>(double, boolean)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testEquals2()","org.jfree.chart.urls.TimeSeriesURLGenerator.<init>()"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>(boolean)"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testFindRangeBounds()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testFindRangeBounds()","org.jfree.chart.renderer.category.StackedBarRenderer3D.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.renderer.xy.AbstractXYItemRendererTest.testEquals_ObjectList2()","org.jfree.chart.renderer.xy.AbstractXYItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testHashcode()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.hashCode()"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testEquals()","org.jfree.chart.renderer.AbstractRenderer.setBaseCreateEntities(boolean)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepRenderer.setStepPoint(double)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.BoxAndWhiskerRendererTest.testSerialization()","org.jfree.chart.renderer.category.BoxAndWhiskerRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetOutlinePaint()","org.jfree.chart.renderer.AbstractRenderer.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetOutlinePaint()","org.jfree.chart.renderer.AbstractRenderer.getItemOutlinePaint(int, int)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testEquals()","org.jfree.chart.renderer.xy.HighLowRenderer.setDrawCloseTicks(boolean)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testEquals()","org.jfree.chart.renderer.xy.HighLowRenderer.setDrawOpenTicks(boolean)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testEquals()","org.jfree.chart.renderer.xy.HighLowRenderer.setOpenTickPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testEquals()","org.jfree.chart.renderer.xy.HighLowRenderer.setTickLength(double)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBubbleRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYLine3DRenderer.setWallPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYLine3DRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYLine3DRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYLine3DRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList4()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList4()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList4()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList4()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals_ObjectList4()","org.jfree.chart.renderer.AbstractRenderer.setSeriesNegativeItemLabelPosition(int, org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.xy.YIntervalRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.YIntervalRenderer.<init>()"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.category.StatisticalLineAndShapeRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer.<init>(boolean, boolean)"
"org.jfree.chart.renderer.category.BarRenderer3DTest.testHashcode()","org.jfree.chart.renderer.category.BarRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testHashcode()","org.jfree.chart.renderer.xy.HighLowRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.HighLowRendererTest.testHashcode()","org.jfree.chart.renderer.xy.HighLowRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYSplineRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYSplineRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYSplineRenderer.<init>(int, org.jfree.chart.renderer.xy.XYSplineRenderer$FillType)"
"org.jfree.chart.renderer.xy.WindItemRendererTest.testHashcode()","org.jfree.chart.renderer.xy.WindItemRenderer.<init>()"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals_ObjectList2()","org.jfree.chart.renderer.AbstractRenderer.setLegendTextFont(int, java.awt.Font)"
"org.jfree.chart.renderer.category.LayeredBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.LayeredBarRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testHashcode()","org.jfree.chart.renderer.category.StackedBarRenderer3D.hashCode()"
"org.jfree.chart.renderer.category.BarRendererTest.testSerialization()","org.jfree.chart.renderer.category.GradientBarPainter.<init>()"
"org.jfree.chart.renderer.category.BarRendererTest.testSerialization()","org.jfree.chart.renderer.category.GradientBarPainter.<init>(double, double, double)"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testEquals()","org.jfree.chart.renderer.category.StackedBarRenderer.setRenderAsPercentages(boolean)"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testSerialization()","org.jfree.chart.renderer.category.CategoryStepRenderer.<init>()"
"org.jfree.chart.renderer.category.CategoryStepRendererTest.testSerialization()","org.jfree.chart.renderer.category.CategoryStepRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.DefaultCategoryItemRendererTest.testSerialization()","org.jfree.chart.renderer.category.DefaultCategoryItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBubbleRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testHashcode()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.hashCode()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testHashcode()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.setRenderAsPercentages(boolean)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.<init>(java.awt.Paint, java.awt.Paint, boolean)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testHashcode()","org.jfree.chart.renderer.category.LineRenderer3D.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.LineRenderer3DTest.testHashcode()","org.jfree.chart.renderer.category.LineRenderer3D.<init>()"
"org.jfree.chart.renderer.category.BarRenderer3DTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.BarRenderer3DTest.testPublicCloneable()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYDotRenderer.setDotHeight(int)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYDotRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.IntervalBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testHashcode()","org.jfree.chart.renderer.category.IntervalBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYLineAndShapeRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYErrorRenderer.<init>()"
"org.jfree.chart.renderer.category.AreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.AreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testSerialization()","org.jfree.chart.renderer.xy.CandlestickRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testSerialization()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>()"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testSerialization()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>(double)"
"org.jfree.chart.renderer.xy.CandlestickRendererTest.testSerialization()","org.jfree.chart.renderer.xy.CandlestickRenderer.<init>(double, boolean, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYAreaRenderer.hashCode()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYAreaRenderer.setUseFillPaint(boolean)"
"org.jfree.chart.renderer.xy.XYDifferenceRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYDifferenceRenderer.<init>()"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals_ObjectList()","org.jfree.chart.renderer.AbstractRenderer.setSeriesItemLabelFont(int, java.awt.Font)"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.LineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.LineAndShapeRenderer.<init>(boolean, boolean)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.IntervalBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.IntervalBarRendererTest.testSerialization()","org.jfree.chart.renderer.category.IntervalBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBarRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>()"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator)"
"org.jfree.chart.renderer.xy.StandardXYItemRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StandardXYItemRenderer.<init>(int, org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYDotRenderer.setDotWidth(int)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYDotRenderer.setLegendShape(java.awt.Shape)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYDotRenderer.setDotHeight(int)"
"org.jfree.chart.renderer.category.AreaRendererTest.testSerialization()","org.jfree.chart.renderer.AreaRendererEndType.<init>(java.lang.String)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetItemLabelFont()","org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont(int, int)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYStepRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYStepRenderer.<init>(org.jfree.chart.labels.XYToolTipGenerator, org.jfree.chart.urls.XYURLGenerator)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.setBaseShapesVisible(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2d()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2d()","org.jfree.chart.renderer.category.StackedBarRenderer3D.<init>(boolean)"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2d()","org.jfree.chart.renderer.category.BarRenderer3D.<init>()"
"org.jfree.chart.renderer.category.StackedBarRenderer3DTest.testCreateStackedValueList2d()","org.jfree.chart.renderer.category.BarRenderer3D.<init>(double, double)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testHashcode()","org.jfree.chart.renderer.category.StackedAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testHashcode()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>()"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testHashcode()","org.jfree.chart.renderer.category.StackedAreaRenderer.<init>(boolean)"
"org.jfree.chart.renderer.category.AreaRendererTest.testHashcode()","org.jfree.chart.renderer.category.AreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.AreaRendererTest.testHashcode()","org.jfree.chart.renderer.category.AreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYAreaRenderer.<init>(int)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.StackedXYBarRenderer.<init>(double)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBarRenderer.setNegativeItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.xy.StackedXYBarRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBarRenderer.setPositiveItemLabelPositionFallback(org.jfree.chart.labels.ItemLabelPosition)"
"org.jfree.chart.renderer.category.StackedBarRendererTest.testHashCode()","org.jfree.chart.renderer.category.StackedBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.<init>()"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, boolean, boolean)"
"org.jfree.chart.renderer.category.MinMaxCategoryRendererTest.testPublicCloneable()","org.jfree.chart.renderer.category.MinMaxCategoryRenderer.getIcon(java.awt.Shape, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.renderer.category.BarRendererTest.testEquals()","org.jfree.chart.renderer.category.BarRenderer.setBase(double)"
"org.jfree.chart.renderer.category.BarRendererTest.testEquals()","org.jfree.chart.renderer.category.BarRenderer.setDrawBarOutline(boolean)"
"org.jfree.chart.renderer.category.BarRendererTest.testEquals()","org.jfree.chart.renderer.category.BarRenderer.setItemMargin(double)"
"org.jfree.chart.renderer.category.BarRendererTest.testEquals()","org.jfree.chart.renderer.category.BarRenderer.setMaximumBarWidth(double)"
"org.jfree.chart.renderer.category.BarRendererTest.testEquals()","org.jfree.chart.renderer.category.BarRenderer.setShadowXOffset(double)"
"org.jfree.chart.renderer.category.BarRendererTest.testEquals()","org.jfree.chart.renderer.category.BarRenderer.setShadowYOffset(double)"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testSerialization()","org.jfree.chart.renderer.xy.XYAreaRenderer2.<init>()"
"org.jfree.chart.renderer.xy.XYAreaRenderer2Test.testSerialization()","org.jfree.chart.renderer.xy.XYAreaRenderer2.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.getFillBox()"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setArtifactPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setBoxPaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setBoxWidth(double)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.setFillBox(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetStroke()","org.jfree.chart.renderer.AbstractRenderer.setStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYSplineRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYSplineRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYSplineRenderer.<init>(int, org.jfree.chart.renderer.xy.XYSplineRenderer$FillType)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.<init>(double)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetPositiveItemLabelPosition()","org.jfree.chart.renderer.AbstractRenderer.getPositiveItemLabelPosition(int, int)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapePaint(java.awt.Paint)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.setShapeStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.xy.StackedXYAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.StackedXYAreaRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.StackedAreaRendererTest.testEquals()","org.jfree.chart.renderer.category.StackedAreaRenderer.setRenderAsPercentages(boolean)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYStepRenderer.setStepPoint(double)"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYStepRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBubbleRendererTest.testPublicCloneable()","org.jfree.chart.renderer.xy.XYBubbleRenderer.<init>(int)"
"org.jfree.chart.renderer.category.AbstractCategoryItemRendererTest.testEquals_ObjectList()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemLabelGenerator(int, org.jfree.chart.labels.CategoryItemLabelGenerator)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYBoxAndWhiskerRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer.<init>(double)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals2()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals2()","org.jfree.chart.renderer.xy.XYLineAndShapeRenderer.<init>()"
"org.jfree.chart.renderer.AbstractRendererTest.testEquals2()","org.jfree.chart.renderer.AbstractRenderer.setTreatLegendShapeAsLine(boolean)"
"org.jfree.chart.renderer.AbstractRendererTest.testSetOutlineStroke()","org.jfree.chart.renderer.AbstractRenderer.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>()"
"org.jfree.chart.renderer.xy.ClusteredXYBarRendererTest.testEquals()","org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.<init>(double, boolean)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.setOutline(boolean)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.setPlotArea(boolean)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.setRangeBase(double)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.setShapesFilled(boolean)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.setShapesVisible(boolean)"
"org.jfree.chart.renderer.xy.XYStepAreaRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYStepAreaRenderer.setStepPoint(double)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYErrorRenderer.setCapLength(double)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYErrorRenderer.setDrawXError(boolean)"
"org.jfree.chart.renderer.xy.XYErrorRendererTest.testEquals()","org.jfree.chart.renderer.xy.XYErrorRenderer.setDrawYError(boolean)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYDotRenderer.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.XYDotRendererTest.testSerialization()","org.jfree.chart.renderer.xy.XYDotRenderer.<init>()"
"org.jfree.chart.renderer.xy.XYStepRendererTest.testHashcode()","org.jfree.chart.renderer.xy.XYStepRenderer.hashCode()"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testHashcode()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.hashCode()"
"org.jfree.chart.renderer.category.LineAndShapeRendererTest.testHashcode()","org.jfree.chart.renderer.category.LineAndShapeRenderer.equals(java.lang.Object)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testSerialization()","org.jfree.data.time.TimePeriodValuesCollection.equals(java.lang.Object)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testEquals()","org.jfree.data.time.TimePeriodValuesCollection.getDomainIsPointsInTime()"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testEquals()","org.jfree.data.time.TimePeriodValuesCollection.setXPosition(org.jfree.data.time.TimePeriodAnchor)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testEquals()","org.jfree.data.time.TimePeriodValuesCollection.setDomainIsPointsInTime(boolean)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization2()","org.jfree.data.general.DefaultValueDataset.<init>(double)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization2()","org.jfree.chart.plot.MeterPlot.equals(java.lang.Object)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization2()","org.jfree.chart.plot.MeterPlot.<init>(org.jfree.data.general.ValueDataset)"
"org.jfree.chart.plot.MeterPlotTest.testSerialization2()","org.jfree.chart.plot.MeterPlot.setDataset(org.jfree.data.general.ValueDataset)"
"org.jfree.data.time.QuarterTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.QuarterTest.testGetEnd()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.time.QuarterTest.testGetEnd()","org.jfree.data.time.Quarter.peg(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.time.QuarterTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Quarter.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Quarter.peg(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testHashcode()","org.jfree.data.time.Quarter.hashCode()"
"org.jfree.data.time.QuarterTest.testQ1Y1900Next()","org.jfree.data.time.Quarter.next()"
"org.jfree.data.time.QuarterTest.testGetSerialIndex()","org.jfree.data.time.Quarter.getSerialIndex()"
"org.jfree.data.time.QuarterTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.time.QuarterTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Quarter.peg(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.QuarterTest.testQ4Y9999Previous()","org.jfree.data.time.Quarter.previous()"
"org.jfree.data.time.QuarterTest.testNotCloneable()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.time.QuarterTest.testNotCloneable()","org.jfree.data.time.Quarter.peg(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testDateConstructor1()","org.jfree.data.time.Quarter.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.data.time.QuarterTest.testDateConstructor1()","org.jfree.data.time.Quarter.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.QuarterTest.testDateConstructor1()","org.jfree.date.SerialDate.monthCodeToQuarter(int)"
"org.jfree.data.time.QuarterTest.testEquals()","org.jfree.data.time.Quarter.equals(java.lang.Object)"
"org.jfree.data.time.QuarterTest.testGetFirstMillisecond()","org.jfree.data.time.Quarter.getFirstMillisecond()"
"org.jfree.data.time.QuarterTest.testNext()","org.jfree.data.time.Quarter.getYear()"
"org.jfree.data.time.QuarterTest.testNext()","org.jfree.data.time.Quarter.next()"
"org.jfree.data.time.QuarterTest.testEqualsSelf()","org.jfree.data.time.Quarter.<init>()"
"org.jfree.data.time.QuarterTest.testEqualsSelf()","org.jfree.data.time.Quarter.<init>(java.util.Date)"
"org.jfree.data.time.QuarterTest.testSerialization()","org.jfree.data.time.Quarter.equals(java.lang.Object)"
"org.jfree.data.time.QuarterTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.time.QuarterTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Quarter.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Quarter.peg(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.QuarterTest.testGetStart()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.time.QuarterTest.testGetStart()","org.jfree.data.time.Quarter.peg(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testDateConstructor2()","org.jfree.data.time.Quarter.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.data.time.QuarterTest.testDateConstructor2()","org.jfree.data.time.Quarter.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.QuarterTest.testDateConstructor2()","org.jfree.date.SerialDate.monthCodeToQuarter(int)"
"org.jfree.data.time.QuarterTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.time.QuarterTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Quarter.peg(java.util.Calendar)"
"org.jfree.data.time.QuarterTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.QuarterTest.testGetLastMillisecond()","org.jfree.data.time.Quarter.getLastMillisecond()"
"org.jfree.chart.plot.dial.DialPointerTest.testSerialization()","org.jfree.chart.plot.dial.DialPointer.Pin.<init>(int)"
"org.jfree.chart.plot.dial.DialPointerTest.testSerialization()","org.jfree.chart.plot.dial.DialPointer.Pin.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.DialPointerTest.testSerialization()","org.jfree.chart.plot.dial.DialPointer.<init>(int)"
"org.jfree.chart.plot.dial.DialPointerTest.testHashCode()","org.jfree.chart.plot.dial.DialPointer.Pin.hashCode()"
"org.jfree.chart.plot.dial.DialPointerTest.testCloning()","org.jfree.chart.plot.dial.DialPointer.clone()"
"org.jfree.chart.plot.dial.DialPointerTest.testSerialization2()","org.jfree.chart.plot.dial.DialPointer.Pointer.<init>(int)"
"org.jfree.chart.plot.dial.DialPointerTest.testSerialization2()","org.jfree.chart.plot.dial.DialPointer.Pointer.equals(java.lang.Object)"
"org.jfree.chart.needle.LongNeedleTest.testSerialization()","org.jfree.chart.needle.LongNeedle.<init>()"
"org.jfree.chart.needle.LongNeedleTest.testSerialization()","org.jfree.chart.needle.LongNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.LongNeedleTest.testSerialization()","org.jfree.chart.needle.MeterNeedle.setRotateY(double)"
"org.jfree.chart.needle.LongNeedleTest.testCloning()","org.jfree.chart.needle.LongNeedle.clone()"
"org.jfree.chart.needle.LongNeedleTest.testEquals()","org.jfree.chart.needle.LongNeedle.<init>()"
"org.jfree.chart.needle.LongNeedleTest.testEquals()","org.jfree.chart.needle.LongNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.LongNeedleTest.testEquals()","org.jfree.chart.needle.MeterNeedle.setRotateY(double)"
"org.jfree.data.time.WeekTest.testGetFirstMillisecond()","org.jfree.data.time.Week.getFirstMillisecond()"
"org.jfree.data.time.WeekTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.WeekTest.testGetStart()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testGetStart()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYPointerAnnotation.<init>(java.lang.String, double, double, double)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYTextAnnotation.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYTextAnnotation.hashCode()"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYPointerAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYPointerAnnotation.<init>(java.lang.String, double, double, double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYPointerAnnotation.hashCode()"
"org.jfree.chart.annotations.XYTextAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYTextAnnotation.<init>(java.lang.String, double, double)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.isOutlineVisible()"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setBackgroundPaint(java.awt.Paint)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setOutlineVisible(boolean)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setPaint(java.awt.Paint)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setRotationAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setTextAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testCloning()","org.jfree.chart.annotations.XYPointerAnnotation.clone()"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setAngle(double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setArrowLength(double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setArrowPaint(java.awt.Paint)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setArrowStroke(java.awt.Stroke)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setArrowWidth(double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setBaseRadius(double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setLabelOffset(double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPointerAnnotation.setTipRadius(double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setX(double)"
"org.jfree.chart.annotations.XYPointerAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTextAnnotation.setY(double)"
"org.jfree.chart.annotations.XYTextAnnotationTest.testCloning()","org.jfree.chart.annotations.XYTextAnnotation.clone()"
"org.jfree.data.general.DatasetUtilitiesTest.testFindDomainBounds_NaN()","org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindDomainBounds_NaN()","org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset, boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindDomainBounds2()","org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetStartXValue()","org.jfree.data.xy.DefaultIntervalXYDataset.getStartXValue(int, int)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateDomainBounds_NaN2()","org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset, boolean)"
"org.jfree.chart.util.LogFormatTest.testEquals()","org.jfree.chart.util.LogFormat.<init>(double, java.lang.String, boolean)"
"org.jfree.chart.util.LogFormatTest.testEquals()","org.jfree.chart.util.LogFormat.<init>(double, java.lang.String, java.lang.String, boolean)"
"org.jfree.chart.util.LogFormatTest.testEquals()","org.jfree.chart.util.LogFormat.equals(java.lang.Object)"
"org.jfree.chart.util.LogFormatTest.testEquals()","org.jfree.chart.util.LogFormat.setExponentFormat(java.text.NumberFormat)"
"org.jfree.chart.axis.LogarithmicAxisTest.testValueToJava2D()","org.jfree.chart.axis.ValueAxis.setRange(double, double)"
"org.jfree.chart.WaterfallChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.WaterfallChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.StackedAreaChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.StackedAreaChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.StackedAreaChartTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.WaterfallChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.WaterfallChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.WaterfallChartTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.data.RangeTest.testExpand()","org.jfree.data.Range.expand(org.jfree.data.Range, double, double)"
"org.jfree.chart.StackedBarChart3DTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.StackedBarChart3DTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.StackedAreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.StackedAreaChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.axis.ModuloAxisTest.testEquals()","org.jfree.chart.axis.ModuloAxis.setDisplayRange(double, double)"
"org.jfree.chart.StackedBarChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.StackedBarChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.StackedBarChart3DTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.StackedBarChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesItemURLGenerator(int, org.jfree.chart.urls.CategoryURLGenerator)"
"org.jfree.chart.StackedBarChartTest.testSetSeriesURLGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getItemURLGenerator(int, int)"
"org.jfree.chart.StackedBarChartTest.testSetSeriesURLGenerator()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.chart.axis.LogAxisTest.testSetLowerBound()","org.jfree.chart.axis.ValueAxis.setLowerBound(double)"
"org.jfree.chart.axis.LogarithmicAxisTest.testJava2DToValue()","org.jfree.chart.axis.ValueAxis.setRange(double, double)"
"org.jfree.chart.axis.ValueAxisTest.testEquals()","org.jfree.chart.axis.ValueAxis.setAutoTickUnitSelection(boolean)"
"org.jfree.chart.axis.ValueAxisTest.testEquals()","org.jfree.chart.axis.ValueAxis.setNegativeArrowVisible(boolean)"
"org.jfree.chart.axis.ValueAxisTest.testEquals()","org.jfree.chart.axis.ValueAxis.setPositiveArrowVisible(boolean)"
"org.jfree.chart.axis.ValueAxisTest.testEquals()","org.jfree.chart.axis.ValueAxis.setVerticalTickLabels(boolean)"
"org.jfree.chart.axis.ValueAxisTest.testEquals()","org.jfree.chart.axis.Axis.setAxisLineStroke(java.awt.Stroke)"
"org.jfree.chart.StackedBarChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.setSeriesToolTipGenerator(int, org.jfree.chart.labels.CategoryToolTipGenerator)"
"org.jfree.chart.StackedBarChartTest.testSetSeriesToolTipGenerator()","org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.getToolTipGenerator(int, int)"
"org.jfree.chart.axis.NumberAxisTest.testSetLowerBound()","org.jfree.chart.axis.ValueAxis.setLowerBound(double)"
"org.jfree.chart.needle.PlumNeedleTest.testEquals()","org.jfree.chart.needle.PlumNeedle.<init>()"
"org.jfree.chart.needle.PlumNeedleTest.testEquals()","org.jfree.chart.needle.PlumNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.ArrowNeedleTest.testEquals()","org.jfree.chart.needle.ArrowNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.ArrowNeedleTest.testEquals()","org.jfree.chart.needle.ArrowNeedle.<init>(boolean)"
"org.jfree.chart.needle.LineNeedleTest.testSerialization()","org.jfree.chart.needle.LineNeedle.<init>()"
"org.jfree.chart.needle.LineNeedleTest.testSerialization()","org.jfree.chart.needle.LineNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.WindNeedleTest.testEquals()","org.jfree.chart.needle.WindNeedle.<init>()"
"org.jfree.chart.needle.WindNeedleTest.testEquals()","org.jfree.chart.needle.WindNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.PlumNeedleTest.testCloning()","org.jfree.chart.needle.PlumNeedle.clone()"
"org.jfree.chart.needle.PointerNeedleTest.testSerialization()","org.jfree.chart.needle.PointerNeedle.<init>()"
"org.jfree.chart.needle.PointerNeedleTest.testSerialization()","org.jfree.chart.needle.PointerNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.ArrowNeedleTest.testSerialization()","org.jfree.chart.needle.ArrowNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.ArrowNeedleTest.testSerialization()","org.jfree.chart.needle.ArrowNeedle.<init>(boolean)"
"org.jfree.chart.needle.PlumNeedleTest.testSerialization()","org.jfree.chart.needle.PlumNeedle.<init>()"
"org.jfree.chart.needle.PlumNeedleTest.testSerialization()","org.jfree.chart.needle.PlumNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.ShipNeedleTest.testSerialization()","org.jfree.chart.needle.ShipNeedle.<init>()"
"org.jfree.chart.needle.ShipNeedleTest.testSerialization()","org.jfree.chart.needle.ShipNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.ShipNeedleTest.testEquals()","org.jfree.chart.needle.ShipNeedle.<init>()"
"org.jfree.chart.needle.ShipNeedleTest.testEquals()","org.jfree.chart.needle.ShipNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.MiddlePinNeedleTest.testCloning()","org.jfree.chart.needle.MiddlePinNeedle.clone()"
"org.jfree.chart.needle.PointerNeedleTest.testCloning()","org.jfree.chart.needle.PointerNeedle.clone()"
"org.jfree.chart.needle.PinNeedleTest.testCloning()","org.jfree.chart.needle.PinNeedle.clone()"
"org.jfree.chart.needle.MiddlePinNeedleTest.testEquals()","org.jfree.chart.needle.MiddlePinNeedle.<init>()"
"org.jfree.chart.needle.MiddlePinNeedleTest.testEquals()","org.jfree.chart.needle.MiddlePinNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.PointerNeedleTest.testEquals()","org.jfree.chart.needle.PointerNeedle.<init>()"
"org.jfree.chart.needle.PointerNeedleTest.testEquals()","org.jfree.chart.needle.PointerNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.MiddlePinNeedleTest.testSerialization()","org.jfree.chart.needle.MiddlePinNeedle.<init>()"
"org.jfree.chart.needle.MiddlePinNeedleTest.testSerialization()","org.jfree.chart.needle.MiddlePinNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.PinNeedleTest.testSerialization()","org.jfree.chart.needle.PinNeedle.<init>()"
"org.jfree.chart.needle.PinNeedleTest.testSerialization()","org.jfree.chart.needle.PinNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.LineNeedleTest.testCloning()","org.jfree.chart.needle.LineNeedle.clone()"
"org.jfree.chart.needle.ShipNeedleTest.testCloning()","org.jfree.chart.needle.ShipNeedle.clone()"
"org.jfree.chart.needle.LineNeedleTest.testEquals()","org.jfree.chart.needle.LineNeedle.<init>()"
"org.jfree.chart.needle.LineNeedleTest.testEquals()","org.jfree.chart.needle.LineNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.WindNeedleTest.testSerialization()","org.jfree.chart.needle.WindNeedle.<init>()"
"org.jfree.chart.needle.WindNeedleTest.testSerialization()","org.jfree.chart.needle.WindNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.MeterNeedleTest.testEquals()","org.jfree.chart.needle.MeterNeedle.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.needle.MeterNeedleTest.testEquals()","org.jfree.chart.needle.MeterNeedle.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.needle.MeterNeedleTest.testEquals()","org.jfree.chart.needle.MeterNeedle.setRotateX(double)"
"org.jfree.chart.needle.MeterNeedleTest.testEquals()","org.jfree.chart.needle.MeterNeedle.setSize(int)"
"org.jfree.chart.needle.ArrowNeedleTest.testCloning()","org.jfree.chart.needle.ArrowNeedle.clone()"
"org.jfree.chart.needle.PinNeedleTest.testEquals()","org.jfree.chart.needle.PinNeedle.<init>()"
"org.jfree.chart.needle.PinNeedleTest.testEquals()","org.jfree.chart.needle.PinNeedle.equals(java.lang.Object)"
"org.jfree.chart.needle.WindNeedleTest.testCloning()","org.jfree.chart.needle.ArrowNeedle.clone()"
"org.jfree.chart.needle.WindNeedleTest.testCloning()","org.jfree.chart.needle.WindNeedle.<init>()"
"org.jfree.chart.needle.WindNeedleTest.testCloning()","org.jfree.chart.needle.WindNeedle.equals(java.lang.Object)"
"org.jfree.chart.block.GridArrangementTest.testNR()","org.jfree.chart.block.RectangleConstraint.toRangeHeight(org.jfree.data.Range)"
"org.jfree.chart.block.GridArrangementTest.testRF()","org.jfree.chart.block.RectangleConstraint.<init>(org.jfree.data.Range, double)"
"org.jfree.chart.block.GridArrangementTest.testGridNotFull_FR()","org.jfree.chart.block.RectangleConstraint.<init>(double, org.jfree.data.Range)"
"org.jfree.chart.block.GridArrangementTest.testGridNotFull_FN()","org.jfree.chart.block.RectangleConstraint.toFixedWidth(double)"
"org.jfree.chart.block.GridArrangementTest.testGridNotFull_FN()","org.jfree.chart.block.GridArrangement.<init>(int, int)"
"org.jfree.chart.block.GridArrangementTest.testGridNotFull_FN()","org.jfree.chart.block.EmptyBlock.<init>(double, double)"
"org.jfree.chart.block.GridArrangementTest.testNullBlock_NN()","org.jfree.chart.block.GridArrangement.<init>(int, int)"
"org.jfree.chart.block.GridArrangementTest.testNN()","org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)"
"org.jfree.chart.block.GridArrangementTest.testGridNotFull_NN()","org.jfree.chart.block.GridArrangement.<init>(int, int)"
"org.jfree.chart.block.GridArrangementTest.testGridNotFull_NN()","org.jfree.chart.block.EmptyBlock.<init>(double, double)"
"org.jfree.chart.block.GridArrangementTest.testFN()","org.jfree.chart.block.LengthConstraintType.<init>(java.lang.String)"
"org.jfree.chart.block.GridArrangementTest.testFN()","org.jfree.chart.block.BlockContainer.arrange(java.awt.Graphics2D, org.jfree.chart.block.RectangleConstraint)"
"org.jfree.chart.block.GridArrangementTest.testNullBlock_FN()","org.jfree.chart.block.RectangleConstraint.toFixedWidth(double)"
"org.jfree.chart.block.GridArrangementTest.testNullBlock_FN()","org.jfree.chart.block.GridArrangement.<init>(int, int)"
"org.jfree.chart.block.GridArrangementTest.testGridNotFull_FF()","org.jfree.chart.block.RectangleConstraint.<init>(double, double)"
"org.jfree.chart.block.GridArrangementTest.testNullBlock_FF()","org.jfree.chart.block.RectangleConstraint.<init>(double, double)"
"org.jfree.chart.block.GridArrangementTest.testNullBlock_FR()","org.jfree.chart.block.RectangleConstraint.<init>(double, org.jfree.data.Range)"
"org.jfree.chart.block.GridArrangementTest.testRN()","org.jfree.chart.block.RectangleConstraint.toRangeWidth(org.jfree.data.Range)"
"org.jfree.chart.block.GridArrangementTest.testNF()","org.jfree.chart.block.RectangleConstraint.toFixedHeight(double)"
"org.jfree.chart.block.GridArrangementTest.testRR()","org.jfree.chart.block.RectangleConstraint.<init>(org.jfree.data.Range, org.jfree.data.Range)"
"org.jfree.data.general.DatasetUtilitiesTest.testIsEmptyOrNullXYDataset()","org.jfree.data.xy.XYSeries.clear()"
"org.jfree.data.xy.XYSeriesTest.testAddOrUpdate3()","org.jfree.data.xy.XYSeries.addOrUpdate(double, double)"
"org.jfree.data.xy.IntervalXYDelegateTest.testSerialization()","org.jfree.data.xy.IntervalXYDelegate.<init>(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.IntervalXYDelegateTest.testSerialization()","org.jfree.data.xy.IntervalXYDelegate.equals(java.lang.Object)"
"org.jfree.data.xy.IntervalXYDelegateTest.testCloning()","org.jfree.data.xy.IntervalXYDelegate.clone()"
"org.jfree.data.xy.IntervalXYDelegateTest.testEquals()","org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor(double)"
"org.jfree.data.xy.IntervalXYDelegateTest.testEquals()","org.jfree.data.xy.IntervalXYDelegate.setAutoWidth(boolean)"
"org.jfree.data.xy.XYDataItemTest.testCloning()","org.jfree.data.xy.XYDataItem.<init>(double, double)"
"org.jfree.data.xy.XYSeriesTest.testAdd()","org.jfree.data.xy.XYSeries.getY(int)"
"org.jfree.data.DefaultKeyedValuesTest.testSortByKeyAscending()","org.jfree.data.DefaultKeyedValues.sortByKeys(org.jfree.util.SortOrder)"
"org.jfree.data.DefaultKeyedValuesTest.testSortByValueDescending()","org.jfree.data.DefaultKeyedValues.sortByValues(org.jfree.util.SortOrder)"
"org.jfree.data.DefaultKeyedValuesTest.testSortByValueAscending()","org.jfree.data.DefaultKeyedValues.sortByValues(org.jfree.util.SortOrder)"
"org.jfree.chart.axis.LogAxisTest.testHashCode()","org.jfree.chart.axis.LogAxis.hashCode()"
"org.jfree.chart.axis.NumberTickUnitTest.testHashCode()","org.jfree.chart.axis.NumberTickUnit.hashCode()"
"org.jfree.data.function.LineFunction2DTest.testSerialization()","org.jfree.data.function.LineFunction2D.equals(java.lang.Object)"
"org.jfree.data.function.LineFunction2DTest.testEquals()","org.jfree.data.function.LineFunction2D.equals(java.lang.Object)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testEquals()","org.jfree.chart.urls.StandardPieURLGenerator.<init>()"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testEquals()","org.jfree.chart.urls.StandardPieURLGenerator.<init>(java.lang.String)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testEquals()","org.jfree.chart.urls.StandardPieURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.StandardPieURLGenerator.<init>(java.lang.String, java.lang.String)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.StandardPieURLGenerator.<init>(java.lang.String, java.lang.String, java.lang.String)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testURL()","org.jfree.chart.urls.StandardPieURLGenerator.generateURL(org.jfree.data.general.PieDataset, java.lang.Comparable, int)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardPieURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardPieURLGenerator.<init>(java.lang.String, java.lang.String)"
"org.jfree.chart.urls.StandardPieURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardPieURLGenerator.<init>(java.lang.String, java.lang.String, java.lang.String)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomCategoryURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomCategoryURLGenerator.addURLSeries(java.util.List)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomCategoryURLGenerator.<init>()"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomCategoryURLGenerator.addURLSeries(java.util.List)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomCategoryURLGenerator.getListCount()"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomCategoryURLGenerator.getURL(int, int)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomCategoryURLGenerator.getURLCount(int)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomCategoryURLGenerator.<init>()"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomCategoryURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomCategoryURLGenerator.addURLSeries(java.util.List)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomCategoryURLGenerator.<init>()"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testCloning()","org.jfree.chart.urls.CustomCategoryURLGenerator.clone()"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds_BoxAndWhiskerXYDataset()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.add(java.util.Date, org.jfree.data.statistics.BoxAndWhiskerItem)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds_BoxAndWhiskerXYDataset()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.<init>(java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds_BoxAndWhiskerXYDataset()","org.jfree.data.statistics.BoxAndWhiskerItem.<init>(double, double, double, double, double, double, double, double, java.util.List)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds1_XYDataset()","org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(org.jfree.data.xy.XYDataset, java.util.List, org.jfree.data.Range, boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds1_XYDataset()","org.jfree.data.xy.XYSeriesCollection.<init>()"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateToFindRangeBounds1_XYDataset()","org.jfree.data.xy.XYSeriesCollection.<init>(org.jfree.data.xy.XYSeries)"
"org.jfree.data.xy.XIntervalSeriesTest.testGetXLowValue()","org.jfree.data.xy.XIntervalSeries.getXLowValue(int)"
"org.jfree.data.xy.XIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XIntervalDataItem.getXHighValue()"
"org.jfree.data.xy.XIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XIntervalDataItem.getXLowValue()"
"org.jfree.data.xy.XIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XIntervalDataItem.getYValue()"
"org.jfree.data.xy.XIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XIntervalDataItem.getX()"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testConstructor()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getRangeLowerBound(boolean)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testConstructor()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.getRangeUpperBound(boolean)"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testSerialization()","org.jfree.chart.plot.dial.DialCap.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testSerialization()","org.jfree.chart.plot.dial.DialCap.<init>()"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testSerialization()","org.jfree.chart.plot.dial.AbstractDialLayer.hasListener(java.util.EventListener)"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testSerialization()","org.jfree.chart.plot.dial.MyDialLayerChangeListener.<init>()"
"org.jfree.data.DataUtilitiesTest.testCalculateRowTotal2()","org.jfree.data.DataUtilities.calculateRowTotal(org.jfree.data.Values2D, int, int[])"
"org.jfree.chart.plot.DefaultDrawingSupplierTest.testEquals()","org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlineStroke()"
"org.jfree.chart.plot.DefaultDrawingSupplierTest.testEquals()","org.jfree.chart.plot.DefaultDrawingSupplier.getNextOutlinePaint()"
"org.jfree.chart.plot.DefaultDrawingSupplierTest.testCloning()","org.jfree.chart.plot.DefaultDrawingSupplier.clone()"
"org.jfree.chart.plot.DefaultDrawingSupplierTest.testCloning()","org.jfree.chart.plot.DefaultDrawingSupplier.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryPlotTest.testRemoveDomainMarker()","org.jfree.chart.plot.CategoryPlot.removeDomainMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.PiePlot3DTest.testSerialization()","org.jfree.chart.plot.PiePlot3D.equals(java.lang.Object)"
"org.jfree.chart.plot.PiePlot3DTest.testSerialization()","org.jfree.chart.plot.PiePlot3D.<init>(org.jfree.data.general.PieDataset)"
"org.jfree.chart.plot.PiePlot3DTest.testSerialization()","org.jfree.chart.plot.PiePlot.setCircular(boolean, boolean)"
"org.jfree.chart.plot.PiePlot3DTest.testSerialization()","org.jfree.util.Rotation.<init>(java.lang.String, double)"
"org.jfree.chart.plot.CategoryPlotTest.testRemoveRangeMarker()","org.jfree.chart.plot.CategoryPlot.removeRangeMarker(org.jfree.chart.plot.Marker)"
"org.jfree.chart.plot.ContourPlotTest.testSerialization()","org.jfree.chart.plot.ContourPlot.<init>(org.jfree.data.contour.ContourDataset, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ValueAxis, org.jfree.chart.axis.ColorBar)"
"org.jfree.chart.plot.ContourPlotTest.testSerialization()","org.jfree.chart.labels.StandardContourToolTipGenerator.<init>()"
"org.jfree.chart.StandardChartThemeTest.testSerialization()","org.jfree.chart.StandardChartTheme.equals(java.lang.Object)"
"org.jfree.chart.plot.PiePlotTest.testSerialization()","org.jfree.chart.plot.PiePlot.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryPlotTest.testConstructor()","org.jfree.chart.plot.CategoryPlot.getAxisOffset()"
"org.jfree.chart.plot.DefaultDrawingSupplierTest.testSerialization()","org.jfree.chart.ChartColor.createDefaultPaintArray()"
"org.jfree.chart.plot.DefaultDrawingSupplierTest.testSerialization()","org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes()"
"org.jfree.chart.plot.PiePlotTest.testGetBaseSectionPaint()","org.jfree.chart.plot.PiePlot.getBaseSectionPaint()"
"org.jfree.chart.plot.PiePlotTest.testGetBaseSectionPaint()","org.jfree.chart.plot.PiePlot.setBaseSectionPaint(java.awt.Paint)"
"org.jfree.chart.StandardChartThemeTest.testCloning()","org.jfree.chart.StandardChartTheme.clone()"
"org.jfree.chart.plot.PiePlotTest.testCloning()","org.jfree.chart.plot.PiePlot.<init>()"
"org.jfree.chart.plot.PiePlotTest.testCloning()","org.jfree.chart.plot.PiePlot.clone()"
"org.jfree.chart.axis.SymbolAxisTest.testEquals()","org.jfree.chart.axis.SymbolAxis.setGridBandAlternatePaint(java.awt.Paint)"
"org.jfree.chart.axis.SymbolAxisTest.testEquals()","org.jfree.chart.axis.SymbolAxis.setGridBandPaint(java.awt.Paint)"
"org.jfree.chart.axis.SymbolAxisTest.testEquals()","org.jfree.chart.axis.SymbolAxis.setGridBandsVisible(boolean)"
"org.jfree.chart.axis.NumberAxisTest.testEquals()","org.jfree.chart.axis.NumberAxis.setNumberFormatOverride(java.text.NumberFormat)"
"org.jfree.chart.axis.NumberAxisTest.testEquals()","org.jfree.chart.axis.NumberAxis.setRangeType(org.jfree.data.RangeType)"
"org.jfree.chart.axis.NumberAxisTest.testEquals()","org.jfree.chart.axis.NumberAxis.setTickUnit(org.jfree.chart.axis.NumberTickUnit)"
"org.jfree.chart.axis.SymbolAxisTest.testCloning()","org.jfree.chart.axis.SymbolAxis.<init>(java.lang.String, java.lang.String[])"
"org.jfree.chart.axis.SymbolAxisTest.testCloning()","org.jfree.chart.axis.SymbolAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.SymbolAxisTest.testCloning()","org.jfree.chart.axis.NumberAxis.setAutoRangeStickyZero(boolean)"
"org.jfree.data.time.TimePeriodValuesCollectionTest.testGetSeries()","org.jfree.data.time.TimePeriodValuesCollection.getSeries(int)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.isAdvanceLineVisible()"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.isBoundMappedToLastCycle()"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.setAdvanceLinePaint(java.awt.Paint)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.setAdvanceLineStroke(java.awt.Stroke)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.setAdvanceLineVisible(boolean)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.setBoundMappedToLastCycle(boolean)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.setOffset(double)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testEquals()","org.jfree.chart.axis.CyclicNumberAxis.setPeriod(double)"
"org.jfree.chart.imagemap.StandardURLTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.StandardURLTagFragmentGenerator.<init>()"
"org.jfree.chart.imagemap.StandardURLTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.StandardURLTagFragmentGenerator.generateURLFragment(java.lang.String)"
"org.jfree.chart.renderer.LookupPaintScaleTest.testConstructor1()","org.jfree.chart.renderer.LookupPaintScale.getLowerBound()"
"org.jfree.chart.renderer.LookupPaintScaleTest.testConstructor1()","org.jfree.chart.renderer.LookupPaintScale.getUpperBound()"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testHashcode()","org.jfree.data.time.ohlc.OHLCSeriesCollection.hashCode()"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testAdditionOfDuplicatePeriod()","org.jfree.data.time.ohlc.OHLCSeries.add(org.jfree.data.time.RegularTimePeriod, double, double, double, double)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testAdditionOfDuplicatePeriod()","org.jfree.data.time.ohlc.OHLCSeries.<init>(java.lang.Comparable)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testSetMaximumItemCount()","org.jfree.data.time.ohlc.OHLCSeries.getPeriod(int)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testSetMaximumItemCount()","org.jfree.data.ComparableObjectSeries.getMaximumItemCount()"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testSerialization()","org.jfree.data.time.ohlc.OHLCSeries.add(org.jfree.data.time.RegularTimePeriod, double, double, double, double)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testSerialization()","org.jfree.data.time.ohlc.OHLCSeries.<init>(java.lang.Comparable)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testClear()","org.jfree.data.ComparableObjectSeries.clear()"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testClear()","org.jfree.data.general.Series.isEmpty()"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testCloning()","org.jfree.data.time.ohlc.OHLCSeries.add(org.jfree.data.time.RegularTimePeriod, double, double, double, double)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testCloning()","org.jfree.data.time.ohlc.OHLCSeries.<init>(java.lang.Comparable)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testIndexOf()","org.jfree.data.time.ohlc.OHLCSeries.add(org.jfree.data.time.RegularTimePeriod, double, double, double, double)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testIndexOf()","org.jfree.data.time.ohlc.OHLCSeries.<init>(java.lang.Comparable)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testIndexOf()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testSetMaximumItemCount2()","org.jfree.data.time.ohlc.OHLCSeries.getPeriod(int)"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testEquals()","org.jfree.data.time.ohlc.OHLCSeriesCollection.setXPosition(org.jfree.data.time.TimePeriodAnchor)"
"org.jfree.data.time.ohlc.OHLCSeriesTest.testHashcode()","org.jfree.data.ComparableObjectSeries.hashCode()"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testSerialization()","org.jfree.data.time.ohlc.OHLCSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testSerialization()","org.jfree.data.time.TimePeriodAnchor.<init>(java.lang.String)"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testSerialization()","org.jfree.data.time.ohlc.OHLCSeriesCollection.<init>()"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testSerialization()","org.jfree.data.time.ohlc.OHLCSeriesCollection.addSeries(org.jfree.data.time.ohlc.OHLCSeries)"
"org.jfree.chart.renderer.RendererUtilitiesTest.testFindLiveItemsUpperBound_Descending()","null.<init>(org.jfree.chart.renderer.RendererUtilitiesTest)"
"org.jfree.data.DomainOrderTest.testSerialization()","org.jfree.data.DomainOrder.<init>(java.lang.String)"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testGenerateLabel()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.generateLabel(org.jfree.data.category.CategoryDataset, int, int)"
"org.jfree.chart.entity.CategoryItemEntityTest.testCloning()","org.jfree.chart.entity.CategoryItemEntity.<init>(java.awt.Shape, java.lang.String, java.lang.String, org.jfree.data.category.CategoryDataset, int, java.lang.Object, int)"
"org.jfree.chart.entity.CategoryItemEntityTest.testCloning()","org.jfree.chart.entity.CategoryItemEntity.equals(java.lang.Object)"
"org.jfree.chart.entity.CategoryItemEntityTest.testEquals()","org.jfree.chart.entity.CategoryItemEntity.setCategory(java.lang.Object)"
"org.jfree.chart.entity.CategoryItemEntityTest.testEquals()","org.jfree.chart.entity.CategoryItemEntity.setCategoryIndex(int)"
"org.jfree.chart.entity.CategoryItemEntityTest.testEquals()","org.jfree.chart.entity.CategoryItemEntity.setSeries(int)"
"org.jfree.chart.labels.StandardCategorySeriesLabelGeneratorTest.testGenerateLabel()","org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.generateLabel(org.jfree.data.category.CategoryDataset, int)"
"org.jfree.chart.urls.StandardCategoryURLGeneratorTest.testGenerateURL()","org.jfree.chart.urls.StandardCategoryURLGenerator.generateURL(org.jfree.data.category.CategoryDataset, int, int)"
"org.jfree.data.category.CategoryToPieDatasetTest.testEquals()","org.jfree.data.category.CategoryToPieDataset.equals(java.lang.Object)"
"org.jfree.data.time.QuarterTest.testConstructor()","org.jfree.data.time.Quarter.<init>(int, int)"
"org.jfree.data.general.DatasetUtilitiesTest.testLimitPieDataset()","org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(org.jfree.data.general.PieDataset, java.lang.Comparable, double)"
"org.jfree.data.general.DatasetUtilitiesTest.testLimitPieDataset()","org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(org.jfree.data.general.PieDataset, java.lang.Comparable, double, int)"
"org.jfree.data.general.DatasetUtilitiesTest.testCalculatePieDatasetTotal()","org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(org.jfree.data.general.PieDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testCalculatePieDatasetTotal()","org.jfree.data.general.DefaultPieDataset.setValue(java.lang.Comparable, double)"
"org.jfree.chart.axis.CategoryLabelPositionTest.testSerialization()","org.jfree.chart.axis.CategoryLabelPosition.<init>()"
"org.jfree.chart.axis.CategoryLabelWidthTypeTest.testSerialization()","org.jfree.chart.axis.CategoryLabelWidthType.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryLabelWidthTypeTest.testSerialization()","org.jfree.chart.axis.CategoryLabelWidthType.<init>(java.lang.String)"
"org.jfree.data.DefaultKeyedValues2DTest.testGetRowKey()","org.jfree.data.DefaultKeyedValues2D.getRowKey(int)"
"org.jfree.data.DefaultKeyedValues2DTest.testGetRowKey()","org.jfree.data.DefaultKeyedValues2D.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.chart.plot.CategoryMarkerTest.testCloning()","org.jfree.chart.plot.Marker.clone()"
"org.jfree.chart.axis.CategoryAxisTest.testCloning2()","org.jfree.chart.axis.CategoryAxis.addCategoryLabelToolTip(java.lang.Comparable, java.lang.String)"
"org.jfree.chart.axis.CategoryAxisTest.testCloning2()","org.jfree.chart.axis.CategoryAxis.setTickLabelFont(java.lang.Comparable, java.awt.Font)"
"org.jfree.chart.axis.CategoryAxisTest.testCloning2()","org.jfree.chart.axis.CategoryAxis.setTickLabelPaint(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.axis.AxisTest.testCloning()","org.jfree.chart.axis.Axis.setAxisLinePaint(java.awt.Paint)"
"org.jfree.chart.PieChart3DTest.testReplaceDatasetOnPieChart()","org.jfree.chart.plot.PiePlot.setDataset(org.jfree.data.general.PieDataset)"
"org.jfree.chart.plot.CategoryMarkerTest.testGetSetKey()","org.jfree.chart.plot.CategoryMarker.getKey()"
"org.jfree.chart.plot.CategoryMarkerTest.testGetSetKey()","org.jfree.chart.plot.CategoryMarker.setKey(java.lang.Comparable)"
"org.jfree.chart.annotations.TextAnnotationTest.testChangeEvents()","org.jfree.chart.annotations.TextAnnotation.setFont(java.awt.Font)"
"org.jfree.chart.annotations.TextAnnotationTest.testChangeEvents()","org.jfree.chart.annotations.TextAnnotation.setPaint(java.awt.Paint)"
"org.jfree.chart.annotations.TextAnnotationTest.testChangeEvents()","org.jfree.chart.annotations.TextAnnotation.setRotationAngle(double)"
"org.jfree.chart.annotations.TextAnnotationTest.testChangeEvents()","org.jfree.chart.annotations.TextAnnotation.setText(java.lang.String)"
"org.jfree.chart.annotations.TextAnnotationTest.testChangeEvents()","org.jfree.chart.annotations.TextAnnotation.setTextAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.annotations.TextAnnotationTest.testChangeEvents()","org.jfree.chart.annotations.TextAnnotation.setRotationAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.plot.MarkerTest.testGetSetStroke()","org.jfree.chart.plot.Marker.setStroke(java.awt.Stroke)"
"org.jfree.chart.plot.MarkerTest.testGetSetStroke()","org.jfree.chart.plot.Marker.getStroke()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabel()","org.jfree.chart.plot.Marker.getLabel()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabel()","org.jfree.chart.plot.Marker.setLabel(java.lang.String)"
"org.jfree.chart.plot.MarkerTest.testGetSetAlpha()","org.jfree.chart.plot.Marker.setAlpha(float)"
"org.jfree.chart.plot.MarkerTest.testGetSetAlpha()","org.jfree.chart.plot.Marker.getAlpha()"
"org.jfree.chart.axis.SubCategoryAxisTest.testEquals()","org.jfree.chart.axis.SubCategoryAxis.setSubLabelFont(java.awt.Font)"
"org.jfree.chart.axis.SubCategoryAxisTest.testEquals()","org.jfree.chart.axis.SubCategoryAxis.setSubLabelPaint(java.awt.Paint)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testCloning()","org.jfree.chart.axis.CyclicNumberAxis.<init>(double, double, java.lang.String)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testCloning()","org.jfree.chart.axis.CyclicNumberAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testCloning()","org.jfree.chart.axis.CyclicNumberAxis.setFixedAutoRange(double)"
"org.jfree.chart.plot.CategoryMarkerTest.testEquals()","org.jfree.chart.plot.CategoryMarker.equals(java.lang.Object)"
"org.jfree.chart.plot.CategoryMarkerTest.testEquals()","org.jfree.chart.plot.CategoryMarker.<init>(java.lang.Comparable)"
"org.jfree.chart.plot.CategoryMarkerTest.testEquals()","org.jfree.chart.plot.CategoryMarker.<init>(java.lang.Comparable, java.awt.Paint, java.awt.Stroke)"
"org.jfree.chart.plot.CategoryMarkerTest.testEquals()","org.jfree.chart.plot.CategoryMarker.<init>(java.lang.Comparable, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)"
"org.jfree.chart.axis.ColorBarTest.testCloning()","org.jfree.chart.axis.ColorBar.clone()"
"org.jfree.chart.plot.MarkerTest.testGetSetPaint()","org.jfree.chart.plot.Marker.setPaint(java.awt.Paint)"
"org.jfree.chart.plot.MarkerTest.testGetSetPaint()","org.jfree.chart.plot.Marker.getPaint()"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setLabelAngle(double)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setLabelInsets(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setLabelLocation(org.jfree.chart.axis.AxisLabelLocation)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setMinorTickMarkInsideLength(float)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setMinorTickMarkOutsideLength(float)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setMinorTickMarksVisible(boolean)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setTickLabelInsets(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setTickLabelsVisible(boolean)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setTickMarkInsideLength(float)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setTickMarkOutsideLength(float)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setTickMarkPaint(java.awt.Paint)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setTickMarkStroke(java.awt.Stroke)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setTickMarksVisible(boolean)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setVisible(boolean)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setAttributedLabel(java.text.AttributedString)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setAxisLineStroke(java.awt.Stroke)"
"org.jfree.chart.axis.AxisTest.testEquals()","org.jfree.chart.axis.Axis.setFixedDimension(double)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testCloning2()","org.jfree.chart.axis.ExtendedCategoryAxis.clone()"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testCloning2()","org.jfree.chart.axis.CategoryAxis.addCategoryLabelToolTip(java.lang.Comparable, java.lang.String)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testCloning2()","org.jfree.chart.axis.CategoryAxis.setTickLabelFont(java.lang.Comparable, java.awt.Font)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testCloning2()","org.jfree.chart.axis.CategoryAxis.setTickLabelPaint(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelTextAnchor()","org.jfree.chart.plot.Marker.getLabelTextAnchor()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelTextAnchor()","org.jfree.chart.plot.Marker.setLabelTextAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.axis.LogAxisTest.testTickMarksVisibleDefault()","org.jfree.chart.axis.LogAxis.<init>(java.lang.String)"
"org.jfree.chart.axis.LogAxisTest.testTickMarksVisibleDefault()","org.jfree.chart.axis.ValueAxis.setDefaultAutoRange(org.jfree.data.Range)"
"org.jfree.chart.plot.IntervalMarkerTest.testSerialization()","org.jfree.ui.LengthAdjustmentType.<init>(java.lang.String)"
"org.jfree.chart.plot.IntervalMarkerTest.testSerialization()","org.jfree.chart.plot.IntervalMarker.<init>(double, double)"
"org.jfree.chart.plot.IntervalMarkerTest.testSerialization()","org.jfree.chart.plot.IntervalMarker.<init>(double, double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)"
"org.jfree.chart.plot.IntervalMarkerTest.testSerialization()","org.jfree.chart.plot.IntervalMarker.equals(java.lang.Object)"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelOffset()","org.jfree.chart.plot.Marker.getLabelOffset()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelOffset()","org.jfree.chart.plot.Marker.setLabelOffset(org.jfree.ui.RectangleInsets)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryLineAnnotation.setCategory1(java.lang.Comparable)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryLineAnnotation.setCategory2(java.lang.Comparable)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryLineAnnotation.setPaint(java.awt.Paint)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryLineAnnotation.setStroke(java.awt.Stroke)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryLineAnnotation.setValue1(double)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testEquals()","org.jfree.chart.annotations.CategoryLineAnnotation.setValue2(double)"
"org.jfree.chart.plot.IntervalMarkerTest.testCloning()","org.jfree.chart.plot.IntervalMarker.clone()"
"org.jfree.chart.axis.CategoryAxisTest.testEquals()","org.jfree.chart.axis.CategoryAxis.addCategoryLabelURL(java.lang.Comparable, java.lang.String)"
"org.jfree.chart.axis.CategoryAxisTest.testEquals()","org.jfree.chart.axis.CategoryAxis.setCategoryLabelPositionOffset(int)"
"org.jfree.chart.axis.CategoryAxisTest.testEquals()","org.jfree.chart.axis.CategoryAxis.setCategoryLabelPositions(org.jfree.chart.axis.CategoryLabelPositions)"
"org.jfree.chart.axis.CategoryAxisTest.testEquals()","org.jfree.chart.axis.CategoryAxis.setCategoryMargin(double)"
"org.jfree.chart.axis.CategoryAxisTest.testEquals()","org.jfree.chart.axis.CategoryAxis.setLowerMargin(double)"
"org.jfree.chart.axis.CategoryAxisTest.testEquals()","org.jfree.chart.axis.CategoryAxis.setMaximumCategoryLabelWidthRatio(float)"
"org.jfree.chart.axis.CategoryAxisTest.testEquals()","org.jfree.chart.axis.CategoryAxis.setUpperMargin(double)"
"org.jfree.chart.plot.CategoryMarkerTest.testSerialization()","org.jfree.ui.LengthAdjustmentType.<init>(java.lang.String)"
"org.jfree.chart.plot.CategoryMarkerTest.testSerialization()","org.jfree.chart.plot.CategoryMarker.equals(java.lang.Object)"
"org.jfree.chart.plot.ValueMarkerTest.testGetSetValue()","org.jfree.chart.plot.ValueMarker.setValue(double)"
"org.jfree.chart.plot.ValueMarkerTest.testGetSetValue()","org.jfree.chart.plot.ValueMarker.getValue()"
"org.jfree.chart.axis.ColorBarTest.testEquals()","org.jfree.chart.axis.ColorBar.setAxis(org.jfree.chart.axis.ValueAxis)"
"org.jfree.chart.axis.ColorBarTest.testEquals()","org.jfree.chart.axis.ColorBar.setColorPalette(org.jfree.chart.plot.ColorPalette)"
"org.jfree.chart.plot.ValueMarkerTest.test1802195()","org.jfree.chart.plot.ValueMarker.setValue(double)"
"org.jfree.chart.axis.LogAxisTest.testEquals()","org.jfree.chart.axis.LogAxis.setBase(double)"
"org.jfree.chart.axis.LogAxisTest.testEquals()","org.jfree.chart.axis.LogAxis.setSmallestValue(double)"
"org.jfree.chart.axis.LogAxisTest.testEquals()","org.jfree.chart.axis.ValueAxis.setMinorTickCount(int)"
"org.jfree.chart.plot.IntervalMarkerTest.testGetSetEndValue()","org.jfree.chart.plot.IntervalMarker.setEndValue(double)"
"org.jfree.chart.plot.IntervalMarkerTest.testEquals()","org.jfree.chart.plot.IntervalMarker.setGradientPaintTransformer(org.jfree.ui.GradientPaintTransformer)"
"org.jfree.chart.axis.SubCategoryAxisTest.testCloning()","org.jfree.chart.axis.SubCategoryAxis.addSubCategory(java.lang.Comparable)"
"org.jfree.chart.axis.SubCategoryAxisTest.testCloning()","org.jfree.chart.axis.SubCategoryAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.SubCategoryAxisTest.testCloning()","org.jfree.chart.axis.SubCategoryAxis.<init>(java.lang.String)"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelFont()","org.jfree.chart.plot.Marker.getLabelFont()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelFont()","org.jfree.chart.plot.Marker.setLabelFont(java.awt.Font)"
"org.jfree.chart.axis.LogAxisTest.testCloning()","org.jfree.chart.axis.LogAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testEquals()","org.jfree.chart.axis.ExtendedCategoryAxis.setSubLabelFont(java.awt.Font)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testEquals()","org.jfree.chart.axis.ExtendedCategoryAxis.addSubLabel(java.lang.Comparable, java.lang.String)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testEquals()","org.jfree.chart.axis.ExtendedCategoryAxis.setSubLabelPaint(java.awt.Paint)"
"org.jfree.chart.PieChartTest.testReplaceDatasetOnPieChart()","org.jfree.chart.plot.PiePlot.setDataset(org.jfree.data.general.PieDataset)"
"org.jfree.chart.plot.CategoryMarkerTest.testGetSetDrawAsLine()","org.jfree.chart.plot.CategoryMarker.getDrawAsLine()"
"org.jfree.chart.plot.CategoryMarkerTest.testGetSetDrawAsLine()","org.jfree.chart.plot.CategoryMarker.setDrawAsLine(boolean)"
"org.jfree.chart.axis.ColorBarTest.testHashCode()","org.jfree.chart.axis.ColorBar.hashCode()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelAnchor()","org.jfree.chart.plot.Marker.getLabelAnchor()"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelAnchor()","org.jfree.chart.plot.Marker.setLabelAnchor(org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.plot.MarkerTest.testGetSetLabelOffsetType()","org.jfree.chart.plot.Marker.getLabelOffsetType()"
"org.jfree.chart.plot.MarkerTest.testGetSetOutlinePaint()","org.jfree.chart.plot.Marker.getOutlinePaint()"
"org.jfree.chart.plot.MarkerTest.testGetSetOutlinePaint()","org.jfree.chart.plot.Marker.setOutlinePaint(java.awt.Paint)"
"org.jfree.chart.plot.MarkerTest.testGetSetOutlineStroke()","org.jfree.chart.plot.Marker.getOutlineStroke()"
"org.jfree.chart.plot.MarkerTest.testGetSetOutlineStroke()","org.jfree.chart.plot.Marker.setOutlineStroke(java.awt.Stroke)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testHashCode()","org.jfree.chart.axis.CyclicNumberAxis.<init>(double, double, java.lang.String)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testHashCode()","org.jfree.chart.axis.CyclicNumberAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.CyclicNumberAxisTest.testHashCode()","org.jfree.chart.axis.CyclicNumberAxis.setFixedAutoRange(double)"
"org.jfree.chart.plot.IntervalMarkerTest.testGetSetStartValue()","org.jfree.chart.plot.IntervalMarker.setStartValue(double)"
"org.jfree.data.time.YearTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.TimePeriodValuesTest.testSerialization()","org.jfree.data.time.TimePeriodValues.add(org.jfree.data.time.TimePeriod, java.lang.Number)"
"org.jfree.data.time.TimePeriodValuesTest.testSerialization()","org.jfree.data.time.TimePeriodValues.equals(java.lang.Object)"
"org.jfree.data.time.YearTest.testGetFirstMillisecond()","org.jfree.data.time.Year.getFirstMillisecond()"
"org.jfree.data.time.TimePeriodValuesTest.testAddValue()","org.jfree.data.time.TimePeriodValues.add(org.jfree.data.time.TimePeriod, java.lang.Number)"
"org.jfree.data.time.TimePeriodValuesTest.testAddValue()","org.jfree.data.time.TimePeriodValues.getValue(int)"
"org.jfree.chart.block.BorderArrangementTest.testBugX()","org.jfree.chart.block.RectangleConstraint.<init>(org.jfree.data.Range, org.jfree.data.Range)"
"org.jfree.data.xy.XIntervalSeriesTest.testSetMaximumItemCount2()","org.jfree.data.xy.XIntervalSeries.getX(int)"
"org.jfree.data.xy.XIntervalSeriesTest.testSetMaximumItemCount()","org.jfree.data.xy.XIntervalSeries.getX(int)"
"org.jfree.data.xy.XIntervalSeriesTest.testRemove()","org.jfree.data.xy.XIntervalSeries.getX(int)"
"org.jfree.chart.urls.CustomCategoryURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.CustomCategoryURLGenerator.<init>()"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf2()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf2()","org.jfree.data.xy.VectorSeries.add(double, double, double, double)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf2()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf2()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf2()","org.jfree.data.xy.XYCoordinate.<init>(double, double)"
"org.jfree.data.xy.VectorSeriesTest.testSetMaximumItemCount2()","org.jfree.data.xy.VectorSeries.getXValue(int)"
"org.jfree.data.xy.VectorSeriesTest.testSetMaximumItemCount()","org.jfree.data.xy.VectorSeries.getXValue(int)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf()","org.jfree.data.xy.VectorSeries.add(double, double, double, double)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testIndexOf()","org.jfree.data.xy.XYCoordinate.<init>(double, double)"
"org.jfree.data.xy.VectorSeriesTest.testAdditionOfDuplicateXValues()","org.jfree.data.xy.VectorSeries.getVectorXValue(int)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.VectorSeriesCollection.getSeriesCount()"
"org.jfree.data.xy.VectorSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.VectorSeriesCollection.getSeriesKey(int)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.VectorSeriesCollection.removeSeries(org.jfree.data.xy.VectorSeries)"
"org.jfree.data.xy.VectorSeriesTest.testRemove()","org.jfree.data.xy.VectorSeries.getXValue(int)"
"org.jfree.data.xy.VectorSeriesTest.testClear()","org.jfree.data.ComparableObjectSeries.clear()"
"org.jfree.data.xy.VectorSeriesTest.testClear()","org.jfree.data.general.Series.isEmpty()"
"org.jfree.data.xy.VectorSeriesTest.testCloning()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.VectorSeriesTest.testCloning()","org.jfree.data.xy.VectorSeries.add(double, double, double, double)"
"org.jfree.data.xy.VectorSeriesTest.testCloning()","org.jfree.data.xy.VectorSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.chart.block.GridArrangementTest.testCloning()","org.jfree.chart.block.GridArrangement.<init>(int, int)"
"org.jfree.chart.block.GridArrangementTest.testSerialization()","org.jfree.chart.block.GridArrangement.equals(java.lang.Object)"
"org.jfree.chart.block.GridArrangementTest.testEquals()","org.jfree.chart.block.GridArrangement.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYToolTipGenerator.clone()"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYZToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>(java.lang.String, java.text.DateFormat, java.text.DateFormat, java.text.DateFormat)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardXYToolTipGenerator.<init>(java.lang.String, java.text.DateFormat, java.text.DateFormat)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYZToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYZToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.StandardXYZToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYZToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.axis.DateTickMarkPositionTest.testSerialization()","org.jfree.chart.axis.DateTickMarkPosition.<init>(java.lang.String)"
"org.jfree.chart.axis.DateTickMarkPositionTest.testSerialization()","org.jfree.chart.axis.DateTickMarkPosition.equals(java.lang.Object)"
"org.jfree.chart.labels.ItemLabelPositionTest.testSerialization()","org.jfree.chart.labels.ItemLabelPosition.<init>()"
"org.jfree.chart.labels.ItemLabelAnchorTest.testEquals()","org.jfree.chart.labels.ItemLabelAnchor.equals(java.lang.Object)"
"org.jfree.chart.labels.ItemLabelAnchorTest.testSerialization()","org.jfree.chart.labels.ItemLabelAnchor.<init>(java.lang.String)"
"org.jfree.data.DefaultKeyedValuesTest.testCloning()","org.jfree.data.DefaultKeyedValues.equals(java.lang.Object)"
"org.jfree.data.DefaultKeyedValuesTest.testSerialization()","org.jfree.data.DefaultKeyedValues.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testCloning()","org.jfree.chart.plot.dial.StandardDialRange.clone()"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testHashCode()","org.jfree.chart.plot.dial.StandardDialRange.hashCode()"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialRange.<init>()"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialRange.<init>(double, double, java.awt.Paint)"
"org.jfree.chart.plot.dial.StandardDialRangeTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialRange.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractPieItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.StandardPieSectionLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractPieItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testEquals1481087()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testEquals1481087()","org.jfree.chart.labels.StandardCategoryToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testEquals1481087()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.<init>()"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.<init>()"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.<init>()"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testEquals1481087()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testEquals1481087()","org.jfree.chart.labels.StandardCategoryToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.renderer.xy.GradientXYBarPainterTest.testSerialization()","org.jfree.chart.renderer.xy.GradientXYBarPainter.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.GradientXYBarPainterTest.testSerialization()","org.jfree.chart.renderer.xy.GradientXYBarPainter.<init>(double, double, double)"
"org.jfree.chart.labels.SymbolicXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.SymbolicXYItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.SymbolicXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.SymbolicXYItemLabelGenerator.<init>()"
"org.jfree.chart.plot.PlotRenderingInfoTest.testSerialization()","org.jfree.chart.plot.PlotRenderingInfo.equals(java.lang.Object)"
"org.jfree.data.time.MonthTest.testSerialization()","org.jfree.data.time.Month.equals(java.lang.Object)"
"org.jfree.data.xy.XIntervalDataItemTest.testSerialization()","org.jfree.data.xy.XIntervalDataItem.<init>(double, double, double, double)"
"org.jfree.data.xy.XIntervalDataItemTest.testSerialization()","org.jfree.data.xy.YWithXInterval.<init>(double, double, double)"
"org.jfree.chart.axis.NumberTickUnitTest.testSerialization()","org.jfree.chart.axis.NumberTickUnit.equals(java.lang.Object)"
"org.jfree.data.general.DatasetGroupTest.testSerialization()","org.jfree.data.general.DatasetGroup.equals(java.lang.Object)"
"org.jfree.data.time.ohlc.OHLCTest.testSerialization()","org.jfree.data.time.ohlc.OHLC.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testSerialization()","org.jfree.data.xy.DefaultHighLowDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testSerialization()","org.jfree.data.xy.DefaultHighLowDataset.<init>(java.lang.Comparable, java.util.Date[], double[], double[], double[], double[], double[])"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testSerialization()","org.jfree.data.xy.DefaultHighLowDataset.createNumberArray(double[])"
"org.jfree.chart.LegendItemTest.testSerialization2()","org.jfree.chart.LegendItem.<init>(java.text.AttributedString, java.lang.String, java.lang.String, java.lang.String, boolean, java.awt.Shape, boolean, java.awt.Paint, boolean, java.awt.Paint, java.awt.Stroke, boolean, java.awt.Shape, java.awt.Stroke, java.awt.Paint)"
"org.jfree.chart.LegendItemTest.testSerialization2()","org.jfree.chart.LegendItem.<init>(java.text.AttributedString, java.lang.String, java.lang.String, java.lang.String, java.awt.Shape, java.awt.Paint)"
"org.jfree.chart.LegendItemTest.testSerialization2()","org.jfree.chart.LegendItem.characterIteratorToString(java.text.CharacterIterator)"
"org.jfree.data.RangeTest.testSerialization()","org.jfree.data.Range.equals(java.lang.Object)"
"org.jfree.data.function.PowerFunction2DTest.testSerialization()","org.jfree.data.function.PowerFunction2D.equals(java.lang.Object)"
"org.jfree.data.function.PowerFunction2DTest.testSerialization()","org.jfree.data.function.PowerFunction2D.<init>(double, double)"
"org.jfree.data.xy.XYBarDatasetTest.testSerialization()","org.jfree.data.xy.XYBarDataset.equals(java.lang.Object)"
"org.jfree.data.xy.XYBarDatasetTest.testSerialization()","org.jfree.data.xy.XYBarDataset.<init>(org.jfree.data.xy.XYDataset, double)"
"org.jfree.chart.renderer.GrayPaintScaleTest.testSerialization()","org.jfree.chart.renderer.GrayPaintScale.equals(java.lang.Object)"
"org.jfree.chart.renderer.GrayPaintScaleTest.testSerialization()","org.jfree.chart.renderer.GrayPaintScale.<init>()"
"org.jfree.chart.renderer.GrayPaintScaleTest.testSerialization()","org.jfree.chart.renderer.GrayPaintScale.<init>(double, double)"
"org.jfree.chart.renderer.GrayPaintScaleTest.testSerialization()","org.jfree.chart.renderer.GrayPaintScale.<init>(double, double, int)"
"org.jfree.chart.plot.MeterIntervalTest.testSerialization()","org.jfree.chart.plot.MeterInterval.equals(java.lang.Object)"
"org.jfree.chart.plot.MeterIntervalTest.testSerialization()","org.jfree.chart.plot.MeterInterval.<init>(java.lang.String, org.jfree.data.Range)"
"org.jfree.chart.plot.MeterIntervalTest.testSerialization()","org.jfree.chart.plot.MeterInterval.<init>(java.lang.String, org.jfree.data.Range, java.awt.Paint, java.awt.Stroke, java.awt.Paint)"
"org.jfree.chart.urls.StandardCategoryURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>(java.lang.String)"
"org.jfree.chart.urls.StandardCategoryURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardCategoryURLGenerator.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testSerialization()","org.jfree.data.xy.DefaultOHLCDataset.equals(java.lang.Object)"
"org.jfree.chart.labels.CustomXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.CustomXYToolTipGenerator.addToolTipSeries(java.util.List)"
"org.jfree.chart.labels.CustomXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.CustomXYToolTipGenerator.equals(java.lang.Object)"
"org.jfree.data.xy.XYIntervalTest.testSerialization()","org.jfree.data.xy.XYInterval.equals(java.lang.Object)"
"org.jfree.data.xy.XYIntervalSeriesTest.testSerialization()","org.jfree.data.xy.XYIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalSeriesTest.testSerialization()","org.jfree.data.xy.XYIntervalSeries.add(double, double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalSeriesTest.testSerialization()","org.jfree.data.xy.XYIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.renderer.category.GradientBarPainterTest.testSerialization()","org.jfree.chart.renderer.category.GradientBarPainter.<init>(double, double, double)"
"org.jfree.data.time.TimePeriodAnchorTest.testSerialization()","org.jfree.data.time.TimePeriodAnchor.<init>(java.lang.String)"
"org.jfree.data.time.WeekTest.testSerialization()","org.jfree.data.time.Week.equals(java.lang.Object)"
"org.jfree.data.xy.YIntervalDataItemTest.testSerialization()","org.jfree.data.xy.YIntervalDataItem.<init>(double, double, double, double)"
"org.jfree.data.xy.YIntervalDataItemTest.testSerialization()","org.jfree.data.xy.YInterval.<init>(double, double, double)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testSerialization()","org.jfree.data.statistics.SimpleHistogramDataset.equals(java.lang.Object)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testSerialization()","org.jfree.data.statistics.SimpleHistogramDataset.<init>(java.lang.Comparable)"
"org.jfree.chart.labels.StandardXYToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardXYToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.block.BorderArrangementTest.testSerialization()","org.jfree.chart.block.BorderArrangement.equals(java.lang.Object)"
"org.jfree.data.gantt.TaskTest.testSerialization()","org.jfree.data.gantt.Task.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYPolygonAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYPolygonAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYPolygonAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYPolygonAnnotation.<init>(double[], java.awt.Stroke, java.awt.Paint, java.awt.Paint)"
"org.jfree.data.statistics.BoxAndWhiskerItemTest.testSerialization()","org.jfree.data.statistics.BoxAndWhiskerItem.equals(java.lang.Object)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testSerialization()","org.jfree.chart.annotations.CategoryLineAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testSerialization()","org.jfree.chart.annotations.CategoryLineAnnotation.<init>(java.lang.Comparable, double, java.lang.Comparable, double, java.awt.Paint, java.awt.Stroke)"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.data.xy.XIntervalSeriesTest.testSerialization()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.XIntervalSeriesTest.testSerialization()","org.jfree.data.xy.XIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.XIntervalSeriesTest.testSerialization()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomPieURLGenerator.addURLs(java.util.Map)"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomPieURLGenerator.equals(java.lang.Object)"
"org.jfree.data.DefaultKeyedValueTest.testSerialization()","org.jfree.data.DefaultKeyedValue.equals(java.lang.Object)"
"org.jfree.data.time.YearTest.testSerialization()","org.jfree.data.time.Year.equals(java.lang.Object)"
"org.jfree.chart.renderer.AreaRendererEndTypeTest.testSerialization()","org.jfree.chart.renderer.AreaRendererEndType.<init>(java.lang.String)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testSerialization()","org.jfree.data.xy.DefaultIntervalXYDataset.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testSerialization()","org.jfree.chart.plot.dial.DialValueIndicator.<init>(int)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testSerialization()","org.jfree.chart.plot.dial.DialValueIndicator.equals(java.lang.Object)"
"org.jfree.data.RangeTypeTest.testSerialization()","org.jfree.data.RangeType.<init>(java.lang.String)"
"org.jfree.chart.PaintMapTest.testSerialization1()","org.jfree.chart.PaintMap.equals(java.lang.Object)"
"org.jfree.chart.PaintMapTest.testSerialization2()","org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.entity.TickLabelEntityTest.testSerialization()","org.jfree.chart.entity.TickLabelEntity.<init>(java.awt.Shape, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.TickLabelEntityTest.testSerialization()","org.jfree.chart.entity.ChartEntity.equals(java.lang.Object)"
"org.jfree.chart.ChartRenderingInfoTest.testSerialization2()","org.jfree.chart.ChartRenderingInfo.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialFrame.<init>()"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testSerialization()","org.jfree.chart.plot.dial.StandardDialFrame.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StandardXYBarPainterTest.testSerialization()","org.jfree.chart.renderer.xy.StandardXYBarPainter.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StandardXYBarPainterTest.testSerialization()","org.jfree.chart.renderer.xy.StandardXYBarPainter.<init>()"
"org.jfree.chart.axis.CategoryTickTest.testSerialization()","org.jfree.chart.axis.CategoryTick.equals(java.lang.Object)"
"org.jfree.chart.axis.QuarterDateFormatTest.testSerialization()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[])"
"org.jfree.chart.axis.QuarterDateFormatTest.testSerialization()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[], boolean)"
"org.jfree.chart.axis.QuarterDateFormatTest.testSerialization()","org.jfree.chart.axis.QuarterDateFormat.equals(java.lang.Object)"
"org.jfree.data.xy.XYIntervalSeriesCollectionTest.testSerialization()","org.jfree.data.xy.XYIntervalSeriesCollection.equals(java.lang.Object)"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardCategoryToolTipGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.addSeriesLabel(int, java.lang.String)"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.<init>()"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.<init>(java.lang.String)"
"org.jfree.data.xy.XYDataItemTest.testSerialization()","org.jfree.data.xy.XYDataItem.<init>(double, double)"
"org.jfree.chart.block.ColumnArrangementTest.testSerialization()","org.jfree.chart.block.FlowArrangement.equals(java.lang.Object)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testSerialization()","org.jfree.data.statistics.SimpleHistogramBin.equals(java.lang.Object)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testSerialization()","org.jfree.data.statistics.SimpleHistogramBin.setItemCount(int)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testSerialization()","org.jfree.chart.plot.dial.ArcDialFrame.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testSerialization()","org.jfree.chart.plot.dial.ArcDialFrame.<init>()"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testSerialization()","org.jfree.chart.plot.dial.ArcDialFrame.<init>(double, double)"
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.<init>()"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testSerialization()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.YIntervalSeriesTest.testSerialization()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testSerialization()","org.jfree.data.xy.YIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.YIntervalSeriesTest.testSerialization()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.chart.entity.XYItemEntityTest.testSerialization()","org.jfree.chart.entity.XYItemEntity.<init>(java.awt.Shape, org.jfree.data.xy.XYDataset, int, int, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.XYItemEntityTest.testSerialization()","org.jfree.chart.entity.XYItemEntity.equals(java.lang.Object)"
"org.jfree.chart.entity.XYItemEntityTest.testSerialization()","org.jfree.data.time.TimeSeriesCollection.<init>()"
"org.jfree.chart.block.FlowArrangementTest.testSerialization()","org.jfree.chart.block.FlowArrangement.equals(java.lang.Object)"
"org.jfree.chart.entity.PieSectionEntityTest.testSerialization()","org.jfree.chart.entity.PieSectionEntity.<init>(java.awt.Shape, org.jfree.data.general.PieDataset, int, int, java.lang.Comparable, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.PieSectionEntityTest.testSerialization()","org.jfree.chart.entity.PieSectionEntity.equals(java.lang.Object)"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.HighLowItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>()"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>(java.text.DateFormat, java.text.NumberFormat)"
"org.jfree.data.xy.XYCoordinateTest.testSerialization()","org.jfree.data.xy.XYCoordinate.equals(java.lang.Object)"
"org.jfree.data.xy.XYCoordinateTest.testSerialization()","org.jfree.data.xy.XYCoordinate.<init>(double, double)"
"org.jfree.chart.block.LineBorderTest.testSerialization()","org.jfree.chart.block.LineBorder.equals(java.lang.Object)"
"org.jfree.chart.axis.AxisLocationTest.testSerialization()","org.jfree.chart.axis.AxisLocation.<init>(java.lang.String)"
"org.jfree.chart.axis.AxisLocationTest.testSerialization()","org.jfree.chart.axis.AxisLocation.equals(java.lang.Object)"
"org.jfree.data.time.FixedMillisecondTest.testSerialization()","org.jfree.data.time.FixedMillisecond.<init>()"
"org.jfree.data.time.FixedMillisecondTest.testSerialization()","org.jfree.data.time.FixedMillisecond.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultXYDatasetTest.testSerialization()","org.jfree.data.xy.DefaultXYDataset.equals(java.lang.Object)"
"org.jfree.data.statistics.MeanAndStandardDeviationTest.testSerialization()","org.jfree.data.statistics.MeanAndStandardDeviation.<init>(double, double)"
"org.jfree.data.statistics.MeanAndStandardDeviationTest.testSerialization()","org.jfree.data.statistics.MeanAndStandardDeviation.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardPieSectionLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardPieSectionLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYLineAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYLineAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYLineAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYLineAnnotation.<init>(double, double, double, double, java.awt.Stroke, java.awt.Paint)"
"org.jfree.chart.entity.CategoryLabelEntityTest.testSerialization()","org.jfree.chart.entity.CategoryLabelEntity.equals(java.lang.Object)"
"org.jfree.data.xy.XYIntervalDataItemTest.testSerialization()","org.jfree.data.xy.XYIntervalDataItem.<init>(double, double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalDataItemTest.testSerialization()","org.jfree.data.xy.XYInterval.<init>(double, double, double, double, double)"
"org.jfree.chart.plot.PieLabelRecordTest.testSerialization()","org.jfree.chart.plot.PieLabelRecord.equals(java.lang.Object)"
"org.jfree.chart.plot.PieLabelRecordTest.testSerialization()","org.jfree.text.TextBox.<init>(java.lang.String)"
"org.jfree.chart.axis.CategoryAnchorTest.testSerialization()","org.jfree.chart.axis.CategoryAnchor.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryAnchorTest.testSerialization()","org.jfree.chart.axis.CategoryAnchor.<init>(java.lang.String)"
"org.jfree.data.statistics.HistogramBinTest.testSerialization()","org.jfree.data.statistics.HistogramBin.equals(java.lang.Object)"
"org.jfree.data.time.ohlc.OHLCItemTest.testSerialization()","org.jfree.data.time.ohlc.OHLCItem.<init>(org.jfree.data.time.RegularTimePeriod, double, double, double, double)"
"org.jfree.data.time.ohlc.OHLCItemTest.testSerialization()","org.jfree.data.time.ohlc.OHLC.<init>(double, double, double, double)"
"org.jfree.chart.StrokeMapTest.testSerialization1()","org.jfree.chart.StrokeMap.equals(java.lang.Object)"
"org.jfree.data.KeyedObjectsTest.testSerialization()","org.jfree.data.KeyedObjects.equals(java.lang.Object)"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testSerialization()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String, java.util.Locale)"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYDrawableAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYDrawableAnnotation.<init>(double, double, double, double, double, org.jfree.ui.Drawable)"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testSerialization()","org.jfree.chart.annotations.XYDrawableAnnotation.<init>(double, double, double, double, org.jfree.ui.Drawable)"
"org.jfree.chart.axis.StandardTickUnitSourceTest.testSerialization()","org.jfree.chart.axis.StandardTickUnitSource.<init>()"
"org.jfree.chart.axis.StandardTickUnitSourceTest.testSerialization()","org.jfree.chart.axis.StandardTickUnitSource.equals(java.lang.Object)"
"org.jfree.data.xy.OHLCDataItemTest.testSerialization()","org.jfree.data.xy.OHLCDataItem.equals(java.lang.Object)"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testSerialization()","org.jfree.data.xy.XIntervalSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testSerialization()","org.jfree.data.xy.XIntervalSeriesCollection.<init>()"
"org.jfree.chart.entity.StandardEntityCollectionTest.testSerialization()","org.jfree.chart.entity.PieSectionEntity.<init>(java.awt.Shape, org.jfree.data.general.PieDataset, int, int, java.lang.Comparable, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.StandardEntityCollectionTest.testSerialization()","org.jfree.chart.entity.StandardEntityCollection.equals(java.lang.Object)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomXYURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomXYURLGenerator.addURLSeries(java.util.List)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testSerialization()","org.jfree.chart.urls.CustomXYURLGenerator.<init>()"
"org.jfree.chart.labels.StandardXYSeriesLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.equals(java.lang.Object)"
"org.jfree.data.function.PolynomialFunction2DTest.testSerialization()","org.jfree.data.function.PolynomialFunction2D.equals(java.lang.Object)"
"org.jfree.data.ComparableObjectSeriesTest.testSerialization()","org.jfree.data.ComparableObjectSeries.<init>(java.lang.Comparable)"
"org.jfree.chart.plot.ValueMarkerTest.testSerialization()","org.jfree.ui.LengthAdjustmentType.<init>(java.lang.String)"
"org.jfree.data.xy.YIntervalTest.testSerialization()","org.jfree.data.xy.YInterval.equals(java.lang.Object)"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testSerialization()","org.jfree.chart.axis.PeriodAxisLabelInfo.equals(java.lang.Object)"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testSerialization()","org.jfree.chart.axis.PeriodAxisLabelInfo.<init>(java.lang.Class, java.text.DateFormat)"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testSerialization()","org.jfree.chart.axis.PeriodAxisLabelInfo.<init>(java.lang.Class, java.text.DateFormat, org.jfree.ui.RectangleInsets, java.awt.Font, java.awt.Paint, boolean, java.awt.Stroke, java.awt.Paint)"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.testSerialization()","org.jfree.data.xy.YIntervalSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.DefaultKeyedValues2DTest.testSerialization()","org.jfree.data.DefaultKeyedValues2D.equals(java.lang.Object)"
"org.jfree.chart.axis.MarkerAxisBandTest.testSerialization()","org.jfree.chart.axis.MarkerAxisBand.<init>(org.jfree.chart.axis.NumberAxis, double, double, double, double, java.awt.Font)"
"org.jfree.chart.axis.MarkerAxisBandTest.testSerialization()","org.jfree.chart.axis.MarkerAxisBand.equals(java.lang.Object)"
"org.jfree.data.ComparableObjectItemTest.testSerialization()","org.jfree.data.ComparableObjectItem.equals(java.lang.Object)"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testSerialization()","org.jfree.data.xy.MatrixSeriesCollection.addSeries(org.jfree.data.xy.MatrixSeries)"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testSerialization()","org.jfree.data.xy.MatrixSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testSerialization()","org.jfree.data.xy.MatrixSeriesCollection.<init>()"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testSerialization()","org.jfree.data.xy.MatrixSeriesCollection.<init>(org.jfree.data.xy.MatrixSeries)"
"org.jfree.chart.axis.TickUnitsTest.testSerialization()","org.jfree.chart.axis.TickUnits.equals(java.lang.Object)"
"org.jfree.chart.urls.StandardXYURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardXYURLGenerator.<init>(java.lang.String)"
"org.jfree.chart.urls.StandardXYURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardXYURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.StandardXYURLGeneratorTest.testSerialization()","org.jfree.chart.urls.StandardXYURLGenerator.<init>(java.lang.String, java.lang.String, java.lang.String)"
"org.jfree.data.function.NormalDistributionFunction2DTest.testSerialization()","org.jfree.data.function.NormalDistributionFunction2D.equals(java.lang.Object)"
"org.jfree.data.function.NormalDistributionFunction2DTest.testSerialization()","org.jfree.data.function.NormalDistributionFunction2D.<init>(double, double)"
"org.jfree.data.time.SimpleTimePeriodTest.testSerialization()","org.jfree.data.time.SimpleTimePeriod.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardContourToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardContourToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardContourToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardContourToolTipGenerator.<init>()"
"org.jfree.chart.ChartRenderingInfoTest.testSerialization()","org.jfree.chart.ChartRenderingInfo.equals(java.lang.Object)"
"org.jfree.chart.plot.PlotOrientationTest.testSerialization()","org.jfree.chart.plot.PlotOrientation.equals(java.lang.Object)"
"org.jfree.chart.plot.PlotOrientationTest.testSerialization()","org.jfree.chart.plot.PlotOrientation.<init>(java.lang.String)"
"org.jfree.chart.urls.TimeSeriesURLGeneratorTest.testSerialization()","org.jfree.chart.urls.TimeSeriesURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.TimeSeriesURLGeneratorTest.testSerialization()","org.jfree.chart.urls.TimeSeriesURLGenerator.<init>()"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.<init>()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testSerialization()","org.jfree.data.general.DefaultHeatMapDataset.equals(java.lang.Object)"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testSerialization()","org.jfree.data.general.DefaultHeatMapDataset.<init>(int, int, double, double, double, double)"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testSerialization()","org.jfree.data.general.DefaultHeatMapDataset.setZValue(int, int, double)"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.IntervalCategoryItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.labels.IntervalCategoryItemLabelGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.axis.MonthDateFormatTest.testSerialization()","org.jfree.chart.axis.MonthDateFormat.<init>()"
"org.jfree.chart.axis.MonthDateFormatTest.testSerialization()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone)"
"org.jfree.chart.axis.MonthDateFormatTest.testSerialization()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean, boolean)"
"org.jfree.chart.axis.MonthDateFormatTest.testSerialization()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean[], java.text.DateFormat)"
"org.jfree.chart.axis.MonthDateFormatTest.testSerialization()","org.jfree.chart.axis.MonthDateFormat.equals(java.lang.Object)"
"org.jfree.data.gantt.TaskSeriesTest.testSerialization()","org.jfree.data.gantt.TaskSeries.equals(java.lang.Object)"
"org.jfree.data.xy.YWithXIntervalTest.testSerialization()","org.jfree.data.xy.YWithXInterval.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.StandardCategoryToolTipGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testSerialization()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.StrokeMapTest.testSerialization2()","org.jfree.chart.StrokeMap.put(java.lang.Comparable, java.awt.Stroke)"
"org.jfree.data.KeyedObjectTest.testSerialization()","org.jfree.data.KeyedObject.equals(java.lang.Object)"
"org.jfree.data.xy.MatrixSeriesTest.testSerialization()","org.jfree.data.xy.MatrixSeries.equals(java.lang.Object)"
"org.jfree.data.xy.MatrixSeriesTest.testSerialization()","org.jfree.data.xy.MatrixSeries.update(int, int, double)"
"org.jfree.data.xy.MatrixSeriesTest.testSerialization()","org.jfree.data.xy.MatrixSeries.<init>(java.lang.String, int, int)"
"org.jfree.data.xy.MatrixSeriesTest.testSerialization()","org.jfree.data.xy.MatrixSeries.zeroAll()"
"org.jfree.chart.entity.LegendItemEntityTest.testSerialization()","org.jfree.chart.entity.LegendItemEntity.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultXYZDatasetTest.testSerialization()","org.jfree.data.xy.DefaultXYZDataset.equals(java.lang.Object)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testCloning()","org.jfree.data.statistics.SimpleHistogramBin.clone()"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testRemoveAllBins()","org.jfree.data.statistics.SimpleHistogramDataset.removeAllBins()"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testRemoveAllBins()","org.jfree.data.statistics.SimpleHistogramDataset.getItemCount(int)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testEquals()","org.jfree.data.statistics.SimpleHistogramBin.equals(java.lang.Object)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testEquals()","org.jfree.data.statistics.SimpleHistogramBin.setItemCount(int)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testEquals()","org.jfree.data.statistics.SimpleHistogramBin.<init>(double, double)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testClearObservations()","org.jfree.data.statistics.SimpleHistogramDataset.clearObservations()"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testClearObservations()","org.jfree.data.statistics.SimpleHistogramDataset.getYValue(int, int)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testClearObservations()","org.jfree.data.statistics.SimpleHistogramDataset.getItemCount(int)"
"org.jfree.data.xy.XIntervalSeriesTest.testGetXHighValue()","org.jfree.data.xy.XIntervalSeries.getXHighValue(int)"
"org.jfree.data.xy.XIntervalSeriesTest.testClear()","org.jfree.data.ComparableObjectSeries.clear()"
"org.jfree.data.xy.XIntervalSeriesTest.testClear()","org.jfree.data.general.Series.isEmpty()"
"org.jfree.data.xy.XIntervalSeriesTest.testAdditionOfDuplicateXValues()","org.jfree.data.xy.XIntervalSeries.getYValue(int)"
"org.jfree.data.xy.YWithXIntervalTest.testCloning()","org.jfree.data.xy.YWithXInterval.<init>(double, double, double)"
"org.jfree.data.xy.XIntervalSeriesTest.testEquals()","org.jfree.data.ComparableObjectSeries.remove(java.lang.Comparable)"
"org.jfree.data.xy.XIntervalSeriesTest.testEquals()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.XIntervalSeriesTest.testEquals()","org.jfree.data.xy.XIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.XIntervalSeriesTest.testEquals()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.XIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.XIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.XIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.XIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.XIntervalSeriesTest.testIndexOf()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.XIntervalSeriesTest.testAdd()","org.jfree.data.xy.XIntervalSeries.getYValue(int)"
"org.jfree.data.xy.XIntervalSeriesTest.testCloning()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.XIntervalSeriesTest.testCloning()","org.jfree.data.xy.XIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.XIntervalSeriesTest.testCloning()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.XIntervalDataItemTest.testCloning()","org.jfree.data.ComparableObjectItem.clone()"
"org.jfree.data.xy.XIntervalSeriesTest.testIndexOf2()","org.jfree.data.xy.XIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.XIntervalSeriesTest.testIndexOf2()","org.jfree.data.xy.XIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.XIntervalSeriesTest.testIndexOf2()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.XIntervalDataItemTest.testEquals()","org.jfree.data.xy.XIntervalDataItem.<init>(double, double, double, double)"
"org.jfree.data.xy.XIntervalDataItemTest.testEquals()","org.jfree.data.xy.YWithXInterval.<init>(double, double, double)"
"org.jfree.data.xy.YWithXIntervalTest.testEquals()","org.jfree.data.xy.YWithXInterval.equals(java.lang.Object)"
"org.jfree.chart.entity.PieSectionEntityTest.testEquals()","org.jfree.chart.entity.PieSectionEntity.setDataset(org.jfree.data.general.PieDataset)"
"org.jfree.chart.entity.PieSectionEntityTest.testEquals()","org.jfree.chart.entity.PieSectionEntity.setPieIndex(int)"
"org.jfree.chart.entity.PieSectionEntityTest.testEquals()","org.jfree.chart.entity.PieSectionEntity.setSectionIndex(int)"
"org.jfree.chart.entity.PieSectionEntityTest.testEquals()","org.jfree.chart.entity.PieSectionEntity.setSectionKey(java.lang.Comparable)"
"org.jfree.data.KeyedObjectTest.testCloning2()","org.jfree.data.KeyedObject.equals(java.lang.Object)"
"org.jfree.chart.entity.PieSectionEntityTest.testCloning()","org.jfree.chart.entity.PieSectionEntity.<init>(java.awt.Shape, org.jfree.data.general.PieDataset, int, int, java.lang.Comparable, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.PieSectionEntityTest.testCloning()","org.jfree.chart.entity.PieSectionEntity.equals(java.lang.Object)"
"org.jfree.chart.entity.PieSectionEntityTest.testCloning()","org.jfree.chart.entity.ChartEntity.clone()"
"org.jfree.data.general.DefaultKeyedValuesDatasetTest.testCloning()","org.jfree.data.general.DefaultKeyedValuesDataset.<init>()"
"org.jfree.data.general.DefaultPieDatasetTest.testClear()","org.jfree.data.general.DefaultPieDataset.clear()"
"org.jfree.chart.entity.StandardEntityCollectionTest.testEquals()","org.jfree.chart.entity.PieSectionEntity.<init>(java.awt.Shape, org.jfree.data.general.PieDataset, int, int, java.lang.Comparable, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.StandardEntityCollectionTest.testEquals()","org.jfree.chart.entity.StandardEntityCollection.equals(java.lang.Object)"
"org.jfree.chart.entity.StandardEntityCollectionTest.testCloning()","org.jfree.chart.entity.StandardEntityCollection.clone()"
"org.jfree.data.KeyedObjectsTest.testCloning2()","org.jfree.data.KeyedObjects.equals(java.lang.Object)"
"org.jfree.chart.ChartPanelTest.testGetListeners()","org.jfree.chart.ChartPanel.addChartMouseListener(org.jfree.chart.ChartMouseListener)"
"org.jfree.chart.ChartPanelTest.testGetListeners()","org.jfree.chart.ChartPanel.getListeners(java.lang.Class)"
"org.jfree.chart.ChartPanelTest.testGetListeners()","org.jfree.chart.ChartPanel.removeChartMouseListener(org.jfree.chart.ChartMouseListener)"
"org.jfree.chart.ChartPanelTest.testConstructor1()","org.jfree.chart.ChartPanel.getChart()"
"org.jfree.data.gantt.TaskSeriesTest.testEquals()","org.jfree.data.gantt.TaskSeries.equals(java.lang.Object)"
"org.jfree.data.gantt.TaskSeriesCollectionTest.testRemove()","org.jfree.data.gantt.TaskSeriesCollection.remove(int)"
"org.jfree.chart.urls.TimeSeriesURLGeneratorTest.testEquals()","org.jfree.chart.urls.TimeSeriesURLGenerator.<init>(java.text.DateFormat, java.lang.String, java.lang.String, java.lang.String)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomXYURLGenerator.addURLSeries(java.util.List)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomXYURLGenerator.getListCount()"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomXYURLGenerator.getURL(int, int)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomXYURLGenerator.getURLCount(int)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testAddURLSeries()","org.jfree.chart.urls.CustomXYURLGenerator.<init>()"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomXYURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomXYURLGenerator.addURLSeries(java.util.List)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomXYURLGenerator.<init>()"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testCloning()","org.jfree.chart.urls.CustomXYURLGenerator.clone()"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetColumnCount()","org.jfree.data.category.SlidingCategoryDataset.getColumnCount()"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetColumnCount()","org.jfree.data.category.DefaultCategoryDataset.clear()"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetRowCount()","org.jfree.data.category.SlidingCategoryDataset.getRowCount()"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetRowCount()","org.jfree.data.category.DefaultCategoryDataset.clear()"
"org.jfree.data.DefaultKeyedValuesTest.testRemoveValue()","org.jfree.data.DefaultKeyedValues.removeValue(java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValues2DTest.testRemoveColumnByKey()","org.jfree.data.DefaultKeyedValues2D.removeColumn(java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValuesTest.testGetIndex2()","org.jfree.data.DefaultKeyedValues.removeValue(java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValuesTest.testGetIndex2()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, double)"
"org.jfree.data.time.TimePeriodAnchorTest.testEquals()","org.jfree.data.time.TimePeriodAnchor.equals(java.lang.Object)"
"org.jfree.chart.entity.XYItemEntityTest.testEquals()","org.jfree.chart.entity.XYItemEntity.setItem(int)"
"org.jfree.chart.entity.XYItemEntityTest.testEquals()","org.jfree.chart.entity.XYItemEntity.setSeriesIndex(int)"
"org.jfree.chart.entity.XYItemEntityTest.testCloning()","org.jfree.chart.entity.XYItemEntity.<init>(java.awt.Shape, org.jfree.data.xy.XYDataset, int, int, java.lang.String, java.lang.String)"
"org.jfree.chart.entity.XYItemEntityTest.testCloning()","org.jfree.chart.entity.XYItemEntity.equals(java.lang.Object)"
"org.jfree.chart.entity.XYItemEntityTest.testCloning()","org.jfree.data.time.TimeSeriesCollection.<init>()"
"org.jfree.data.time.TimeSeriesTest.testSetKey()","org.jfree.data.time.TimeSeriesCollection.removeSeries(int)"
"org.jfree.data.time.TimeSeriesTest.testSetKey()","org.jfree.data.time.TimeSeriesCollection.removeSeries(org.jfree.data.time.TimeSeries)"
"org.jfree.data.time.TimeSeriesTest.testSetKey()","org.jfree.data.time.TimeSeriesCollection.addSeries(org.jfree.data.time.TimeSeries)"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testHashCode()","org.jfree.chart.plot.dial.ArcDialFrame.hashCode()"
"org.jfree.chart.plot.dial.ArcDialFrameTest.testCloning()","org.jfree.chart.plot.dial.ArcDialFrame.clone()"
"org.jfree.chart.renderer.xy.GradientXYBarPainterTest.testHashcode()","org.jfree.chart.renderer.xy.GradientXYBarPainter.hashCode()"
"org.jfree.chart.renderer.xy.GradientXYBarPainterTest.testEquals()","org.jfree.chart.renderer.xy.GradientXYBarPainter.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.GradientXYBarPainterTest.testEquals()","org.jfree.chart.renderer.xy.GradientXYBarPainter.<init>(double, double, double)"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testDataRange()","org.jfree.data.xy.DefaultOHLCDataset.<init>(java.lang.Comparable, org.jfree.data.xy.OHLCDataItem[])"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testDataRange()","org.jfree.data.xy.OHLCDataItem.<init>(java.util.Date, double, double, double, double, double)"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testDataRange()","org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.xy.XYDataset, boolean)"
"org.jfree.chart.axis.TickUnitsTest.testEquals()","org.jfree.chart.axis.TickUnits.equals(java.lang.Object)"
"org.jfree.chart.axis.TickUnitsTest.testCloning()","org.jfree.chart.axis.TickUnits.clone()"
"org.jfree.chart.axis.NumberTickUnitTest.testCloning()","org.jfree.chart.axis.NumberTickUnit.<init>(double, java.text.NumberFormat)"
"org.jfree.chart.axis.NumberTickUnitTest.testCloning()","org.jfree.chart.axis.TickUnit.<init>(double)"
"org.jfree.chart.axis.NumberTickUnitTest.testEquals()","org.jfree.chart.axis.NumberTickUnit.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSetStartValue()","org.jfree.data.category.DefaultIntervalCategoryDataset.getStartValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSetStartValue()","org.jfree.data.category.DefaultIntervalCategoryDataset.setStartValue(int, java.lang.Comparable, java.lang.Number)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetColumnIndex()","org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex(java.lang.Comparable)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetValue()","org.jfree.data.category.DefaultIntervalCategoryDataset.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetValue()","org.jfree.data.category.DefaultIntervalCategoryDataset.getEndValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetValue()","org.jfree.data.category.DefaultIntervalCategoryDataset.getStartValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSetEndValue()","org.jfree.data.category.DefaultIntervalCategoryDataset.setEndValue(int, java.lang.Comparable, java.lang.Number)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSetEndValue()","org.jfree.data.category.DefaultIntervalCategoryDataset.getEndValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.time.TimeSeriesTest.testEquals2()","org.jfree.data.time.TimeSeries.equals(java.lang.Object)"
"org.jfree.data.time.TimeSeriesTest.testEquals3()","org.jfree.data.time.TimeSeries.equals(java.lang.Object)"
"org.jfree.chart.axis.NumberAxisTest.testHashCode()","org.jfree.chart.axis.NumberAxis.hashCode()"
"org.jfree.chart.axis.ValueAxisTest.testCloning()","org.jfree.chart.axis.NumberAxis.clone()"
"org.jfree.chart.axis.NumberAxisTest.testCloning()","org.jfree.chart.axis.NumberAxis.clone()"
"org.jfree.chart.axis.ModuloAxisTest.testCloning()","org.jfree.chart.axis.ModuloAxis.<init>(java.lang.String, org.jfree.data.Range)"
"org.jfree.chart.axis.ModuloAxisTest.testCloning()","org.jfree.chart.axis.ModuloAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.ModuloAxisTest.testHashCode()","org.jfree.chart.axis.ModuloAxis.<init>(java.lang.String, org.jfree.data.Range)"
"org.jfree.chart.axis.ModuloAxisTest.testHashCode()","org.jfree.chart.axis.ModuloAxis.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYSeriesLabelGeneratorTest.testGenerateLabel()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.generateLabel(org.jfree.data.xy.XYDataset, int)"
"org.jfree.data.xy.XYSeriesCollectionTest.test1170825()","org.jfree.data.xy.XYSeriesCollection.addSeries(org.jfree.data.xy.XYSeries)"
"org.jfree.data.xy.XYSeriesCollectionTest.test1170825()","org.jfree.data.xy.XYSeriesCollection.getSeries(int)"
"org.jfree.data.xy.XYSeriesCollectionTest.test1170825()","org.jfree.data.xy.XYSeriesCollection.<init>()"
"org.jfree.data.xy.XYSeriesCollectionTest.testRenameSeries()","org.jfree.data.general.Series.setKey(java.lang.Comparable)"
"org.jfree.data.xy.XYSeriesCollectionTest.testAddSeries()","org.jfree.data.xy.XYSeriesCollection.addSeries(org.jfree.data.xy.XYSeries)"
"org.jfree.data.xy.XYSeriesCollectionTest.testAddSeries()","org.jfree.data.xy.XYSeriesCollection.<init>()"
"org.jfree.data.xy.XYSeriesCollectionTest.testSeriesRename()","org.jfree.data.general.Series.setKey(java.lang.Comparable)"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetSeries()","org.jfree.data.xy.XYSeriesCollection.addSeries(org.jfree.data.xy.XYSeries)"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetSeries()","org.jfree.data.xy.XYSeriesCollection.getSeries(int)"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetSeries()","org.jfree.data.xy.XYSeriesCollection.<init>()"
"org.jfree.data.xy.XYSeriesCollectionTest.testGetSeriesByKey()","org.jfree.data.xy.XYSeriesCollection.getSeries(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalDataItemTest.testEquals()","org.jfree.data.xy.XYIntervalDataItem.<init>(double, double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalDataItemTest.testEquals()","org.jfree.data.xy.XYInterval.<init>(double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalSeriesTest.testSetMaximumItemCount()","org.jfree.data.ComparableObjectSeries.getMaximumItemCount()"
"org.jfree.data.xy.XYIntervalSeriesTest.testSetMaximumItemCount()","org.jfree.data.xy.XYIntervalSeries.getX(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testSetMaximumItemCount()","org.jfree.data.ComparableObjectSeries.setMaximumItemCount(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testIndexOf2()","org.jfree.data.xy.XYIntervalSeries.add(double, double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalSeriesTest.testIndexOf2()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalSeriesTest.testIndexOf2()","org.jfree.data.xy.XYIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.XYIntervalSeriesTest.testSetMaximumItemCount2()","org.jfree.data.xy.XYIntervalSeries.getX(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testSetMaximumItemCount2()","org.jfree.data.ComparableObjectSeries.setMaximumItemCount(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testAdd()","org.jfree.data.xy.XYIntervalSeries.getYValue(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testCloning()","org.jfree.data.xy.XYIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalSeriesTest.testCloning()","org.jfree.data.xy.XYIntervalSeries.add(double, double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalSeriesTest.testCloning()","org.jfree.data.xy.XYIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.XYIntervalSeriesTest.testCloning()","org.jfree.data.general.Series.clone()"
"org.jfree.data.xy.XYIntervalSeriesTest.testValues()","org.jfree.data.xy.XYIntervalSeries.getYHighValue(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testValues()","org.jfree.data.xy.XYIntervalSeries.getYLowValue(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testValues()","org.jfree.data.xy.XYIntervalSeries.getXHighValue(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testValues()","org.jfree.data.xy.XYIntervalSeries.getXLowValue(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.XYIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.XYIntervalSeries.add(double, double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalSeriesTest.testIndexOf()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.XYIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.XYIntervalSeriesCollectionTest.testEquals()","org.jfree.data.xy.XYIntervalSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.XYIntervalSeriesTest.testRemove()","org.jfree.data.xy.XYIntervalSeries.getX(int)"
"org.jfree.data.xy.XYIntervalSeriesTest.testAdditionOfDuplicateXValues()","org.jfree.data.xy.XYIntervalSeries.getYValue(int)"
"org.jfree.data.xy.XYIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XYIntervalDataItem.getYHighValue()"
"org.jfree.data.xy.XYIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XYIntervalDataItem.getYLowValue()"
"org.jfree.data.xy.XYIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XYIntervalDataItem.getXHighValue()"
"org.jfree.data.xy.XYIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.XYIntervalDataItem.getXLowValue()"
"org.jfree.data.xy.XYIntervalDataItemTest.testCloning()","org.jfree.data.ComparableObjectItem.clone()"
"org.jfree.data.xy.XYIntervalSeriesTest.testEquals()","org.jfree.data.ComparableObjectSeries.remove(java.lang.Comparable)"
"org.jfree.data.xy.XYIntervalSeriesTest.testClear()","org.jfree.data.ComparableObjectSeries.clear()"
"org.jfree.data.xy.XYIntervalSeriesTest.testClear()","org.jfree.data.general.Series.isEmpty()"
"org.jfree.chart.util.HMSNumberFormatTest.testGeneral()","org.jfree.chart.util.HMSNumberFormat.<init>()"
"org.jfree.chart.util.HMSNumberFormatTest.testGeneral()","org.jfree.chart.util.HMSNumberFormat.format(long, java.lang.StringBuffer, java.text.FieldPosition)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String, java.util.Locale)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardPieToolTipGenerator.<init>(java.lang.String, java.util.Locale)"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractPieItemLabelGenerator.getPercentFormat()"
"org.jfree.chart.labels.StandardPieToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.StandardPieToolTipGenerator.clone()"
"org.jfree.data.time.TimePeriodValuesTest.getMinEndIndex()","org.jfree.data.time.TimePeriodValues.getMinEndIndex()"
"org.jfree.data.general.DatasetUtilitiesTest.testFindRangeBounds_CategoryDataset()","org.jfree.data.general.DatasetUtilities.findRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.xy.YIntervalSeriesTest.testEquals()","org.jfree.data.ComparableObjectSeries.remove(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testEquals()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testEquals()","org.jfree.data.xy.YIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.YIntervalDataItemTest.testEquals()","org.jfree.data.xy.YIntervalDataItem.<init>(double, double, double, double)"
"org.jfree.data.xy.YIntervalDataItemTest.testEquals()","org.jfree.data.xy.YInterval.<init>(double, double, double)"
"org.jfree.data.xy.YIntervalTest.testEquals()","org.jfree.data.xy.YInterval.equals(java.lang.Object)"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.testEquals()","org.jfree.data.xy.YIntervalSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.testEquals()","org.jfree.data.xy.YIntervalSeriesCollection.addSeries(org.jfree.data.xy.YIntervalSeries)"
"org.jfree.chart.block.BlockBorderTest.testCloning()","org.jfree.chart.block.BlockBorder.<init>()"
"org.jfree.data.xy.XYSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.XYSeriesCollection.<init>()"
"org.jfree.data.xy.XYSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.XYSeriesCollection.<init>(org.jfree.data.xy.XYSeries)"
"org.jfree.data.xy.XYSeriesCollectionTest.testConstructor()","org.jfree.data.xy.XYSeriesCollection.getIntervalPositionFactor()"
"org.jfree.data.xy.XYSeriesCollectionTest.testConstructor()","org.jfree.data.xy.XYSeriesCollection.getIntervalWidth()"
"org.jfree.chart.ChartRenderingInfoTest.testCloning()","org.jfree.chart.ChartRenderingInfo.clone()"
"org.jfree.chart.ChartRenderingInfoTest.testCloning()","org.jfree.chart.ChartRenderingInfo.getChartArea()"
"org.jfree.data.general.DatasetUtilitiesTest.test803660()","org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testMinMaxRange()","org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testMinMaxRange()","org.jfree.data.general.DatasetUtilities.findMaximumRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testCloning()","org.jfree.chart.annotations.CategoryLineAnnotation.clone()"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testHashcode()","org.jfree.chart.annotations.CategoryLineAnnotation.hashCode()"
"org.jfree.data.KeyedObjectsTest.testGetObject()","org.jfree.data.KeyedObjects.addObject(java.lang.Comparable, java.lang.Object)"
"org.jfree.data.KeyedObjectsTest.testGetIndex()","org.jfree.data.KeyedObjects.addObject(java.lang.Comparable, java.lang.Object)"
"org.jfree.data.KeyedObjectsTest.testCloning()","org.jfree.data.KeyedObjects.equals(java.lang.Object)"
"org.jfree.data.KeyedObjectsTest.testSetObject()","org.jfree.data.KeyedObjects.getObject(java.lang.Comparable)"
"org.jfree.data.KeyedObjectsTest.testSetObject()","org.jfree.data.KeyedObjects.<init>()"
"org.jfree.data.KeyedObjectsTest.testSetObject()","org.jfree.data.KeyedObjects.setObject(java.lang.Comparable, java.lang.Object)"
"org.jfree.data.KeyedObjectsTest.testInsertAndRetrieve()","org.jfree.data.KeyedObjects.getKey(int)"
"org.jfree.data.KeyedObjectsTest.testInsertAndRetrieve()","org.jfree.data.KeyedObjects.addObject(java.lang.Comparable, java.lang.Object)"
"org.jfree.data.KeyedObjectsTest.testGetKey()","org.jfree.data.KeyedObjects.getKey(int)"
"org.jfree.data.KeyedObjectsTest.testGetKey()","org.jfree.data.KeyedObjects.addObject(java.lang.Comparable, java.lang.Object)"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries()","org.jfree.data.statistics.HistogramDataset.<init>()"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries()","org.jfree.data.statistics.HistogramDataset.addSeries(java.lang.Comparable, double[], int, double, double)"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries()","org.jfree.data.xy.AbstractIntervalXYDataset.getEndXValue(int, int)"
"org.jfree.data.statistics.HistogramDatasetTest.testAddSeries()","org.jfree.data.xy.AbstractIntervalXYDataset.getStartXValue(int, int)"
"org.jfree.data.statistics.HistogramDatasetTest.testBinBoundaries()","org.jfree.data.statistics.HistogramDataset.<init>()"
"org.jfree.data.statistics.HistogramDatasetTest.testBinBoundaries()","org.jfree.data.statistics.HistogramDataset.addSeries(java.lang.Comparable, double[], int, double, double)"
"org.jfree.data.statistics.HistogramDatasetTest.testBinBoundaries()","org.jfree.data.xy.AbstractIntervalXYDataset.getEndXValue(int, int)"
"org.jfree.data.statistics.HistogramDatasetTest.testBinBoundaries()","org.jfree.data.xy.AbstractIntervalXYDataset.getStartXValue(int, int)"
"org.jfree.data.statistics.HistogramDatasetTest.test1553088()","org.jfree.data.statistics.HistogramDataset.<init>()"
"org.jfree.data.statistics.HistogramDatasetTest.test1553088()","org.jfree.data.statistics.HistogramDataset.addSeries(java.lang.Comparable, double[], int, double, double)"
"org.jfree.data.statistics.HistogramDatasetTest.test1553088()","org.jfree.data.xy.AbstractIntervalXYDataset.getEndXValue(int, int)"
"org.jfree.data.statistics.HistogramDatasetTest.test1553088()","org.jfree.data.xy.AbstractIntervalXYDataset.getStartXValue(int, int)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testOverlapsWidth()","org.jfree.data.statistics.SimpleHistogramBin.overlapsWith(org.jfree.data.statistics.SimpleHistogramBin)"
"org.jfree.data.KeyedObjectTest.testCloning()","org.jfree.data.KeyedObject.equals(java.lang.Object)"
"org.jfree.data.time.YearTest.testParseYear()","org.jfree.data.time.Year.parseYear(java.lang.String)"
"org.jfree.data.time.MonthTest.testParseMonth()","org.jfree.data.time.Month.parseMonth(java.lang.String)"
"org.jfree.data.time.MonthTest.testParseMonth()","org.jfree.data.time.Month.getYear()"
"org.jfree.chart.axis.CategoryLabelPositionTest.testEquals()","org.jfree.chart.axis.CategoryLabelPosition.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryLabelPositionTest.testHashCode()","org.jfree.chart.axis.CategoryLabelPosition.<init>()"
"org.jfree.chart.axis.CategoryLabelPositionTest.testHashCode()","org.jfree.chart.axis.CategoryLabelPosition.hashCode()"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMinimumStackedRangeValue()","org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetColumnKeys()","org.jfree.data.category.SlidingCategoryDataset.getColumnKeys()"
"org.jfree.data.category.DefaultCategoryDatasetTest.testGetValue()","org.jfree.data.category.DefaultCategoryDataset.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds_CategoryDataset()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.category.CategoryDataset, boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testMaximumStackedRangeValue()","org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.category.SlidingCategoryDatasetTest.testGetRowIndex()","org.jfree.data.category.SlidingCategoryDataset.getRowIndex(java.lang.Comparable)"
"org.jfree.data.general.DatasetUtilitiesTest.testCumulativeRange3()","org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testCumulativeRange_NaN()","org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMaximumStackedRangeValue()","org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds2_CategoryDataset()","org.jfree.data.general.DatasetUtilities.iterateRangeBounds(org.jfree.data.category.CategoryDataset, boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindStackedRangeBounds_CategoryDataset2()","org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindStackedRangeBounds_CategoryDataset2()","org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset, double)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindStackedRangeBounds_CategoryDataset1()","org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMaximumStackedRangeValue2()","org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.category.CategoryToPieDatasetTest.testGetKey()","org.jfree.data.category.CategoryToPieDataset.getKey(int)"
"org.jfree.data.category.CategoryToPieDatasetTest.testGetKey()","org.jfree.data.category.CategoryToPieDataset.getItemCount()"
"org.jfree.data.general.DatasetUtilitiesTest.testFindMinimumStackedRangeValue2()","org.jfree.data.general.DatasetUtilities.findMinimumStackedRangeValue(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testCumulativeRange1()","org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.data.general.DatasetUtilitiesTest.testCumulativeRange2()","org.jfree.data.general.DatasetUtilities.findCumulativeRangeBounds(org.jfree.data.category.CategoryDataset)"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.<init>()"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.<init>()"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testEquals2()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.<init>()"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testEquals2()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.<init>()"
"org.jfree.chart.labels.IntervalCategoryToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.IntervalCategoryToolTipGenerator.equals(java.lang.Object)"
"org.jfree.data.time.WeekTest.testBug1498805()","org.jfree.data.time.Week.getYear()"
"org.jfree.data.time.WeekTest.testBug1498805()","org.jfree.data.time.Week.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.data.time.WeekTest.testBug1498805()","org.jfree.data.time.Week.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.WeekTest.testBug1498805()","org.jfree.data.time.Week.getWeek()"
"org.jfree.data.time.WeekTest.testBug1448828()","org.jfree.data.time.Week.getYearValue()"
"org.jfree.data.time.WeekTest.testConstructor()","org.jfree.data.time.Week.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.data.time.WeekTest.testConstructor()","org.jfree.data.time.Week.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.WeekTest.testConstructor()","org.jfree.data.time.Week.getWeek()"
"org.jfree.data.statistics.DefaultMultiValueCategoryDatasetTest.testGetValue2()","org.jfree.data.statistics.DefaultMultiValueCategoryDataset.getValue(int, int)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetRowCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount()"
"org.jfree.data.xy.DefaultXYDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultXYDataset.<init>()"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.test1170825()","org.jfree.data.time.ohlc.OHLCSeriesCollection.getSeries(int)"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testCloning()","org.jfree.data.xy.DefaultOHLCDataset.clone()"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testCloning()","org.jfree.data.xy.DefaultOHLCDataset.equals(java.lang.Object)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindDomainBounds3()","org.jfree.data.general.DatasetUtilities.findDomainBounds(org.jfree.data.xy.XYDataset, boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testFindDomainBounds3()","org.jfree.data.xy.DefaultIntervalXYDataset.addSeries(java.lang.Comparable, double[][])"
"org.jfree.data.general.DatasetUtilitiesTest.testFindDomainBounds3()","org.jfree.data.xy.DefaultIntervalXYDataset.<init>()"
"org.jfree.data.xy.DefaultWindDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultWindDataset.<init>()"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testCloning()","org.jfree.data.general.DefaultHeatMapDataset.clone()"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.YIntervalSeriesCollection.removeSeries(int)"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultHighLowDataset.<init>(java.lang.Comparable, java.util.Date[], double[], double[], double[], double[], double[])"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultHighLowDataset.createNumberArray(double[])"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetStartYValue()","org.jfree.data.xy.DefaultIntervalXYDataset.getStartYValue(int, int)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetSeriesKey()","org.jfree.data.xy.DefaultIntervalXYDataset.getSeriesKey(int)"
"org.jfree.data.xy.XYBarDatasetTest.testPublicCloneable()","org.jfree.data.xy.XYBarDataset.<init>(org.jfree.data.xy.XYDataset, double)"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.MatrixSeriesCollection.<init>()"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.MatrixSeriesCollection.<init>(org.jfree.data.xy.MatrixSeries)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetEndXValue()","org.jfree.data.xy.DefaultIntervalXYDataset.getEndXValue(int, int)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSetSeriesKeys()","org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys(java.lang.Comparable[])"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testRemoveSeries_int()","org.jfree.data.time.ohlc.OHLCSeriesCollection.removeSeries(int)"
"org.jfree.chart.renderer.RendererUtilitiesTest.testFindLiveItemsUpperBound_Unordered()","org.jfree.chart.renderer.RendererUtilities.findLiveItemsUpperBound(org.jfree.data.xy.XYDataset, int, double, double)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetRowIndex()","org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex(java.lang.Comparable)"
"org.jfree.data.xy.DefaultXYZDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultXYZDataset.<init>()"
"org.jfree.data.xy.DefaultXYZDatasetTest.testPublicCloneable()","org.jfree.data.xy.AbstractXYZDataset.<init>()"
"org.jfree.data.statistics.DefaultStatisticalCategoryDatasetTest.testEquals()","org.jfree.data.statistics.DefaultStatisticalCategoryDataset.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetColumnKeys()","org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnKeys()"
"org.jfree.data.xy.DefaultXYDatasetTest.testGetSeriesKey()","org.jfree.data.xy.DefaultXYDataset.getSeriesKey(int)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetSeriesCount()","org.jfree.data.xy.DefaultIntervalXYDataset.getSeriesCount()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetSeriesCount()","org.jfree.data.xy.DefaultIntervalXYDataset.<init>()"
"org.jfree.data.xy.CategoryTableXYDatasetTest.testPublicCloneable()","org.jfree.data.xy.CategoryTableXYDataset.<init>()"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetSeriesCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount()"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetSeriesCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.<init>(double[][], double[][])"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testCloning()","org.jfree.data.xy.DefaultHighLowDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testCloning()","org.jfree.data.xy.DefaultHighLowDataset.<init>(java.lang.Comparable, java.util.Date[], double[], double[], double[], double[], double[])"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testCloning()","org.jfree.data.xy.DefaultHighLowDataset.createNumberArray(double[])"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testEquals()","org.jfree.data.xy.MatrixSeriesCollection.addSeries(org.jfree.data.xy.MatrixSeries)"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testEquals()","org.jfree.data.xy.MatrixSeriesCollection.equals(java.lang.Object)"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testEquals()","org.jfree.data.xy.MatrixSeriesCollection.<init>()"
"org.jfree.data.xy.MatrixSeriesCollectionTest.testEquals()","org.jfree.data.xy.MatrixSeriesCollection.<init>(org.jfree.data.xy.MatrixSeries)"
"org.jfree.data.xy.DefaultXYZDatasetTest.testCloning()","org.jfree.data.xy.DefaultXYZDataset.clone()"
"org.jfree.data.xy.XYBarDatasetTest.testCloning()","org.jfree.data.xy.XYBarDataset.clone()"
"org.jfree.data.xy.XYBarDatasetTest.testCloning()","org.jfree.data.xy.XYBarDataset.getUnderlyingDataset()"
"org.jfree.data.xy.XYIntervalSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.XYIntervalSeriesCollection.<init>()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testCloning2()","org.jfree.data.xy.DefaultIntervalXYDataset.clone()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testCloning2()","org.jfree.data.xy.DefaultIntervalXYDataset.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetCategoryIndex()","org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex(java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testCloning()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.clone()"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateDomainBounds_NaN()","org.jfree.data.general.DatasetUtilities.iterateDomainBounds(org.jfree.data.xy.XYDataset)"
"org.jfree.data.xy.YIntervalSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.YIntervalSeriesCollection.<init>()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetXValue()","org.jfree.data.xy.DefaultIntervalXYDataset.getXValue(int, int)"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testEquals()","org.jfree.data.xy.DefaultOHLCDataset.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetSeriesIndex()","org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex(java.lang.Comparable)"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultOHLCDataset.<init>(java.lang.Comparable, org.jfree.data.xy.OHLCDataItem[])"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testEquals()","org.jfree.data.general.DefaultHeatMapDataset.equals(java.lang.Object)"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testEquals()","org.jfree.data.general.DefaultHeatMapDataset.<init>(int, int, double, double, double, double)"
"org.jfree.data.general.DefaultHeatMapDatasetTest.testEquals()","org.jfree.data.general.DefaultHeatMapDataset.setZValue(int, int, double)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testEquals()","org.jfree.data.statistics.SimpleHistogramDataset.equals(java.lang.Object)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testEquals()","org.jfree.data.statistics.SimpleHistogramDataset.addBin(org.jfree.data.statistics.SimpleHistogramBin)"
"org.jfree.data.statistics.SimpleHistogramDatasetTest.testEquals()","org.jfree.data.statistics.SimpleHistogramDataset.<init>(java.lang.Comparable)"
"org.jfree.data.xy.DefaultXYDatasetTest.testEquals()","org.jfree.data.xy.DefaultXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.XYIntervalSeriesCollectionTest.testRemoveSeries()","org.jfree.data.xy.XYIntervalSeriesCollection.removeSeries(int)"
"org.jfree.chart.renderer.RendererUtilitiesTest.testFindLiveItemsLowerBound_Ascending()","null.<init>(org.jfree.chart.renderer.RendererUtilitiesTest)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetRowAndColumnCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount()"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetRowAndColumnCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.generateKeys(int, java.lang.String)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetRowAndColumnCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount()"
"org.jfree.data.xy.DefaultXYDatasetTest.testAddSeries()","org.jfree.data.xy.DefaultXYDataset.getYValue(int, int)"
"org.jfree.data.xy.DefaultXYDatasetTest.testAddSeries()","org.jfree.data.xy.DefaultXYDataset.getSeriesKey(int)"
"org.jfree.data.xy.TableXYDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultTableXYDataset.<init>()"
"org.jfree.data.xy.TableXYDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultTableXYDataset.<init>(boolean)"
"org.jfree.data.xy.VectorSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.VectorSeriesCollection.<init>()"
"org.jfree.chart.renderer.RendererUtilitiesTest.testFindLiveItemsLowerBound_Unordered()","org.jfree.chart.renderer.RendererUtilities.findLiveItemsLowerBound(org.jfree.data.xy.XYDataset, int, double, double)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testIndexOf()","org.jfree.data.general.AbstractSeriesDataset.indexOf(java.lang.Comparable)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetColumnCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetItemCount()","org.jfree.data.xy.DefaultIntervalXYDataset.getItemCount(int)"
"org.jfree.data.xy.XIntervalSeriesCollectionTest.testPublicCloneable()","org.jfree.data.xy.XIntervalSeriesCollection.<init>()"
"org.jfree.data.statistics.DefaultBoxAndWhiskerXYDatasetTest.testEquals()","org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultXYDatasetTest.testCloning()","org.jfree.data.xy.DefaultXYDataset.clone()"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testEquals()","org.jfree.data.xy.DefaultHighLowDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testEquals()","org.jfree.data.xy.DefaultHighLowDataset.<init>(java.lang.Comparable, java.util.Date[], double[], double[], double[], double[], double[])"
"org.jfree.data.xy.DefaultHighLowDatasetTest.testEquals()","org.jfree.data.xy.DefaultHighLowDataset.createNumberArray(double[])"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testSetCategoryKeys()","org.jfree.data.category.DefaultIntervalCategoryDataset.setCategoryKeys(java.lang.Comparable[])"
"org.jfree.data.xy.XYBarDatasetTest.testEquals()","org.jfree.data.xy.XYBarDataset.equals(java.lang.Object)"
"org.jfree.data.xy.XYBarDatasetTest.testEquals()","org.jfree.data.xy.XYBarDataset.<init>(org.jfree.data.xy.XYDataset, double)"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testCloning2()","org.jfree.data.xy.DefaultOHLCDataset.sortDataByDate()"
"org.jfree.data.xy.DefaultOHLCDatasetTest.testCloning2()","org.jfree.data.xy.DefaultOHLCDataset.clone()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetEndYValue()","org.jfree.data.xy.DefaultIntervalXYDataset.getEndYValue(int, int)"
"org.jfree.data.xy.DefaultXYZDatasetTest.testEquals()","org.jfree.data.xy.DefaultXYZDataset.equals(java.lang.Object)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testGetYValue()","org.jfree.data.xy.DefaultIntervalXYDataset.getYValue(int, int)"
"org.jfree.data.xy.DefaultXYDatasetTest.testIndexOf()","org.jfree.data.xy.DefaultXYDataset.indexOf(java.lang.Comparable)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testConstructor()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeLowerBound(boolean)"
"org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDatasetTest.testConstructor()","org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset.getRangeUpperBound(boolean)"
"org.jfree.data.general.DatasetUtilitiesTest.testIterateRangeBounds3_CategoryDataset()","org.jfree.data.resources.DataPackageResources.getContents()"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testRemoveAllSeries()","org.jfree.data.time.ohlc.OHLCSeriesCollection.removeAllSeries()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultIntervalXYDataset.<init>()"
"org.jfree.data.general.DatasetUtilitiesTest.testFindStackedRangeBoundsForTableXYDataset2()","org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(org.jfree.data.xy.TableXYDataset)"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testRemoveSeries()","org.jfree.data.time.ohlc.OHLCSeriesCollection.removeSeries(org.jfree.data.time.ohlc.OHLCSeries)"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testRemoveSeries()","org.jfree.data.time.ohlc.OHLCSeriesCollection.getSeries(int)"
"org.jfree.data.time.ohlc.OHLCSeriesCollectionTest.testRemoveSeries()","org.jfree.data.time.ohlc.OHLCSeriesCollection.getSeriesCount()"
"org.jfree.chart.renderer.RendererUtilitiesTest.testFindLiveItemsUpperBound_Ascending()","null.<init>(org.jfree.chart.renderer.RendererUtilitiesTest)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testCloning()","org.jfree.data.xy.DefaultIntervalXYDataset.clone()"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testCloning()","org.jfree.data.xy.DefaultIntervalXYDataset.equals(java.lang.Object)"
"org.jfree.chart.urls.TimeSeriesURLGeneratorTest.testGenerateURL()","org.jfree.chart.urls.TimeSeriesURLGenerator.generateURL(org.jfree.data.xy.XYDataset, int, int)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetCategoryCount()","org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryCount()"
"org.jfree.chart.renderer.RendererUtilitiesTest.testFindLiveItemsLowerBound_Descending()","null.<init>(org.jfree.chart.renderer.RendererUtilitiesTest)"
"org.jfree.data.xy.DefaultTableXYDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultTableXYDataset.<init>()"
"org.jfree.data.xy.DefaultTableXYDatasetTest.testPublicCloneable()","org.jfree.data.xy.DefaultTableXYDataset.<init>(boolean)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testAddSeries()","org.jfree.data.xy.DefaultIntervalXYDataset.getYValue(int, int)"
"org.jfree.data.xy.DefaultXYZDatasetTest.testIndexOf()","org.jfree.data.xy.DefaultXYZDataset.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.DefaultIntervalXYDatasetTest.testEquals()","org.jfree.data.xy.DefaultIntervalXYDataset.equals(java.lang.Object)"
"org.jfree.data.category.DefaultIntervalCategoryDatasetTest.testGetRowKeys()","org.jfree.data.category.DefaultIntervalCategoryDataset.getRowKeys()"
"org.jfree.chart.title.ImageTitleTest.testArrangeNN()","org.jfree.chart.block.AbstractBlock.setMargin(double, double, double, double)"
"org.jfree.chart.title.ImageTitleTest.testArrangeNN()","org.jfree.chart.block.AbstractBlock.arrange(java.awt.Graphics2D)"
"org.jfree.chart.block.BorderArrangementTest.testSizing()","org.jfree.chart.block.AbstractBlock.arrange(java.awt.Graphics2D)"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.hashCode()"
"org.jfree.chart.block.RectangleConstraintTest.testCalculateConstrainedSize()","org.jfree.chart.block.RectangleConstraint.calculateConstrainedSize(org.jfree.ui.Size2D)"
"org.jfree.chart.plot.dial.DialCapTest.testHashCode()","org.jfree.chart.plot.dial.DialCap.hashCode()"
"org.jfree.chart.entity.LegendItemEntityTest.testCloning()","org.jfree.chart.entity.LegendItemEntity.clone()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsSegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsIncluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsSegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getStartTime()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsSegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsExcluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinSegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsIncluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinSegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getStartTime()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinSegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsExcluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridaySegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsIncluded()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridaySegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getStartTime()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridaySegmentedTimeline()","org.jfree.chart.axis.SegmentedTimeline.getSegmentsExcluded()"
"org.jfree.data.xy.MatrixSeriesTest.testGetItemRow()","org.jfree.data.xy.MatrixSeries.getItemRow(int)"
"org.jfree.data.xy.MatrixSeriesTest.testCloning()","org.jfree.data.xy.MatrixSeries.equals(java.lang.Object)"
"org.jfree.data.xy.MatrixSeriesTest.testCloning()","org.jfree.data.xy.MatrixSeries.update(int, int, double)"
"org.jfree.data.xy.MatrixSeriesTest.testCloning()","org.jfree.data.xy.MatrixSeries.<init>(java.lang.String, int, int)"
"org.jfree.data.xy.MatrixSeriesTest.testCloning()","org.jfree.data.xy.MatrixSeries.zeroAll()"
"org.jfree.data.xy.MatrixSeriesTest.testEquals()","org.jfree.data.xy.MatrixSeries.equals(java.lang.Object)"
"org.jfree.data.xy.MatrixSeriesTest.testEquals()","org.jfree.data.xy.MatrixSeries.update(int, int, double)"
"org.jfree.data.xy.MatrixSeriesTest.testEquals()","org.jfree.data.xy.MatrixSeries.<init>(java.lang.String, int, int)"
"org.jfree.data.xy.MatrixSeriesTest.testEquals()","org.jfree.data.xy.MatrixSeries.zeroAll()"
"org.jfree.chart.PaintMapTest.testPut()","org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.PaintMapTest.testPut()","org.jfree.chart.PaintMap.getPaint(java.lang.Comparable)"
"org.jfree.chart.PaintMapTest.testKeysOfDifferentClasses()","org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.PaintMapTest.testKeysOfDifferentClasses()","org.jfree.chart.PaintMap.getPaint(java.lang.Comparable)"
"org.jfree.chart.PaintMapTest.testGetPaint()","org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.PaintMapTest.testGetPaint()","org.jfree.chart.PaintMap.getPaint(java.lang.Comparable)"
"org.jfree.chart.PaintMapTest.testCloning()","org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.PaintMapTest.testCloning()","org.jfree.chart.PaintMap.clone()"
"org.jfree.chart.PaintMapTest.testEquals()","org.jfree.chart.PaintMap.put(java.lang.Comparable, java.awt.Paint)"
"org.jfree.chart.annotations.XYPolygonAnnotationTest.testCloning()","org.jfree.chart.annotations.XYPolygonAnnotation.clone()"
"org.jfree.chart.annotations.XYPolygonAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPolygonAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYPolygonAnnotationTest.testEquals()","org.jfree.chart.annotations.XYPolygonAnnotation.<init>(double[], java.awt.Stroke, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.annotations.XYPolygonAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYPolygonAnnotation.hashCode()"
"org.jfree.data.RangeTest.testIsNaNRange()","org.jfree.data.Range.isNaNRange()"
"org.jfree.data.RangeTest.testCombineIgnoringNaN()","org.jfree.data.Range.combineIgnoringNaN(org.jfree.data.Range, org.jfree.data.Range)"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.getXDateFormat()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.getXFormat()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.getYDateFormat()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.getYFormat()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYItemLabelGenerator.clone()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat, java.text.DateFormat)"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardXYToolTipGenerator.<init>(java.lang.String, java.text.DateFormat, java.text.DateFormat)"
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYToolTipGenerator.clone()"
"org.jfree.chart.labels.StandardXYToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.<init>(java.lang.String, java.text.DateFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardXYToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYToolTipGenerator.clone()"
"org.jfree.chart.labels.StandardPieSectionLabelGeneratorTest.testEquals()","org.jfree.chart.labels.StandardPieSectionLabelGenerator.setAttributedLabel(int, java.text.AttributedString)"
"org.jfree.data.DefaultKeyedValueTest.testConstructor()","org.jfree.data.DefaultKeyedValue.getKey()"
"org.jfree.data.DefaultKeyedValueTest.testConstructor()","org.jfree.data.DefaultKeyedValue.getValue()"
"org.jfree.data.DefaultKeyedValueTest.testConstructor()","org.jfree.data.DefaultKeyedValue.<init>(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.ComparableObjectSeriesTest.testHashCode()","org.jfree.data.ComparableObjectSeries.hashCode()"
"org.jfree.data.ComparableObjectSeriesTest.testHashCode()","org.jfree.data.ComparableObjectSeries.<init>(java.lang.Comparable)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testCloning()","org.jfree.chart.plot.dial.DialValueIndicator.clone()"
"org.jfree.chart.plot.dial.AbstractDialLayerTest.testCloning()","org.jfree.chart.plot.dial.DialCap.clone()"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testCloning()","org.jfree.chart.plot.dial.DialTextAnnotation.clone()"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testCloning()","org.jfree.chart.plot.dial.StandardDialFrame.clone()"
"org.jfree.chart.plot.dial.DialTextAnnotationTest.testHashCode()","org.jfree.chart.plot.dial.DialTextAnnotation.hashCode()"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testCloning()","org.jfree.chart.axis.PeriodAxisLabelInfo.clone()"
"org.jfree.data.function.PowerFunction2DTest.testEquals()","org.jfree.data.function.PowerFunction2D.equals(java.lang.Object)"
"org.jfree.data.function.PowerFunction2DTest.testEquals()","org.jfree.data.function.PowerFunction2D.<init>(double, double)"
"org.jfree.data.time.MonthTest.testNext()","org.jfree.data.time.Month.getYear()"
"org.jfree.data.time.MonthTest.testNext()","org.jfree.data.time.Month.next()"
"org.jfree.chart.plot.CrosshairTest.testPublicCloneable()","org.jfree.chart.plot.Crosshair.<init>(double)"
"org.jfree.chart.plot.CrosshairTest.testPublicCloneable()","org.jfree.chart.labels.StandardCrosshairLabelGenerator.<init>()"
"org.jfree.chart.plot.CrosshairTest.testPublicCloneable()","org.jfree.chart.labels.StandardCrosshairLabelGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.plot.CrosshairTest.testPublicCloneable()","org.jfree.chart.plot.Crosshair.<init>(double, java.awt.Paint, java.awt.Stroke)"
"org.jfree.data.function.PowerFunction2DTest.testConstructor()","org.jfree.data.function.PowerFunction2D.getA()"
"org.jfree.data.function.PowerFunction2DTest.testConstructor()","org.jfree.data.function.PowerFunction2D.getB()"
"org.jfree.chart.annotations.XYImageAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYImageAnnotation.hashCode()"
"org.jfree.data.time.TimePeriodValuesTest.testGetMaxStartIndex()","org.jfree.data.time.TimePeriodValues.getMaxStartIndex()"
"org.jfree.data.time.TimePeriodValuesTest.testGetMinMiddleIndex()","org.jfree.data.time.TimePeriodValues.getMinMiddleIndex()"
"org.jfree.data.time.TimePeriodValuesTest.testAdd()","org.jfree.data.time.TimePeriodValues.getValue(int)"
"org.jfree.data.time.TimePeriodValuesTest.testAdd()","org.jfree.data.time.TimePeriodValues.equals(java.lang.Object)"
"org.jfree.data.time.TimePeriodValuesTest.testGetMaxMiddleIndex()","org.jfree.data.time.TimePeriodValues.getMaxMiddleIndex()"
"org.jfree.data.time.TimePeriodValuesTest.testGetMinStartIndex()","org.jfree.data.time.TimePeriodValues.getMinStartIndex()"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testHashCode()","org.jfree.chart.axis.PeriodAxisLabelInfo.hashCode()"
"org.jfree.data.xy.YIntervalSeriesTest.testCloning()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testCloning()","org.jfree.data.xy.YIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.YIntervalSeriesTest.testCloning()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.YIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.YIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.YIntervalSeriesTest.testIndexOf()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.YIntervalSeriesTest.testIndexOf()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testIndexOf2()","org.jfree.data.xy.YIntervalSeries.add(double, double, double, double)"
"org.jfree.data.xy.YIntervalSeriesTest.testIndexOf2()","org.jfree.data.xy.YIntervalSeries.<init>(java.lang.Comparable, boolean, boolean)"
"org.jfree.data.xy.YIntervalSeriesTest.testIndexOf2()","org.jfree.data.ComparableObjectSeries.indexOf(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testRemove()","org.jfree.data.xy.YIntervalSeries.getX(int)"
"org.jfree.data.xy.VectorSeriesTest.testAdd()","org.jfree.data.xy.VectorSeries.getVectorXValue(int)"
"org.jfree.data.ComparableObjectSeriesTest.testCloning()","org.jfree.data.ComparableObjectSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testClear()","org.jfree.data.ComparableObjectSeries.clear()"
"org.jfree.data.xy.YIntervalSeriesTest.testClear()","org.jfree.data.general.Series.isEmpty()"
"org.jfree.data.xy.YIntervalSeriesTest.testAdditionOfDuplicateXValues()","org.jfree.data.xy.YIntervalSeries.getYValue(int)"
"org.jfree.data.ComparableObjectSeriesTest.testEquals()","org.jfree.data.ComparableObjectSeries.<init>(java.lang.Comparable)"
"org.jfree.data.xy.YIntervalSeriesTest.testSetMaximumItemCount2()","org.jfree.data.xy.YIntervalSeries.getX(int)"
"org.jfree.data.xy.YIntervalSeriesTest.testAdd()","org.jfree.data.xy.YIntervalSeries.getYValue(int)"
"org.jfree.data.xy.YIntervalSeriesTest.testSetMaximumItemCount()","org.jfree.data.xy.YIntervalSeries.getX(int)"
"org.jfree.data.xy.YIntervalSeriesTest.testSetMaximumItemCount()","org.jfree.data.ComparableObjectSeries.getMaximumItemCount()"
"org.jfree.data.xy.VectorDataItemTest.testCloning()","org.jfree.data.ComparableObjectItem.clone()"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYTitleAnnotation.hashCode()"
"org.jfree.data.function.NormalDistributionFunction2DTest.testConstructor()","org.jfree.data.function.NormalDistributionFunction2D.getMean()"
"org.jfree.data.function.NormalDistributionFunction2DTest.testConstructor()","org.jfree.data.function.NormalDistributionFunction2D.getStandardDeviation()"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testCloning()","org.jfree.chart.axis.ExtendedCategoryAxis.addSubLabel(java.lang.Comparable, java.lang.String)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testCloning()","org.jfree.chart.axis.ExtendedCategoryAxis.clone()"
"org.jfree.chart.entity.TickLabelEntityTest.testEquals()","org.jfree.chart.entity.ChartEntity.setArea(java.awt.Shape)"
"org.jfree.chart.entity.CategoryLabelEntityTest.testEquals()","org.jfree.chart.entity.CategoryLabelEntity.equals(java.lang.Object)"
"org.jfree.chart.block.FlowArrangementTest.testEquals()","org.jfree.chart.block.FlowArrangement.equals(java.lang.Object)"
"org.jfree.chart.block.ColumnArrangementTest.testCloning()","org.jfree.chart.block.FlowArrangement.<init>()"
"org.jfree.chart.block.ColumnArrangementTest.testCloning()","org.jfree.chart.block.FlowArrangement.<init>(org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, double, double)"
"org.jfree.chart.block.FlowArrangementTest.testCloning()","org.jfree.chart.block.FlowArrangement.<init>()"
"org.jfree.chart.block.FlowArrangementTest.testCloning()","org.jfree.chart.block.FlowArrangement.<init>(org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, double, double)"
"org.jfree.data.RangeTest.testContains()","org.jfree.data.Range.contains(double)"
"org.jfree.data.RangeTest.testConstrain()","org.jfree.data.Range.constrain(double)"
"org.jfree.data.statistics.MeanAndStandardDeviationTest.testEquals()","org.jfree.data.statistics.MeanAndStandardDeviation.<init>(double, double)"
"org.jfree.data.statistics.MeanAndStandardDeviationTest.testEquals()","org.jfree.data.statistics.MeanAndStandardDeviation.equals(java.lang.Object)"
"org.jfree.data.statistics.MeanAndStandardDeviationTest.testCloning()","org.jfree.data.statistics.MeanAndStandardDeviation.<init>(double, double)"
"org.jfree.chart.renderer.GrayPaintScaleTest.testGetPaint()","org.jfree.chart.renderer.GrayPaintScale.getPaint(double)"
"org.jfree.data.ComparableObjectItemTest.testCompareTo()","org.jfree.data.ComparableObjectItem.compareTo(java.lang.Object)"
"org.jfree.chart.annotations.XYPolygonAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYPolygonAnnotation.<init>(double[], java.awt.Stroke, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.annotations.CategoryPointerAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.CategoryPointerAnnotation.<init>(java.lang.String, java.lang.Comparable, double, double)"
"org.jfree.chart.annotations.TextAnnotationTest.testSetRotationAnchor()","org.jfree.chart.annotations.TextAnnotation.setRotationAnchor(org.jfree.ui.TextAnchor)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.CategoryTextAnnotation.<init>(java.lang.String, java.lang.Comparable, double)"
"org.jfree.chart.annotations.CategoryTextAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.TextAnnotation.<init>(java.lang.String)"
"org.jfree.data.RangeTest.testIntersects()","org.jfree.data.Range.intersects(double, double)"
"org.jfree.data.RangeTest.testShift()","org.jfree.data.Range.shift(org.jfree.data.Range, double)"
"org.jfree.data.RangeTest.testShift()","org.jfree.data.Range.shift(org.jfree.data.Range, double, boolean)"
"org.jfree.chart.plot.MeterIntervalTest.testCloning()","org.jfree.chart.plot.MeterInterval.<init>(java.lang.String, org.jfree.data.Range)"
"org.jfree.chart.plot.MeterIntervalTest.testCloning()","org.jfree.chart.plot.MeterInterval.<init>(java.lang.String, org.jfree.data.Range, java.awt.Paint, java.awt.Stroke, java.awt.Paint)"
"org.jfree.chart.plot.MeterIntervalTest.testEquals()","org.jfree.chart.plot.MeterInterval.equals(java.lang.Object)"
"org.jfree.chart.plot.MeterIntervalTest.testEquals()","org.jfree.chart.plot.MeterInterval.<init>(java.lang.String, org.jfree.data.Range, java.awt.Paint, java.awt.Stroke, java.awt.Paint)"
"org.jfree.data.RangeTest.testScale()","org.jfree.data.Range.scale(org.jfree.data.Range, double)"
"org.jfree.data.RangeTest.testHashCode()","org.jfree.data.Range.hashCode()"
"org.jfree.data.RangeTest.testCombine()","org.jfree.data.Range.equals(java.lang.Object)"
"org.jfree.data.RangeTest.testEquals()","org.jfree.data.Range.equals(java.lang.Object)"
"org.jfree.data.RangeTest.testConstructor()","org.jfree.data.Range.getLowerBound()"
"org.jfree.data.RangeTest.testConstructor()","org.jfree.data.Range.getUpperBound()"
"org.jfree.data.gantt.TaskTest.testCloning()","org.jfree.data.gantt.Task.clone()"
"org.jfree.chart.labels.StandardXYSeriesLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.<init>(java.lang.String)"
"org.jfree.chart.labels.StandardXYSeriesLabelGeneratorTest.testEquals()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardXYSeriesLabelGeneratorTest.testCloning()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.clone()"
"org.jfree.chart.labels.StandardXYSeriesLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.hashCode()"
"org.jfree.chart.labels.StandardXYSeriesLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardXYSeriesLabelGenerator.<init>()"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.<init>()"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.clone()"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.<init>()"
"org.jfree.chart.labels.StandardCategoryItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.StandardCategoryItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.plot.ValueMarkerTest.test1808376()","org.jfree.chart.plot.ValueMarker.<init>(double, java.awt.Paint, java.awt.Stroke, java.awt.Paint, java.awt.Stroke, float)"
"org.jfree.chart.plot.ValueMarkerTest.test1808376()","org.jfree.chart.plot.Marker.getOutlinePaint()"
"org.jfree.chart.plot.ValueMarkerTest.test1808376()","org.jfree.chart.plot.Marker.getOutlineStroke()"
"org.jfree.chart.plot.ColorPaletteTest.testCloning()","org.jfree.chart.plot.ColorPalette.clone()"
"org.jfree.chart.plot.ColorPaletteTest.testEquals()","org.jfree.chart.plot.GreyPalette.<init>()"
"org.jfree.chart.plot.ColorPaletteTest.testEquals()","org.jfree.chart.plot.GreyPalette.initialize()"
"org.jfree.data.DefaultKeyedValuesTest.testGetItemCount()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, double)"
"org.jfree.data.DefaultKeyedValuesTest.testGetItemCount()","org.jfree.data.DefaultKeyedValues.clear()"
"org.jfree.data.DefaultKeyedValues2DTest.testRemoveValueBug1690654()","org.jfree.data.DefaultKeyedValues2D.removeValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValuesTest.testClear()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, double)"
"org.jfree.data.DefaultKeyedValuesTest.testClear()","org.jfree.data.DefaultKeyedValues.clear()"
"org.jfree.data.DefaultKeyedValuesTest.testAddValue()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, double)"
"org.jfree.data.DefaultKeyedValues2DTest.testRemoveValue()","org.jfree.data.DefaultKeyedValues2D.removeValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValuesTest.testConstructor()","org.jfree.data.DefaultKeyedValues.getItemCount()"
"org.jfree.data.time.YearTest.testGetSerialIndex()","org.jfree.data.time.Year.getSerialIndex()"
"org.jfree.data.time.MonthTest.testDec9999Previous()","org.jfree.data.time.Month.previous()"
"org.jfree.data.time.MonthTest.testDec9999Previous()","org.jfree.data.time.Month.equals(java.lang.Object)"
"org.jfree.data.time.MonthTest.testJan1900Previous()","org.jfree.data.time.Month.previous()"
"org.jfree.chart.LegendItemTest.testEquals()","org.jfree.chart.LegendItem.setFillPaint(java.awt.Paint)"
"org.jfree.chart.LegendItemTest.testEquals()","org.jfree.chart.LegendItem.setLabelPaint(java.awt.Paint)"
"org.jfree.chart.LegendItemTest.testEquals()","org.jfree.chart.LegendItem.setLinePaint(java.awt.Paint)"
"org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator.<init>()"
"org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator.generateToolTipFragment(java.lang.String)"
"org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator.<init>()"
"org.jfree.chart.imagemap.DynamicDriveToolTipTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator.generateToolTipFragment(java.lang.String)"
"org.jfree.data.time.ohlc.OHLCItemTest.testConstructor1()","org.jfree.data.time.ohlc.OHLCItem.getCloseValue()"
"org.jfree.data.time.ohlc.OHLCItemTest.testConstructor1()","org.jfree.data.time.ohlc.OHLCItem.getHighValue()"
"org.jfree.data.time.ohlc.OHLCItemTest.testConstructor1()","org.jfree.data.time.ohlc.OHLCItem.getLowValue()"
"org.jfree.data.time.ohlc.OHLCItemTest.testConstructor1()","org.jfree.data.time.ohlc.OHLCItem.getOpenValue()"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testCloning()","org.jfree.chart.annotations.XYTitleAnnotation.clone()"
"org.jfree.chart.title.CompositeTitleTest.testConstructor()","org.jfree.chart.title.CompositeTitle.<init>()"
"org.jfree.chart.title.CompositeTitleTest.testConstructor()","org.jfree.chart.title.CompositeTitle.getBackgroundPaint()"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTitleAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTitleAnnotation.<init>(double, double, org.jfree.chart.title.Title)"
"org.jfree.chart.annotations.XYTitleAnnotationTest.testEquals()","org.jfree.chart.annotations.XYTitleAnnotation.<init>(double, double, org.jfree.chart.title.Title, org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.axis.CategoryTickTest.testCloning()","org.jfree.chart.axis.Tick.clone()"
"org.jfree.chart.axis.CategoryTickTest.testCloning()","org.jfree.chart.axis.CategoryTick.equals(java.lang.Object)"
"org.jfree.data.time.YearTest.testNotCloneable()","org.jfree.data.time.Year.<init>(int)"
"org.jfree.data.time.YearTest.testNotCloneable()","org.jfree.data.time.Year.peg(java.util.Calendar)"
"org.jfree.data.time.YearTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Year.<init>(int)"
"org.jfree.data.time.YearTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Year.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.YearTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Year.peg(java.util.Calendar)"
"org.jfree.data.time.YearTest.testDateConstructor2()","org.jfree.data.time.Year.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.data.time.YearTest.testDateConstructor2()","org.jfree.data.time.Year.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.TimeSeriesTest.testGetValue()","org.jfree.data.time.TimeSeries.getValue(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.YearTest.testDateConstructor1()","org.jfree.data.time.Year.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.data.time.YearTest.testDateConstructor1()","org.jfree.data.time.Year.<init>(java.util.Date, java.util.TimeZone, java.util.Locale)"
"org.jfree.data.time.YearTest.testEquals()","org.jfree.data.time.Year.equals(java.lang.Object)"
"org.jfree.data.time.YearTest.test9999Previous()","org.jfree.data.time.Year.previous()"
"org.jfree.data.time.YearTest.test1900Next()","org.jfree.data.time.Year.next()"
"org.jfree.data.time.YearTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.ohlc.OHLCItemTest.testHashcode()","org.jfree.data.ComparableObjectItem.hashCode()"
"org.jfree.data.time.WeekTest.testNext()","org.jfree.data.time.Week.getYear()"
"org.jfree.data.time.WeekTest.testNext()","org.jfree.data.time.Week.next()"
"org.jfree.data.time.WeekTest.testNext()","org.jfree.data.time.Week.getWeek()"
"org.jfree.data.time.YearTest.testNext()","org.jfree.data.time.Year.next()"
"org.jfree.data.time.TimeSeriesTest.testGetDataItem2()","org.jfree.data.time.TimeSeries.getDataItem(org.jfree.data.time.RegularTimePeriod)"
"org.jfree.data.time.YearTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Year.<init>(int)"
"org.jfree.data.time.YearTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Year.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.YearTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Year.peg(java.util.Calendar)"
"org.jfree.data.time.YearTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.YearTest.testGetLastMillisecond()","org.jfree.data.time.Year.getLastMillisecond()"
"org.jfree.data.time.YearTest.testMinuss9999Previous()","org.jfree.data.time.Year.previous()"
"org.jfree.data.time.ohlc.OHLCItemTest.testEquals()","org.jfree.data.time.ohlc.OHLCItem.<init>(org.jfree.data.time.RegularTimePeriod, double, double, double, double)"
"org.jfree.data.time.ohlc.OHLCItemTest.testEquals()","org.jfree.data.time.ohlc.OHLC.<init>(double, double, double, double)"
"org.jfree.data.time.YearTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.ohlc.OHLCItemTest.testCloning()","org.jfree.data.ComparableObjectItem.clone()"
"org.jfree.data.time.YearTest.testEqualsSelf()","org.jfree.data.time.Year.<init>()"
"org.jfree.data.time.YearTest.testEqualsSelf()","org.jfree.data.time.Year.<init>(java.util.Date)"
"org.jfree.data.time.YearTest.test9999Next()","org.jfree.data.time.Year.next()"
"org.jfree.data.time.YearTest.testHashcode()","org.jfree.data.time.Year.hashCode()"
"org.jfree.data.time.WeekTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.MonthTest.testDateConstructor1()","org.jfree.data.time.Month.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.data.time.MonthTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Month.<init>(int, int)"
"org.jfree.data.time.MonthTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getLastMillisecond(java.util.TimeZone)"
"org.jfree.data.time.MonthTest.testGetLastMillisecondWithTimeZone()","org.jfree.data.time.Month.peg(java.util.Calendar)"
"org.jfree.data.time.MonthTest.testDateConstructor2()","org.jfree.data.time.Month.<init>(java.util.Date, java.util.TimeZone)"
"org.jfree.chart.plot.dial.DialValueIndicatorTest.testHashCode()","org.jfree.chart.plot.dial.DialValueIndicator.hashCode()"
"org.jfree.chart.labels.ItemLabelPositionTest.testEquals()","org.jfree.chart.labels.ItemLabelPosition.<init>()"
"org.jfree.data.statistics.StatisticsTest.testCalculateMedian3()","org.jfree.data.statistics.Statistics.calculateMedian(java.util.List)"
"org.jfree.data.statistics.StatisticsTest.testCalculateMedian2()","org.jfree.data.statistics.Statistics.calculateMedian(java.util.List)"
"org.jfree.data.statistics.StatisticsTest.testCalculateMedian1()","org.jfree.data.statistics.Statistics.calculateMedian(java.util.List)"
"org.jfree.data.statistics.StatisticsTest.testCalculateMedian4()","org.jfree.data.statistics.Statistics.calculateMedian(java.util.List)"
"org.jfree.chart.renderer.xy.StandardXYBarPainterTest.testHashcode()","org.jfree.chart.renderer.xy.StandardXYBarPainter.hashCode()"
"org.jfree.chart.renderer.xy.StandardXYBarPainterTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYBarPainter.equals(java.lang.Object)"
"org.jfree.chart.renderer.xy.StandardXYBarPainterTest.testEquals()","org.jfree.chart.renderer.xy.StandardXYBarPainter.<init>()"
"org.jfree.chart.labels.BoxAndWhiskerXYToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardXYToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardXYToolTipGenerator.<init>()"
"org.jfree.chart.renderer.OutlierTest.testEquals()","org.jfree.chart.renderer.Outlier.equals(java.lang.Object)"
"org.jfree.chart.renderer.OutlierTest.testEquals()","org.jfree.chart.renderer.Outlier.setPoint(java.awt.geom.Point2D)"
"org.jfree.chart.renderer.OutlierTest.testEquals()","org.jfree.chart.renderer.Outlier.setRadius(double)"
"org.jfree.chart.renderer.OutlierTest.testSerialization()","org.jfree.chart.renderer.Outlier.<init>(double, double, double)"
"org.jfree.chart.renderer.OutlierTest.testCloning()","org.jfree.chart.renderer.Outlier.<init>(double, double, double)"
"org.jfree.data.time.SimpleTimePeriodTest.testEqualsSelf()","org.jfree.data.time.SimpleTimePeriod.equals(java.lang.Object)"
"org.jfree.data.time.SimpleTimePeriodTest.testHashcode()","org.jfree.data.time.SimpleTimePeriod.hashCode()"
"org.jfree.data.time.SimpleTimePeriodTest.testImmutable()","org.jfree.data.time.SimpleTimePeriod.equals(java.lang.Object)"
"org.jfree.data.time.SimpleTimePeriodTest.testEquals()","org.jfree.data.time.SimpleTimePeriod.equals(java.lang.Object)"
"org.jfree.data.time.SimpleTimePeriodTest.testClone()","org.jfree.data.time.SimpleTimePeriod.<init>(java.util.Date, java.util.Date)"
"org.jfree.data.time.SimpleTimePeriodTest.testClone()","org.jfree.data.time.SimpleTimePeriod.<init>(long, long)"
"org.jfree.data.time.SimpleTimePeriodTest.testCompareTo()","org.jfree.data.time.SimpleTimePeriod.compareTo(java.lang.Object)"
"org.jfree.chart.urls.StandardXYURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.StandardXYURLGenerator.<init>(java.lang.String)"
"org.jfree.chart.urls.StandardXYURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.StandardXYURLGenerator.<init>(java.lang.String, java.lang.String, java.lang.String)"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.HighLowItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>()"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>(java.text.DateFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.HighLowItemLabelGenerator.clone()"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.HighLowItemLabelGenerator.hashCode()"
"org.jfree.chart.urls.TimeSeriesURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.TimeSeriesURLGenerator.<init>()"
"org.jfree.chart.imagemap.StandardToolTipTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator.<init>()"
"org.jfree.chart.imagemap.StandardToolTipTagFragmentGeneratorTest.testGenerateURLFragment()","org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator.generateToolTipFragment(java.lang.String)"
"org.jfree.chart.labels.CustomXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.CustomXYToolTipGenerator.clone()"
"org.jfree.chart.labels.CustomXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.CustomXYToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat, java.text.DateFormat, java.text.DateFormat)"
"org.jfree.data.function.NormalDistributionFunction2DTest.testHashCode()","org.jfree.data.function.NormalDistributionFunction2D.hashCode()"
"org.jfree.data.function.NormalDistributionFunction2DTest.testEquals()","org.jfree.data.function.NormalDistributionFunction2D.equals(java.lang.Object)"
"org.jfree.data.function.NormalDistributionFunction2DTest.testEquals()","org.jfree.data.function.NormalDistributionFunction2D.<init>(double, double)"
"org.jfree.data.ComparableObjectItemTest.testEquals()","org.jfree.data.ComparableObjectItem.equals(java.lang.Object)"
"org.jfree.data.ComparableObjectItemTest.testConstructor()","org.jfree.data.ComparableObjectItem.<init>(java.lang.Comparable, java.lang.Object)"
"org.jfree.data.xy.YIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.YIntervalDataItem.getYHighValue()"
"org.jfree.data.xy.YIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.YIntervalDataItem.getYLowValue()"
"org.jfree.data.xy.YIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.YIntervalDataItem.getX()"
"org.jfree.data.xy.YIntervalDataItemTest.testConstructor1()","org.jfree.data.xy.YIntervalDataItem.getYValue()"
"org.jfree.data.ComparableObjectItemTest.testCloning()","org.jfree.data.ComparableObjectItem.clone()"
"org.jfree.data.xy.YIntervalDataItemTest.testCloning()","org.jfree.data.ComparableObjectItem.clone()"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testHashCode()","org.jfree.chart.axis.ExtendedCategoryAxis.<init>(java.lang.String)"
"org.jfree.chart.axis.ExtendedCategoryAxisTest.testHashCode()","org.jfree.chart.axis.ExtendedCategoryAxis.equals(java.lang.Object)"
"org.jfree.data.xy.OHLCDataItemTest.testEquals()","org.jfree.data.xy.OHLCDataItem.equals(java.lang.Object)"
"org.jfree.data.xy.OHLCDataItemTest.testCloning()","org.jfree.data.xy.OHLCDataItem.<init>(java.util.Date, double, double, double, double, double)"
"org.jfree.data.xy.XYCoordinateTest.testEquals()","org.jfree.data.xy.XYCoordinate.equals(java.lang.Object)"
"org.jfree.data.xy.XYCoordinateTest.testEquals()","org.jfree.data.xy.XYCoordinate.<init>(double, double)"
"org.jfree.data.xy.XYCoordinateTest.testCloning()","org.jfree.data.xy.XYCoordinate.<init>(double, double)"
"org.jfree.data.xy.XYCoordinateTest.testHashcode()","org.jfree.data.xy.XYCoordinate.hashCode()"
"org.jfree.chart.renderer.GrayPaintScaleTest.testConstructor()","org.jfree.chart.renderer.GrayPaintScale.getAlpha()"
"org.jfree.chart.axis.QuarterDateFormatTest.testHashCode()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[])"
"org.jfree.chart.axis.QuarterDateFormatTest.testHashCode()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[], boolean)"
"org.jfree.chart.axis.QuarterDateFormatTest.testHashCode()","org.jfree.chart.axis.QuarterDateFormat.equals(java.lang.Object)"
"org.jfree.chart.axis.QuarterDateFormatTest.testCloning()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[])"
"org.jfree.chart.axis.QuarterDateFormatTest.testCloning()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[], boolean)"
"org.jfree.chart.axis.QuarterDateFormatTest.testCloning()","org.jfree.chart.axis.QuarterDateFormat.equals(java.lang.Object)"
"org.jfree.chart.axis.QuarterDateFormatTest.testEquals()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[])"
"org.jfree.chart.axis.QuarterDateFormatTest.testEquals()","org.jfree.chart.axis.QuarterDateFormat.<init>(java.util.TimeZone, java.lang.String[], boolean)"
"org.jfree.chart.axis.QuarterDateFormatTest.testEquals()","org.jfree.chart.axis.QuarterDateFormat.equals(java.lang.Object)"
"org.jfree.data.DataUtilitiesTest.testCreateNumberArray2D()","org.jfree.data.DataUtilities.createNumberArray2D(double[][])"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testEquals()","org.jfree.chart.axis.PeriodAxisLabelInfo.equals(java.lang.Object)"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testEquals()","org.jfree.chart.axis.PeriodAxisLabelInfo.<init>(java.lang.Class, java.text.DateFormat)"
"org.jfree.chart.axis.PeriodAxisLabelInfoTest.testEquals()","org.jfree.chart.axis.PeriodAxisLabelInfo.<init>(java.lang.Class, java.text.DateFormat, org.jfree.ui.RectangleInsets, java.awt.Font, java.awt.Paint, boolean, java.awt.Stroke, java.awt.Paint)"
"org.jfree.data.DataUtilitiesTest.testCalculateColumnTotal2()","org.jfree.data.DataUtilities.calculateColumnTotal(org.jfree.data.Values2D, int, int[])"
"org.jfree.data.DefaultKeyedValues2DTest.testSparsePopulation()","org.jfree.data.DefaultKeyedValues2D.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValues2DTest.testColumnCount()","org.jfree.data.DefaultKeyedValues2D.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValues2DTest.testColumnCount()","org.jfree.data.DefaultKeyedValues2D.getColumnCount()"
"org.jfree.data.DefaultKeyedValues2DTest.testColumnCount()","org.jfree.data.DefaultKeyedValues2D.<init>()"
"org.jfree.data.DefaultKeyedValues2DTest.testColumnCount()","org.jfree.data.DefaultKeyedValues2D.<init>(boolean)"
"org.jfree.data.DefaultKeyedValues2DTest.testGetValue2()","org.jfree.data.DefaultKeyedValues2D.getValue(int, int)"
"org.jfree.data.DefaultKeyedValues2DTest.testGetValue2()","org.jfree.data.DefaultKeyedValues2D.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValues2DTest.testGetValue2()","org.jfree.data.DefaultKeyedValues2D.<init>()"
"org.jfree.data.DefaultKeyedValues2DTest.testGetValue()","org.jfree.data.DefaultKeyedValues2D.getValue(java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValues2DTest.testGetColumnKey()","org.jfree.data.DefaultKeyedValues2D.getColumnKey(int)"
"org.jfree.data.DataUtilitiesTest.testCalculateColumnTotal()","org.jfree.data.DataUtilities.calculateColumnTotal(org.jfree.data.Values2D, int)"
"org.jfree.data.DataUtilitiesTest.testCalculateRowTotal()","org.jfree.data.DataUtilities.calculateRowTotal(org.jfree.data.Values2D, int)"
"org.jfree.data.DefaultKeyedValues2DTest.testEquals()","org.jfree.data.DefaultKeyedValues2D.equals(java.lang.Object)"
"org.jfree.data.DefaultKeyedValues2DTest.testRowCount()","org.jfree.data.DefaultKeyedValues2D.addValue(java.lang.Number, java.lang.Comparable, java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValues2DTest.testRowCount()","org.jfree.data.DefaultKeyedValues2D.getRowCount()"
"org.jfree.data.DefaultKeyedValues2DTest.testRowCount()","org.jfree.data.DefaultKeyedValues2D.<init>()"
"org.jfree.data.DefaultKeyedValues2DTest.testRowCount()","org.jfree.data.DefaultKeyedValues2D.<init>(boolean)"
"org.jfree.chart.plot.PlotRenderingInfoTest.testEquals()","org.jfree.chart.plot.PlotRenderingInfo.addSubplotInfo(org.jfree.chart.plot.PlotRenderingInfo)"
"org.jfree.chart.plot.PlotRenderingInfoTest.testEquals()","org.jfree.chart.plot.PlotRenderingInfo.getSubplotInfo(int)"
"org.jfree.chart.plot.PlotRenderingInfoTest.testCloning()","org.jfree.chart.plot.PlotRenderingInfo.clone()"
"org.jfree.chart.plot.PlotRenderingInfoTest.testCloning()","org.jfree.chart.plot.PlotRenderingInfo.getPlotArea()"
"org.jfree.chart.labels.SymbolicXYItemLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.SymbolicXYItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.SymbolicXYItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.SymbolicXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.SymbolicXYItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.SymbolicXYItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.SymbolicXYItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.SymbolicXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.SymbolicXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.SymbolicXYItemLabelGenerator.clone()"
"org.jfree.chart.plot.ValueMarkerTest.testCloning()","org.jfree.chart.plot.Marker.clone()"
"org.jfree.chart.block.LineBorderTest.testCloning()","org.jfree.chart.block.LineBorder.<init>()"
"org.jfree.chart.block.LineBorderTest.testCloning()","org.jfree.chart.block.LineBorder.<init>(java.awt.Paint, java.awt.Stroke, org.jfree.ui.RectangleInsets)"
"org.jfree.chart.plot.PieLabelRecordTest.testCloning()","org.jfree.text.TextBox.<init>(java.lang.String)"
"org.jfree.chart.plot.PieLabelRecordTest.testCloning()","org.jfree.chart.plot.PieLabelRecord.<init>(java.lang.Comparable, double, double, org.jfree.text.TextBox, double, double, double)"
"org.jfree.chart.plot.PieLabelRecordTest.testCloning()","org.jfree.text.TextBox.<init>(org.jfree.text.TextBlock)"
"org.jfree.chart.plot.PieLabelRecordTest.testEquals()","org.jfree.chart.plot.PieLabelRecord.equals(java.lang.Object)"
"org.jfree.chart.plot.PieLabelRecordTest.testEquals()","org.jfree.text.TextBox.<init>(java.lang.String)"
"org.jfree.chart.block.LineBorderTest.testEquals()","org.jfree.chart.block.LineBorder.equals(java.lang.Object)"
"org.jfree.chart.plot.dial.StandardDialFrameTest.testHashCode()","org.jfree.chart.plot.dial.StandardDialFrame.hashCode()"
"org.jfree.chart.axis.CategoryAxis3DTest.testCloning()","org.jfree.chart.axis.CategoryAxis3D.clone()"
"org.jfree.chart.axis.CategoryAxis3DTest.testCloning()","org.jfree.chart.axis.CategoryAxis3D.<init>(java.lang.String)"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2Segment()","org.jfree.chart.axis.SegmentedTimeline.Segment.getSegmentNumber()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsSegment()","org.jfree.chart.axis.SegmentedTimeline.Segment.getSegmentNumber()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinSegment()","org.jfree.chart.axis.SegmentedTimeline.Segment.getMillisecond()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinSegment()","org.jfree.chart.axis.SegmentedTimeline.Segment.getSegmentNumber()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinInc()","org.jfree.chart.axis.SegmentedTimeline.Segment.copy()"
"org.jfree.chart.axis.SegmentedTimelineTest.testFifteenMinInc()","org.jfree.chart.axis.SegmentedTimeline.Segment.getMillisecond()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridayInc()","org.jfree.chart.axis.SegmentedTimeline.Segment.copy()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridayInc()","org.jfree.chart.axis.SegmentedTimeline.Segment.getMillisecond()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsInc()","org.jfree.chart.axis.SegmentedTimeline.Segment.copy()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMsInc()","org.jfree.chart.axis.SegmentedTimeline.Segment.getMillisecond()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2Inc()","org.jfree.chart.axis.SegmentedTimeline.Segment.copy()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMs2Inc()","org.jfree.chart.axis.SegmentedTimeline.Segment.getMillisecond()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridaySegment()","org.jfree.chart.axis.SegmentedTimeline.Segment.getMillisecond()"
"org.jfree.chart.axis.SegmentedTimelineTest.testMondayThroughFridaySegment()","org.jfree.chart.axis.SegmentedTimeline.Segment.getSegmentNumber()"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYDrawableAnnotation.hashCode()"
"org.jfree.chart.labels.StandardPieSectionLabelGeneratorTest.testCloning()","org.jfree.chart.labels.StandardPieSectionLabelGenerator.clone()"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractXYItemLabelGenerator.clone()"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testCloning()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.labels.StandardXYItemLabelGeneratorTest.testEquals()","org.jfree.chart.labels.StandardXYItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat, java.text.DateFormat)"
"org.jfree.data.xy.XYDataItemTest.testEquals()","org.jfree.data.xy.XYDataItem.<init>(double, double)"
"org.jfree.data.time.WeekTest.testW1Y1900Next()","org.jfree.data.time.Week.next()"
"org.jfree.data.time.WeekTest.testW1Y1900Next()","org.jfree.data.time.Week.equals(java.lang.Object)"
"org.jfree.data.time.WeekTest.testEquals()","org.jfree.data.time.Week.equals(java.lang.Object)"
"org.jfree.data.time.WeekTest.testHashcode()","org.jfree.data.time.Week.hashCode()"
"org.jfree.data.time.WeekTest.testW52Y9999Previous()","org.jfree.data.time.Week.previous()"
"org.jfree.chart.plot.dial.DialBackgroundTest.testHashCode()","org.jfree.chart.plot.dial.DialBackground.hashCode()"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testCloning()","org.jfree.chart.annotations.XYDrawableAnnotation.clone()"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testEquals()","org.jfree.chart.annotations.XYDrawableAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testEquals()","org.jfree.chart.annotations.XYDrawableAnnotation.<init>(double, double, double, double, double, org.jfree.ui.Drawable)"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testEquals()","org.jfree.chart.annotations.XYDrawableAnnotation.<init>(double, double, double, double, org.jfree.ui.Drawable)"
"org.jfree.data.RangeTypeTest.testHashCode()","org.jfree.data.RangeType.hashCode()"
"org.jfree.data.ComparableObjectSeriesTest.testConstructor1()","org.jfree.data.ComparableObjectSeries.getAllowDuplicateXValues()"
"org.jfree.data.ComparableObjectSeriesTest.testConstructor1()","org.jfree.data.ComparableObjectSeries.getAutoSort()"
"org.jfree.data.time.TimeSeriesTest.testRemoveAgedItems3()","org.jfree.data.time.TimeSeries.removeAgedItems(long, boolean)"
"org.jfree.chart.LegendItemCollectionTest.testEquals()","org.jfree.chart.LegendItemCollection.equals(java.lang.Object)"
"org.jfree.chart.axis.SubCategoryAxisTest.testHashCode()","org.jfree.chart.axis.SubCategoryAxis.hashCode()"
"org.jfree.chart.axis.SubCategoryAxisTest.testHashCode()","org.jfree.chart.axis.SubCategoryAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.AxisTest.testHashCode()","org.jfree.chart.axis.CategoryAxis.hashCode()"
"org.jfree.chart.axis.AxisTest.testHashCode()","org.jfree.chart.axis.CategoryAxis.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryAxisTest.testCloning()","org.jfree.chart.axis.CategoryAxis.clone()"
"org.jfree.chart.annotations.XYLineAnnotationTest.testHashCode()","org.jfree.chart.annotations.XYLineAnnotation.hashCode()"
"org.jfree.chart.axis.CategoryAxisTest.testHashCode()","org.jfree.chart.axis.CategoryAxis.hashCode()"
"org.jfree.chart.axis.CategoryAxisTest.testHashCode()","org.jfree.chart.axis.CategoryAxis.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYBoxAnnotationTest.testEquals()","org.jfree.chart.annotations.XYBoxAnnotation.<init>(double, double, double, double, java.awt.Stroke, java.awt.Paint, java.awt.Paint)"
"org.jfree.chart.annotations.XYBoxAnnotationTest.testEquals()","org.jfree.chart.annotations.XYBoxAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYLineAnnotationTest.testCloning()","org.jfree.chart.annotations.XYLineAnnotation.clone()"
"org.jfree.chart.annotations.XYLineAnnotationTest.testEquals()","org.jfree.chart.annotations.XYLineAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYLineAnnotationTest.testEquals()","org.jfree.chart.annotations.XYLineAnnotation.<init>(double, double, double, double, java.awt.Stroke, java.awt.Paint)"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testCloning()","org.jfree.chart.urls.CustomPieURLGenerator.addURLs(java.util.Map)"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testCloning()","org.jfree.chart.urls.CustomPieURLGenerator.clone()"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testCloning()","org.jfree.chart.urls.CustomPieURLGenerator.equals(java.lang.Object)"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomPieURLGenerator.addURLs(java.util.Map)"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testEquals()","org.jfree.chart.urls.CustomPieURLGenerator.equals(java.lang.Object)"
"org.jfree.data.time.MonthTest.testEqualsSelf()","org.jfree.data.time.Month.<init>()"
"org.jfree.data.time.MonthTest.testEqualsSelf()","org.jfree.data.time.Month.<init>(java.util.Date)"
"org.jfree.data.function.PowerFunction2DTest.testHashCode()","org.jfree.data.function.PowerFunction2D.hashCode()"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.<init>(java.lang.String, java.text.NumberFormat)"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.<init>()"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.<init>()"
"org.jfree.chart.axis.StandardTickUnitSourceTest.testEquals()","org.jfree.chart.axis.StandardTickUnitSource.<init>()"
"org.jfree.chart.axis.StandardTickUnitSourceTest.testEquals()","org.jfree.chart.axis.StandardTickUnitSource.equals(java.lang.Object)"
"org.jfree.data.function.PolynomialFunction2DTest.testGetOrder()","org.jfree.data.function.PolynomialFunction2D.getOrder()"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testCloning()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.clone()"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.hashCode()"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testEquals()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.addSeriesLabel(int, java.lang.String)"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testEquals()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testEquals()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.<init>()"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testEquals()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.<init>(java.lang.String)"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.<init>()"
"org.jfree.chart.labels.MultipleXYSeriesLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.MultipleXYSeriesLabelGenerator.<init>(java.lang.String)"
"org.jfree.data.DefaultKeyedValuesTest.testGetKeys()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, double)"
"org.jfree.data.DefaultKeyedValuesTest.testGetKeys()","org.jfree.data.DefaultKeyedValues.getKeys()"
"org.jfree.data.DefaultKeyedValuesTest.testGetKeys()","org.jfree.data.DefaultKeyedValues.clear()"
"org.jfree.data.DefaultKeyedValuesTest.testGetKey()","org.jfree.data.DefaultKeyedValues.getKey(int)"
"org.jfree.data.DefaultKeyedValuesTest.testGetKey()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.DefaultKeyedValuesTest.testInsertAndRetrieve()","org.jfree.data.DefaultKeyedValues.getValue(java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValuesTest.testInsertAndRetrieve()","org.jfree.data.DefaultKeyedValues.getKey(int)"
"org.jfree.data.DefaultKeyedValuesTest.testInsertAndRetrieve()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.DefaultKeyedValuesTest.testGetIndex()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.DefaultKeyedValuesTest.testGetValue()","org.jfree.data.DefaultKeyedValues.getValue(java.lang.Comparable)"
"org.jfree.data.DefaultKeyedValuesTest.testGetValue()","org.jfree.data.DefaultKeyedValues.addValue(java.lang.Comparable, java.lang.Number)"
"org.jfree.data.statistics.StatisticsTest.testGetStdDev()","org.jfree.data.statistics.Statistics.getStdDev(java.lang.Number[])"
"org.jfree.data.statistics.StatisticsTest.testCalculateMean_Array()","org.jfree.data.statistics.Statistics.calculateMean(java.lang.Number[])"
"org.jfree.data.statistics.StatisticsTest.testCalculateMean_Array()","org.jfree.data.statistics.Statistics.calculateMean(java.lang.Number[], boolean)"
"org.jfree.chart.annotations.XYImageAnnotationTest.testEquals()","org.jfree.chart.annotations.XYImageAnnotation.equals(java.lang.Object)"
"org.jfree.chart.annotations.XYImageAnnotationTest.testEquals()","org.jfree.chart.annotations.XYImageAnnotation.<init>(double, double, java.awt.Image)"
"org.jfree.chart.annotations.XYImageAnnotationTest.testEquals()","org.jfree.chart.annotations.XYImageAnnotation.<init>(double, double, java.awt.Image, org.jfree.ui.RectangleAnchor)"
"org.jfree.chart.annotations.XYLineAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYLineAnnotation.<init>(double, double, double, double, java.awt.Stroke, java.awt.Paint)"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYDrawableAnnotation.<init>(double, double, double, double, double, org.jfree.ui.Drawable)"
"org.jfree.chart.annotations.XYDrawableAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.XYDrawableAnnotation.<init>(double, double, double, double, org.jfree.ui.Drawable)"
"org.jfree.chart.annotations.XYImageAnnotationTest.testCloning()","org.jfree.chart.annotations.XYImageAnnotation.clone()"
"org.jfree.chart.urls.StandardCategoryURLGeneratorTest.testEquals()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>(java.lang.String, java.lang.String, java.lang.String)"
"org.jfree.data.function.PolynomialFunction2DTest.testConstructor()","org.jfree.data.function.PolynomialFunction2D.getCoefficients()"
"org.jfree.data.function.PolynomialFunction2DTest.testGetCoefficients()","org.jfree.data.function.PolynomialFunction2D.getCoefficients()"
"org.jfree.chart.axis.LogarithmicAxisTest.testSwitchedLog10()","org.jfree.chart.axis.LogarithmicAxis.getAllowNegativesFlag()"
"org.jfree.data.time.WeekTest.testGetLastMillisecond()","org.jfree.data.time.Week.getLastMillisecond()"
"org.jfree.data.time.WeekTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.WeekTest.testGetEnd()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testGetEnd()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.time.FixedMillisecondTest.testHashcode()","org.jfree.data.time.FixedMillisecond.hashCode()"
"org.jfree.data.time.FixedMillisecondTest.testHashcode()","org.jfree.data.time.FixedMillisecond.equals(java.lang.Object)"
"org.jfree.data.time.FixedMillisecondTest.testNotCloneable()","org.jfree.data.time.FixedMillisecond.<init>(long)"
"org.jfree.data.time.FixedMillisecondTest.testNotCloneable()","org.jfree.data.time.FixedMillisecond.<init>(java.util.Date)"
"org.jfree.data.statistics.BoxAndWhiskerCalculatorTest.test1593149()","org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(java.util.List)"
"org.jfree.chart.urls.CustomPieURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.CustomPieURLGenerator.<init>()"
"org.jfree.chart.axis.LogarithmicAxisTest.testAdjustedLog10()","org.jfree.chart.axis.LogarithmicAxis.adjustedPow10(double)"
"org.jfree.chart.axis.LogarithmicAxisTest.testAdjustedLog10()","org.jfree.chart.axis.LogarithmicAxis.adjustedLog10(double)"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testHashCode()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.hashCode()"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.<init>()"
"org.jfree.chart.labels.BubbleXYItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.BubbleXYItemLabelGenerator.<init>(java.lang.String, java.text.NumberFormat, java.text.NumberFormat, java.text.NumberFormat)"
"org.jfree.chart.renderer.GrayPaintScaleTest.testCloning()","org.jfree.chart.renderer.GrayPaintScale.clone()"
"org.jfree.chart.renderer.GrayPaintScaleTest.testEquals()","org.jfree.chart.renderer.GrayPaintScale.equals(java.lang.Object)"
"org.jfree.chart.renderer.GrayPaintScaleTest.testEquals()","org.jfree.chart.renderer.GrayPaintScale.<init>()"
"org.jfree.chart.renderer.GrayPaintScaleTest.testEquals()","org.jfree.chart.renderer.GrayPaintScale.<init>(double, double)"
"org.jfree.chart.renderer.GrayPaintScaleTest.testEquals()","org.jfree.chart.renderer.GrayPaintScale.<init>(double, double, int)"
"org.jfree.chart.panel.CrosshairOverlayTest.testEquals()","org.jfree.chart.panel.AbstractOverlay.<init>()"
"org.jfree.chart.panel.CrosshairOverlayTest.testEquals()","org.jfree.chart.panel.CrosshairOverlay.<init>()"
"org.jfree.chart.panel.CrosshairOverlayTest.testEquals()","org.jfree.chart.panel.CrosshairOverlay.equals(java.lang.Object)"
"org.jfree.data.time.MonthTest.testGetFirstMillisecond()","org.jfree.data.time.Month.getFirstMillisecond()"
"org.jfree.data.time.MonthTest.testJan1900Next()","org.jfree.data.time.Month.next()"
"org.jfree.data.time.MonthTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Month.<init>(int, int)"
"org.jfree.data.time.MonthTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Month.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.MonthTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Month.peg(java.util.Calendar)"
"org.jfree.data.time.MonthTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Month.<init>(int, int)"
"org.jfree.data.time.MonthTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Month.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.MonthTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Month.peg(java.util.Calendar)"
"org.jfree.data.time.MonthTest.testGetLastMillisecond()","org.jfree.data.time.Month.getLastMillisecond()"
"org.jfree.data.time.MonthTest.testEquals()","org.jfree.data.time.Month.equals(java.lang.Object)"
"org.jfree.data.time.MonthTest.testNotCloneable()","org.jfree.data.time.Month.<init>(int, int)"
"org.jfree.data.time.MonthTest.testNotCloneable()","org.jfree.data.time.Month.peg(java.util.Calendar)"
"org.jfree.data.time.MonthTest.testGetSerialIndex()","org.jfree.data.time.Month.getSerialIndex()"
"org.jfree.data.time.MonthTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Month.<init>(int, int)"
"org.jfree.data.time.MonthTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.MonthTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Month.peg(java.util.Calendar)"
"org.jfree.data.time.MonthTest.testHashcode()","org.jfree.data.time.Month.hashCode()"
"org.jfree.data.time.MonthTest.testGetEnd()","org.jfree.data.time.RegularTimePeriod.getEnd()"
"org.jfree.data.time.MonthTest.testGetEnd()","org.jfree.data.time.Month.<init>(int, int)"
"org.jfree.data.time.MonthTest.testGetStart()","org.jfree.data.time.RegularTimePeriod.getStart()"
"org.jfree.data.time.MonthTest.testGetStart()","org.jfree.data.time.Month.<init>(int, int)"
"org.jfree.data.time.WeekTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Week.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testGetFirstMillisecondWithCalendar()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testWeek12005()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testWeek12005()","org.jfree.data.time.Week.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testWeek12005()","org.jfree.data.time.Week.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testWeek12005()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testNotCloneable()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testNotCloneable()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testGetFirstMillisecondWithTimeZone()","org.jfree.data.time.RegularTimePeriod.getFirstMillisecond(java.util.TimeZone)"
"org.jfree.data.time.WeekTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Week.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testGetLastMillisecondWithCalendar()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testGetSerialIndex()","org.jfree.data.time.Week.getSerialIndex()"
"org.jfree.data.time.WeekTest.testWeek532005()","org.jfree.data.time.Week.<init>(int, int)"
"org.jfree.data.time.WeekTest.testWeek532005()","org.jfree.data.time.Week.getFirstMillisecond(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testWeek532005()","org.jfree.data.time.Week.getLastMillisecond(java.util.Calendar)"
"org.jfree.data.time.WeekTest.testWeek532005()","org.jfree.data.time.Week.peg(java.util.Calendar)"
"org.jfree.data.xy.YIntervalTest.testCloning()","org.jfree.data.xy.YInterval.<init>(double, double, double)"
"org.jfree.chart.util.RelativeDateFormatTest.testFormat()","org.jfree.chart.util.RelativeDateFormat.<init>()"
"org.jfree.chart.util.RelativeDateFormatTest.testFormat()","org.jfree.chart.util.RelativeDateFormat.<init>(long)"
"org.jfree.chart.util.RelativeDateFormatTest.testFormat()","org.jfree.chart.util.RelativeDateFormat.format(java.util.Date, java.lang.StringBuffer, java.text.FieldPosition)"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testCloning()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.clone()"
"org.jfree.chart.StrokeMapTest.testPut()","org.jfree.chart.StrokeMap.put(java.lang.Comparable, java.awt.Stroke)"
"org.jfree.chart.StrokeMapTest.testPut()","org.jfree.chart.StrokeMap.getStroke(java.lang.Comparable)"
"org.jfree.chart.StrokeMapTest.testEquals()","org.jfree.chart.StrokeMap.put(java.lang.Comparable, java.awt.Stroke)"
"org.jfree.chart.StrokeMapTest.testGetStroke()","org.jfree.chart.StrokeMap.put(java.lang.Comparable, java.awt.Stroke)"
"org.jfree.chart.StrokeMapTest.testGetStroke()","org.jfree.chart.StrokeMap.getStroke(java.lang.Comparable)"
"org.jfree.chart.StrokeMapTest.testCloning()","org.jfree.chart.StrokeMap.put(java.lang.Comparable, java.awt.Stroke)"
"org.jfree.chart.renderer.xy.StandardXYBarPainterTest.testCloning()","org.jfree.chart.renderer.xy.StandardXYBarPainter.<init>()"
"org.jfree.data.time.FixedMillisecondTest.testImmutability()","org.jfree.data.time.FixedMillisecond.getFirstMillisecond()"
"org.jfree.data.time.FixedMillisecondTest.testImmutability()","org.jfree.data.time.FixedMillisecond.<init>(java.util.Date)"
"org.jfree.chart.JFreeChartTest.testSubtitleCount()","org.jfree.chart.JFreeChart.getSubtitleCount()"
"org.jfree.chart.entity.CategoryLabelEntityTest.testCloning()","org.jfree.chart.entity.CategoryLabelEntity.equals(java.lang.Object)"
"org.jfree.chart.entity.TickLabelEntityTest.testCloning()","org.jfree.chart.entity.ChartEntity.clone()"
"org.jfree.chart.labels.StandardCategorySeriesLabelGeneratorTest.testCloning()","org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.clone()"
"org.jfree.data.statistics.BoxAndWhiskerCalculatorTest.testCalculateBoxAndWhiskerStatistics()","org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateBoxAndWhiskerStatistics(java.util.List)"
"org.jfree.chart.annotations.CategoryLineAnnotationTest.testPublicCloneable()","org.jfree.chart.annotations.CategoryLineAnnotation.<init>(java.lang.Comparable, double, java.lang.Comparable, double, java.awt.Paint, java.awt.Stroke)"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardCategoryToolTipGenerator.<init>()"
"org.jfree.data.function.PolynomialFunction2DTest.testHashCode()","org.jfree.data.function.PolynomialFunction2D.hashCode()"
"org.jfree.data.statistics.BoxAndWhiskerCalculatorTest.testCalculateQ3()","org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateQ3(java.util.List)"
"org.jfree.chart.labels.StandardCategorySeriesLabelGeneratorTest.testEquals()","org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.equals(java.lang.Object)"
"org.jfree.chart.labels.StandardCategorySeriesLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.<init>(java.lang.String)"
"org.jfree.data.DefaultKeyedValueTest.testEquals()","org.jfree.data.DefaultKeyedValue.equals(java.lang.Object)"
"org.jfree.data.DataUtilitiesTest.testClone()","org.jfree.data.DataUtilities.clone(double[][])"
"org.jfree.data.statistics.StatisticsTest.testCalculateMean_Collection()","org.jfree.data.statistics.Statistics.calculateMean(java.util.Collection)"
"org.jfree.data.function.PolynomialFunction2DTest.testEquals()","org.jfree.data.function.PolynomialFunction2D.equals(java.lang.Object)"
"org.jfree.chart.axis.MonthDateFormatTest.testEquals()","org.jfree.chart.axis.MonthDateFormat.<init>()"
"org.jfree.chart.axis.MonthDateFormatTest.testEquals()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone)"
"org.jfree.chart.axis.MonthDateFormatTest.testEquals()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean, boolean)"
"org.jfree.chart.axis.MonthDateFormatTest.testEquals()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean[], java.text.DateFormat)"
"org.jfree.chart.axis.MonthDateFormatTest.testEquals()","org.jfree.chart.axis.MonthDateFormat.equals(java.lang.Object)"
"org.jfree.chart.axis.MonthDateFormatTest.testHashCode()","org.jfree.chart.axis.MonthDateFormat.<init>()"
"org.jfree.chart.axis.MonthDateFormatTest.testHashCode()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone)"
"org.jfree.chart.axis.MonthDateFormatTest.testHashCode()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean, boolean)"
"org.jfree.chart.axis.MonthDateFormatTest.testHashCode()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean[], java.text.DateFormat)"
"org.jfree.chart.axis.MonthDateFormatTest.testHashCode()","org.jfree.chart.axis.MonthDateFormat.equals(java.lang.Object)"
"org.jfree.chart.imagemap.ImageMapUtilitiesTest.testHTMLEscape()","org.jfree.chart.imagemap.ImageMapUtilities.htmlEscape(java.lang.String)"
"org.jfree.data.statistics.BoxAndWhiskerCalculatorTest.testCalculateQ1()","org.jfree.data.statistics.BoxAndWhiskerCalculator.calculateQ1(java.util.List)"
"org.jfree.chart.imagemap.ImageMapUtilitiesTest.testJavascriptEscape()","org.jfree.chart.imagemap.ImageMapUtilities.javascriptEscape(java.lang.String)"
"org.jfree.chart.axis.MonthDateFormatTest.testCloning()","org.jfree.chart.axis.MonthDateFormat.<init>()"
"org.jfree.chart.axis.MonthDateFormatTest.testCloning()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone)"
"org.jfree.chart.axis.MonthDateFormatTest.testCloning()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean, boolean)"
"org.jfree.chart.axis.MonthDateFormatTest.testCloning()","org.jfree.chart.axis.MonthDateFormat.<init>(java.util.TimeZone, java.util.Locale, int, boolean[], java.text.DateFormat)"
"org.jfree.chart.axis.MonthDateFormatTest.testCloning()","org.jfree.chart.axis.MonthDateFormat.equals(java.lang.Object)"
"org.jfree.chart.renderer.LookupPaintScaleTest.testConstructor2()","org.jfree.chart.renderer.LookupPaintScale.getDefaultPaint()"
"org.jfree.chart.renderer.LookupPaintScaleTest.testConstructor2()","org.jfree.chart.renderer.LookupPaintScale.getLowerBound()"
"org.jfree.chart.renderer.LookupPaintScaleTest.testConstructor2()","org.jfree.chart.renderer.LookupPaintScale.getUpperBound()"
"org.jfree.chart.labels.BoxAndWhiskerToolTipGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator.<init>()"
"org.jfree.chart.labels.StandardCategorySeriesLabelGeneratorTest.testHashCode()","org.jfree.chart.labels.StandardCategorySeriesLabelGenerator.hashCode()"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.StandardCategoryToolTipGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.labels.StandardCategoryToolTipGeneratorTest.testEquals()","org.jfree.chart.labels.AbstractCategoryItemLabelGenerator.<init>(java.lang.String, java.text.DateFormat)"
"org.jfree.chart.renderer.category.GradientBarPainterTest.testHashcode()","org.jfree.chart.renderer.category.GradientBarPainter.hashCode()"
"org.jfree.chart.renderer.category.GradientBarPainterTest.testEquals()","org.jfree.chart.renderer.category.GradientBarPainter.<init>(double, double, double)"
"org.jfree.chart.plot.PlotOrientationTest.testEquals()","org.jfree.chart.plot.PlotOrientation.equals(java.lang.Object)"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>()"
"org.jfree.chart.labels.HighLowItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.HighLowItemLabelGenerator.<init>(java.text.DateFormat, java.text.NumberFormat)"
"org.jfree.data.DataUtilitiesTest.testEqual()","org.jfree.data.DataUtilities.equal(double[][], double[][])"
"org.jfree.data.function.LineFunction2DTest.testHashCode()","org.jfree.data.function.LineFunction2D.hashCode()"
"org.jfree.data.time.QuarterTest.testQ1Y1900Previous()","org.jfree.data.time.Quarter.previous()"
"org.jfree.chart.util.LineUtilitiesTest.testClipLine()","org.jfree.chart.util.LineUtilities.clipLine(java.awt.geom.Line2D, java.awt.geom.Rectangle2D)"
"org.jfree.chart.block.ColumnArrangementTest.testEquals()","org.jfree.chart.block.ColumnArrangement.<init>(org.jfree.ui.HorizontalAlignment, org.jfree.ui.VerticalAlignment, double, double)"
"org.jfree.chart.labels.CustomXYItemLabelGeneratorTest.testPublicCloneable()","org.jfree.chart.labels.CustomXYToolTipGenerator.<init>()"
"org.jfree.data.statistics.SimpleHistogramBinTest.testAccepts()","org.jfree.data.statistics.SimpleHistogramBin.accepts(double)"
"org.jfree.data.statistics.SimpleHistogramBinTest.testAccepts()","org.jfree.data.statistics.SimpleHistogramBin.<init>(double, double)"
"org.jfree.chart.block.BorderArrangementTest.testCloning()","org.jfree.chart.block.BorderArrangement.<init>()"
"org.jfree.data.statistics.HistogramBinTest.testCloning()","org.jfree.data.statistics.HistogramBin.clone()"
"org.jfree.chart.axis.AxisLocationTest.testHashCode()","org.jfree.chart.axis.AxisLocation.hashCode()"
"org.jfree.chart.renderer.xy.GradientXYBarPainterTest.testCloning()","org.jfree.chart.renderer.xy.GradientXYBarPainter.<init>(double, double, double)"
"org.jfree.chart.axis.AxisLocationTest.testEquals()","org.jfree.chart.axis.AxisLocation.equals(java.lang.Object)"
"org.jfree.chart.axis.DateTickMarkPositionTest.testEquals()","org.jfree.chart.axis.DateTickMarkPosition.equals(java.lang.Object)"
"org.jfree.data.xy.XYIntervalTest.testCloning()","org.jfree.data.xy.XYInterval.<init>(double, double, double, double, double)"
"org.jfree.data.xy.XYIntervalTest.testEquals()","org.jfree.data.xy.XYInterval.equals(java.lang.Object)"
"org.jfree.data.KeyedObjectTest.testEquals()","org.jfree.data.KeyedObject.equals(java.lang.Object)"
"org.jfree.chart.renderer.category.GradientBarPainterTest.testCloning()","org.jfree.chart.renderer.category.GradientBarPainter.<init>(double, double, double)"
"org.jfree.chart.axis.CategoryLabelWidthTypeTest.testEquals()","org.jfree.chart.axis.CategoryLabelWidthType.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryLabelWidthTypeTest.testHashCode()","org.jfree.chart.axis.CategoryLabelWidthType.equals(java.lang.Object)"
"org.jfree.data.statistics.RegressionTest.testPowerRegression1a()","org.jfree.data.statistics.Regression.getPowerRegression(double[][])"
"org.jfree.data.statistics.RegressionTest.testPowerRegression2a()","org.jfree.data.statistics.Regression.getPowerRegression(double[][])"
"org.jfree.data.statistics.BoxAndWhiskerItemTest.testEquals()","org.jfree.data.statistics.BoxAndWhiskerItem.equals(java.lang.Object)"
"org.jfree.data.DefaultKeyedValues2DTest.testRemoveRow()","org.jfree.data.DefaultKeyedValues2D.removeRow(int)"
"org.jfree.data.time.ohlc.OHLCTest.testHashcode()","org.jfree.data.time.ohlc.OHLC.hashCode()"
"org.jfree.data.time.ohlc.OHLCTest.testEquals()","org.jfree.data.time.ohlc.OHLC.equals(java.lang.Object)"
"org.jfree.data.DomainOrderTest.testHashCode()","org.jfree.data.DomainOrder.hashCode()"
"org.jfree.chart.axis.DateTickMarkPositionTest.testHashCode()","org.jfree.chart.axis.DateTickMarkPosition.equals(java.lang.Object)"
"org.jfree.data.statistics.StatisticsTest.testCalculateMedian()","org.jfree.data.statistics.Statistics.calculateMedian(java.util.List, boolean)"
"org.jfree.data.statistics.StatisticsTest.testCalculateMedian6()","org.jfree.data.statistics.Statistics.calculateMedian(java.util.List, int, int)"
"org.jfree.data.statistics.StatisticsTest.testCalculateMedian5()","org.jfree.data.statistics.Statistics.calculateMedian(java.util.List, boolean)"
"org.jfree.chart.axis.MarkerAxisBandTest.testHashCode()","org.jfree.chart.axis.MarkerAxisBand.hashCode()"
"org.jfree.chart.axis.MarkerAxisBandTest.testEquals()","org.jfree.chart.axis.MarkerAxisBand.<init>(org.jfree.chart.axis.NumberAxis, double, double, double, double, java.awt.Font)"
"org.jfree.chart.axis.MarkerAxisBandTest.testEquals()","org.jfree.chart.axis.MarkerAxisBand.equals(java.lang.Object)"
"org.jfree.chart.urls.CustomXYURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.CustomXYURLGenerator.<init>()"
"org.jfree.data.time.MonthTest.testDec9999Next()","org.jfree.data.time.Month.next()"
"org.jfree.data.statistics.RegressionTest.testOLSRegression1a()","org.jfree.data.statistics.Regression.getOLSRegression(double[][])"
"org.jfree.data.statistics.RegressionTest.testOLSRegression2a()","org.jfree.data.statistics.Regression.getOLSRegression(double[][])"
"org.jfree.data.time.QuarterTest.testQ4Y9999Next()","org.jfree.data.time.Quarter.next()"
"org.jfree.data.function.LineFunction2DTest.testConstructor()","org.jfree.data.function.LineFunction2D.getIntercept()"
"org.jfree.data.function.LineFunction2DTest.testConstructor()","org.jfree.data.function.LineFunction2D.getSlope()"
"org.jfree.data.xy.VectorTest.testCloning()","org.jfree.data.xy.Vector.<init>(double, double)"
"org.jfree.data.DomainOrderTest.testEquals()","org.jfree.data.DomainOrder.equals(java.lang.Object)"
"org.jfree.data.time.WeekTest.testW52Y9999Next()","org.jfree.data.time.Week.next()"
"org.jfree.chart.urls.StandardCategoryURLGeneratorTest.testPublicCloneable()","org.jfree.chart.urls.StandardCategoryURLGenerator.<init>()"
"org.jfree.data.statistics.HistogramBinTest.testEquals()","org.jfree.data.statistics.HistogramBin.equals(java.lang.Object)"
"org.jfree.chart.renderer.AreaRendererEndTypeTest.testEquals()","org.jfree.chart.renderer.AreaRendererEndType.equals(java.lang.Object)"
"org.jfree.data.RangeTypeTest.testEquals()","org.jfree.data.RangeType.equals(java.lang.Object)"
"org.jfree.chart.axis.CategoryAnchorTest.testEquals()","org.jfree.chart.axis.CategoryAnchor.equals(java.lang.Object)"
"org.jfree.data.time.ohlc.OHLCTest.testCloning()","org.jfree.data.time.ohlc.OHLC.<init>(double, double, double, double)"
"org.jfree.chart.axis.CategoryAnchorTest.testHashCode()","org.jfree.chart.axis.CategoryAnchor.equals(java.lang.Object)"
"org.jfree.chart.HashUtilitiesTest.testHashCodeForDoubleArray()","org.jfree.chart.HashUtilities.hashCodeForDoubleArray(double[])"
"org.jfree.data.time.WeekTest.testW1Y1900Previous()","org.jfree.data.time.Week.previous()"
